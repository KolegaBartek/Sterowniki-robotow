
manipulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006df0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08006f80  08006f80  00016f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007014  08007014  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  08007014  08007014  00017014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800701c  0800701c  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800701c  0800701c  0001701c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007020  08007020  00017020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08007024  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000540  2000009c  080070c0  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005dc  080070c0  000205dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001948e  00000000  00000000  0002010f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003fb8  00000000  00000000  0003959d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016b0  00000000  00000000  0003d558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000116b  00000000  00000000  0003ec08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002afe3  00000000  00000000  0003fd73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001db03  00000000  00000000  0006ad56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fa478  00000000  00000000  00088859  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006378  00000000  00000000  00182cd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0018904c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000009c 	.word	0x2000009c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006f68 	.word	0x08006f68

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a0 	.word	0x200000a0
 80001cc:	08006f68 	.word	0x08006f68

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000572:	4b10      	ldr	r3, [pc, #64]	; (80005b4 <MX_DMA_Init+0x48>)
 8000574:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000576:	4a0f      	ldr	r2, [pc, #60]	; (80005b4 <MX_DMA_Init+0x48>)
 8000578:	f043 0301 	orr.w	r3, r3, #1
 800057c:	6493      	str	r3, [r2, #72]	; 0x48
 800057e:	4b0d      	ldr	r3, [pc, #52]	; (80005b4 <MX_DMA_Init+0x48>)
 8000580:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000582:	f003 0301 	and.w	r3, r3, #1
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800058a:	2200      	movs	r2, #0
 800058c:	2100      	movs	r1, #0
 800058e:	2010      	movs	r0, #16
 8000590:	f001 fddf 	bl	8002152 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000594:	2010      	movs	r0, #16
 8000596:	f001 fdf8 	bl	800218a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800059a:	2200      	movs	r2, #0
 800059c:	2100      	movs	r1, #0
 800059e:	2011      	movs	r0, #17
 80005a0:	f001 fdd7 	bl	8002152 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80005a4:	2011      	movs	r0, #17
 80005a6:	f001 fdf0 	bl	800218a <HAL_NVIC_EnableIRQ>

}
 80005aa:	bf00      	nop
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40021000 	.word	0x40021000

080005b8 <MX_GPIO_Init>:
     PB11   ------> I2C2_SDA
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b08c      	sub	sp, #48	; 0x30
 80005bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005be:	f107 031c 	add.w	r3, r7, #28
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
 80005c6:	605a      	str	r2, [r3, #4]
 80005c8:	609a      	str	r2, [r3, #8]
 80005ca:	60da      	str	r2, [r3, #12]
 80005cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005ce:	4ba6      	ldr	r3, [pc, #664]	; (8000868 <MX_GPIO_Init+0x2b0>)
 80005d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d2:	4aa5      	ldr	r2, [pc, #660]	; (8000868 <MX_GPIO_Init+0x2b0>)
 80005d4:	f043 0310 	orr.w	r3, r3, #16
 80005d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005da:	4ba3      	ldr	r3, [pc, #652]	; (8000868 <MX_GPIO_Init+0x2b0>)
 80005dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005de:	f003 0310 	and.w	r3, r3, #16
 80005e2:	61bb      	str	r3, [r7, #24]
 80005e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005e6:	4ba0      	ldr	r3, [pc, #640]	; (8000868 <MX_GPIO_Init+0x2b0>)
 80005e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ea:	4a9f      	ldr	r2, [pc, #636]	; (8000868 <MX_GPIO_Init+0x2b0>)
 80005ec:	f043 0304 	orr.w	r3, r3, #4
 80005f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005f2:	4b9d      	ldr	r3, [pc, #628]	; (8000868 <MX_GPIO_Init+0x2b0>)
 80005f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f6:	f003 0304 	and.w	r3, r3, #4
 80005fa:	617b      	str	r3, [r7, #20]
 80005fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005fe:	4b9a      	ldr	r3, [pc, #616]	; (8000868 <MX_GPIO_Init+0x2b0>)
 8000600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000602:	4a99      	ldr	r2, [pc, #612]	; (8000868 <MX_GPIO_Init+0x2b0>)
 8000604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000608:	64d3      	str	r3, [r2, #76]	; 0x4c
 800060a:	4b97      	ldr	r3, [pc, #604]	; (8000868 <MX_GPIO_Init+0x2b0>)
 800060c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000612:	613b      	str	r3, [r7, #16]
 8000614:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000616:	4b94      	ldr	r3, [pc, #592]	; (8000868 <MX_GPIO_Init+0x2b0>)
 8000618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061a:	4a93      	ldr	r2, [pc, #588]	; (8000868 <MX_GPIO_Init+0x2b0>)
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000622:	4b91      	ldr	r3, [pc, #580]	; (8000868 <MX_GPIO_Init+0x2b0>)
 8000624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800062e:	4b8e      	ldr	r3, [pc, #568]	; (8000868 <MX_GPIO_Init+0x2b0>)
 8000630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000632:	4a8d      	ldr	r2, [pc, #564]	; (8000868 <MX_GPIO_Init+0x2b0>)
 8000634:	f043 0302 	orr.w	r3, r3, #2
 8000638:	64d3      	str	r3, [r2, #76]	; 0x4c
 800063a:	4b8b      	ldr	r3, [pc, #556]	; (8000868 <MX_GPIO_Init+0x2b0>)
 800063c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800063e:	f003 0302 	and.w	r3, r3, #2
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000646:	4b88      	ldr	r3, [pc, #544]	; (8000868 <MX_GPIO_Init+0x2b0>)
 8000648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064a:	4a87      	ldr	r2, [pc, #540]	; (8000868 <MX_GPIO_Init+0x2b0>)
 800064c:	f043 0308 	orr.w	r3, r3, #8
 8000650:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000652:	4b85      	ldr	r3, [pc, #532]	; (8000868 <MX_GPIO_Init+0x2b0>)
 8000654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000656:	f003 0308 	and.w	r3, r3, #8
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AUDIO_RST_Pin|LD_G_Pin|XL_CS_Pin, GPIO_PIN_RESET);
 800065e:	2200      	movs	r2, #0
 8000660:	f240 1109 	movw	r1, #265	; 0x109
 8000664:	4881      	ldr	r0, [pc, #516]	; (800086c <MX_GPIO_Init+0x2b4>)
 8000666:	f002 f8bd 	bl	80027e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD_R_Pin|M3V3_REG_ON_Pin, GPIO_PIN_RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	210c      	movs	r1, #12
 800066e:	4880      	ldr	r0, [pc, #512]	; (8000870 <MX_GPIO_Init+0x2b8>)
 8000670:	f002 f8b8 	bl	80027e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000674:	2201      	movs	r2, #1
 8000676:	f44f 7100 	mov.w	r1, #512	; 0x200
 800067a:	487e      	ldr	r0, [pc, #504]	; (8000874 <MX_GPIO_Init+0x2bc>)
 800067c:	f002 f8b2 	bl	80027e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_VBUS_GPIO_Port, OTG_FS_VBUS_Pin, GPIO_PIN_RESET);
 8000680:	2200      	movs	r2, #0
 8000682:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000686:	487b      	ldr	r0, [pc, #492]	; (8000874 <MX_GPIO_Init+0x2bc>)
 8000688:	f002 f8ac 	bl	80027e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 800068c:	2200      	movs	r2, #0
 800068e:	2180      	movs	r1, #128	; 0x80
 8000690:	4879      	ldr	r0, [pc, #484]	; (8000878 <MX_GPIO_Init+0x2c0>)
 8000692:	f002 f8a7 	bl	80027e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AUDIO_RST_Pin;
 8000696:	2308      	movs	r3, #8
 8000698:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069a:	2301      	movs	r3, #1
 800069c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069e:	2300      	movs	r3, #0
 80006a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006a2:	2302      	movs	r3, #2
 80006a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AUDIO_RST_GPIO_Port, &GPIO_InitStruct);
 80006a6:	f107 031c 	add.w	r3, r7, #28
 80006aa:	4619      	mov	r1, r3
 80006ac:	486f      	ldr	r0, [pc, #444]	; (800086c <MX_GPIO_Init+0x2b4>)
 80006ae:	f001 feef 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin|OTG_FS_OverCurrent_Pin;
 80006b2:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 80006b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006b8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80006bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006be:	2300      	movs	r3, #0
 80006c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006c2:	f107 031c 	add.w	r3, r7, #28
 80006c6:	4619      	mov	r1, r3
 80006c8:	486a      	ldr	r0, [pc, #424]	; (8000874 <MX_GPIO_Init+0x2bc>)
 80006ca:	f001 fee1 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|MAG_INT_Pin|MAG_DRDY_Pin;
 80006ce:	2307      	movs	r3, #7
 80006d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006d2:	2300      	movs	r3, #0
 80006d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d6:	2300      	movs	r3, #0
 80006d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006da:	f107 031c 	add.w	r3, r7, #28
 80006de:	4619      	mov	r1, r3
 80006e0:	4864      	ldr	r0, [pc, #400]	; (8000874 <MX_GPIO_Init+0x2bc>)
 80006e2:	f001 fed5 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = JOY_CENTER_Pin|JOY_LEFT_Pin|JOY_RIGHT_Pin|JOY_UP_Pin
 80006e6:	232f      	movs	r3, #47	; 0x2f
 80006e8:	61fb      	str	r3, [r7, #28]
                          |JOY_DOWN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ea:	2300      	movs	r3, #0
 80006ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006ee:	2302      	movs	r3, #2
 80006f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f2:	f107 031c 	add.w	r3, r7, #28
 80006f6:	4619      	mov	r1, r3
 80006f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006fc:	f001 fec8 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 8000700:	2310      	movs	r3, #16
 8000702:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000704:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000708:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070a:	2300      	movs	r3, #0
 800070c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 800070e:	f107 031c 	add.w	r3, r7, #28
 8000712:	4619      	mov	r1, r3
 8000714:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000718:	f001 feba 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_R_Pin;
 800071c:	2304      	movs	r3, #4
 800071e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000720:	2301      	movs	r3, #1
 8000722:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000724:	2301      	movs	r3, #1
 8000726:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000728:	2303      	movs	r3, #3
 800072a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 800072c:	f107 031c 	add.w	r3, r7, #28
 8000730:	4619      	mov	r1, r3
 8000732:	484f      	ldr	r0, [pc, #316]	; (8000870 <MX_GPIO_Init+0x2b8>)
 8000734:	f001 feac 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_G_Pin;
 8000738:	f44f 7380 	mov.w	r3, #256	; 0x100
 800073c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073e:	2301      	movs	r3, #1
 8000740:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000742:	2301      	movs	r3, #1
 8000744:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000746:	2303      	movs	r3, #3
 8000748:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_G_GPIO_Port, &GPIO_InitStruct);
 800074a:	f107 031c 	add.w	r3, r7, #28
 800074e:	4619      	mov	r1, r3
 8000750:	4846      	ldr	r0, [pc, #280]	; (800086c <MX_GPIO_Init+0x2b4>)
 8000752:	f001 fe9d 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = MFX_I2C_SLC_Pin|MFX_I2C_SDA_Pin;
 8000756:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800075a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800075c:	2312      	movs	r3, #18
 800075e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000760:	2301      	movs	r3, #1
 8000762:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000764:	2303      	movs	r3, #3
 8000766:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000768:	2304      	movs	r3, #4
 800076a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800076c:	f107 031c 	add.w	r3, r7, #28
 8000770:	4619      	mov	r1, r3
 8000772:	483f      	ldr	r0, [pc, #252]	; (8000870 <MX_GPIO_Init+0x2b8>)
 8000774:	f001 fe8c 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|OTG_FS_VBUS_Pin;
 8000778:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800077c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077e:	2301      	movs	r3, #1
 8000780:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000786:	2300      	movs	r3, #0
 8000788:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800078a:	f107 031c 	add.w	r3, r7, #28
 800078e:	4619      	mov	r1, r3
 8000790:	4838      	ldr	r0, [pc, #224]	; (8000874 <MX_GPIO_Init+0x2bc>)
 8000792:	f001 fe7d 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000796:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800079a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079c:	2302      	movs	r3, #2
 800079e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a4:	2303      	movs	r3, #3
 80007a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80007a8:	230a      	movs	r3, #10
 80007aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ac:	f107 031c 	add.w	r3, r7, #28
 80007b0:	4619      	mov	r1, r3
 80007b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007b6:	f001 fe6b 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = EXT_RST_Pin|GYRO_INT1_Pin;
 80007ba:	2305      	movs	r3, #5
 80007bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80007be:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80007c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007c8:	f107 031c 	add.w	r3, r7, #28
 80007cc:	4619      	mov	r1, r3
 80007ce:	482a      	ldr	r0, [pc, #168]	; (8000878 <MX_GPIO_Init+0x2c0>)
 80007d0:	f001 fe5e 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin;
 80007d4:	2380      	movs	r3, #128	; 0x80
 80007d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d8:	2301      	movs	r3, #1
 80007da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e0:	2303      	movs	r3, #3
 80007e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GYRO_CS_GPIO_Port, &GPIO_InitStruct);
 80007e4:	f107 031c 	add.w	r3, r7, #28
 80007e8:	4619      	mov	r1, r3
 80007ea:	4823      	ldr	r0, [pc, #140]	; (8000878 <MX_GPIO_Init+0x2c0>)
 80007ec:	f001 fe50 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M3V3_REG_ON_Pin;
 80007f0:	2308      	movs	r3, #8
 80007f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f4:	2301      	movs	r3, #1
 80007f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fc:	2300      	movs	r3, #0
 80007fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(M3V3_REG_ON_GPIO_Port, &GPIO_InitStruct);
 8000800:	f107 031c 	add.w	r3, r7, #28
 8000804:	4619      	mov	r1, r3
 8000806:	481a      	ldr	r0, [pc, #104]	; (8000870 <MX_GPIO_Init+0x2b8>)
 8000808:	f001 fe42 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_INT2_Pin;
 800080c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000810:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000812:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000816:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GYRO_INT2_GPIO_Port, &GPIO_InitStruct);
 800081c:	f107 031c 	add.w	r3, r7, #28
 8000820:	4619      	mov	r1, r3
 8000822:	4813      	ldr	r0, [pc, #76]	; (8000870 <MX_GPIO_Init+0x2b8>)
 8000824:	f001 fe34 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XL_CS_Pin;
 8000828:	2301      	movs	r3, #1
 800082a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082c:	2301      	movs	r3, #1
 800082e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000834:	2300      	movs	r3, #0
 8000836:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(XL_CS_GPIO_Port, &GPIO_InitStruct);
 8000838:	f107 031c 	add.w	r3, r7, #28
 800083c:	4619      	mov	r1, r3
 800083e:	480b      	ldr	r0, [pc, #44]	; (800086c <MX_GPIO_Init+0x2b4>)
 8000840:	f001 fe26 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XL_INT_Pin;
 8000844:	2302      	movs	r3, #2
 8000846:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000848:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800084c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(XL_INT_GPIO_Port, &GPIO_InitStruct);
 8000852:	f107 031c 	add.w	r3, r7, #28
 8000856:	4619      	mov	r1, r3
 8000858:	4804      	ldr	r0, [pc, #16]	; (800086c <MX_GPIO_Init+0x2b4>)
 800085a:	f001 fe19 	bl	8002490 <HAL_GPIO_Init>

}
 800085e:	bf00      	nop
 8000860:	3730      	adds	r7, #48	; 0x30
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40021000 	.word	0x40021000
 800086c:	48001000 	.word	0x48001000
 8000870:	48000400 	.word	0x48000400
 8000874:	48000800 	.word	0x48000800
 8000878:	48000c00 	.word	0x48000c00

0800087c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000880:	4b1b      	ldr	r3, [pc, #108]	; (80008f0 <MX_I2C1_Init+0x74>)
 8000882:	4a1c      	ldr	r2, [pc, #112]	; (80008f4 <MX_I2C1_Init+0x78>)
 8000884:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00404C74;
 8000886:	4b1a      	ldr	r3, [pc, #104]	; (80008f0 <MX_I2C1_Init+0x74>)
 8000888:	4a1b      	ldr	r2, [pc, #108]	; (80008f8 <MX_I2C1_Init+0x7c>)
 800088a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800088c:	4b18      	ldr	r3, [pc, #96]	; (80008f0 <MX_I2C1_Init+0x74>)
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000892:	4b17      	ldr	r3, [pc, #92]	; (80008f0 <MX_I2C1_Init+0x74>)
 8000894:	2201      	movs	r2, #1
 8000896:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000898:	4b15      	ldr	r3, [pc, #84]	; (80008f0 <MX_I2C1_Init+0x74>)
 800089a:	2200      	movs	r2, #0
 800089c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800089e:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <MX_I2C1_Init+0x74>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008a4:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <MX_I2C1_Init+0x74>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008aa:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <MX_I2C1_Init+0x74>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008b0:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <MX_I2C1_Init+0x74>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008b6:	480e      	ldr	r0, [pc, #56]	; (80008f0 <MX_I2C1_Init+0x74>)
 80008b8:	f001 ffac 	bl	8002814 <HAL_I2C_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008c2:	f000 fa5f 	bl	8000d84 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008c6:	2100      	movs	r1, #0
 80008c8:	4809      	ldr	r0, [pc, #36]	; (80008f0 <MX_I2C1_Init+0x74>)
 80008ca:	f002 f83e 	bl	800294a <HAL_I2CEx_ConfigAnalogFilter>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008d4:	f000 fa56 	bl	8000d84 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008d8:	2100      	movs	r1, #0
 80008da:	4805      	ldr	r0, [pc, #20]	; (80008f0 <MX_I2C1_Init+0x74>)
 80008dc:	f002 f880 	bl	80029e0 <HAL_I2CEx_ConfigDigitalFilter>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008e6:	f000 fa4d 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	200000b8 	.word	0x200000b8
 80008f4:	40005400 	.word	0x40005400
 80008f8:	00404c74 	.word	0x00404c74

080008fc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b0ac      	sub	sp, #176	; 0xb0
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000904:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
 8000912:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000914:	f107 0314 	add.w	r3, r7, #20
 8000918:	2288      	movs	r2, #136	; 0x88
 800091a:	2100      	movs	r1, #0
 800091c:	4618      	mov	r0, r3
 800091e:	f005 fd02 	bl	8006326 <memset>
  if(i2cHandle->Instance==I2C1)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4a21      	ldr	r2, [pc, #132]	; (80009ac <HAL_I2C_MspInit+0xb0>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d13a      	bne.n	80009a2 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800092c:	2340      	movs	r3, #64	; 0x40
 800092e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000930:	2300      	movs	r3, #0
 8000932:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	4618      	mov	r0, r3
 800093a:	f003 f8af 	bl	8003a9c <HAL_RCCEx_PeriphCLKConfig>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000944:	f000 fa1e 	bl	8000d84 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000948:	4b19      	ldr	r3, [pc, #100]	; (80009b0 <HAL_I2C_MspInit+0xb4>)
 800094a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094c:	4a18      	ldr	r2, [pc, #96]	; (80009b0 <HAL_I2C_MspInit+0xb4>)
 800094e:	f043 0302 	orr.w	r3, r3, #2
 8000952:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000954:	4b16      	ldr	r3, [pc, #88]	; (80009b0 <HAL_I2C_MspInit+0xb4>)
 8000956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000958:	f003 0302 	and.w	r3, r3, #2
 800095c:	613b      	str	r3, [r7, #16]
 800095e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000960:	23c0      	movs	r3, #192	; 0xc0
 8000962:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000966:	2312      	movs	r3, #18
 8000968:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800096c:	2301      	movs	r3, #1
 800096e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000972:	2303      	movs	r3, #3
 8000974:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000978:	2304      	movs	r3, #4
 800097a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800097e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000982:	4619      	mov	r1, r3
 8000984:	480b      	ldr	r0, [pc, #44]	; (80009b4 <HAL_I2C_MspInit+0xb8>)
 8000986:	f001 fd83 	bl	8002490 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <HAL_I2C_MspInit+0xb4>)
 800098c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800098e:	4a08      	ldr	r2, [pc, #32]	; (80009b0 <HAL_I2C_MspInit+0xb4>)
 8000990:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000994:	6593      	str	r3, [r2, #88]	; 0x58
 8000996:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <HAL_I2C_MspInit+0xb4>)
 8000998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800099a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80009a2:	bf00      	nop
 80009a4:	37b0      	adds	r7, #176	; 0xb0
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40005400 	.word	0x40005400
 80009b0:	40021000 	.word	0x40021000
 80009b4:	48000400 	.word	0x48000400

080009b8 <MX_LCD_Init>:

LCD_HandleTypeDef hlcd;

/* LCD init function */
void MX_LCD_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END LCD_Init 0 */

  /* USER CODE BEGIN LCD_Init 1 */

  /* USER CODE END LCD_Init 1 */
  hlcd.Instance = LCD;
 80009bc:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <MX_LCD_Init+0x68>)
 80009be:	4a19      	ldr	r2, [pc, #100]	; (8000a24 <MX_LCD_Init+0x6c>)
 80009c0:	601a      	str	r2, [r3, #0]
  hlcd.Init.Prescaler = LCD_PRESCALER_1;
 80009c2:	4b17      	ldr	r3, [pc, #92]	; (8000a20 <MX_LCD_Init+0x68>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	605a      	str	r2, [r3, #4]
  hlcd.Init.Divider = LCD_DIVIDER_16;
 80009c8:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <MX_LCD_Init+0x68>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]
  hlcd.Init.Duty = LCD_DUTY_1_4;
 80009ce:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <MX_LCD_Init+0x68>)
 80009d0:	220c      	movs	r2, #12
 80009d2:	60da      	str	r2, [r3, #12]
  hlcd.Init.Bias = LCD_BIAS_1_4;
 80009d4:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <MX_LCD_Init+0x68>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	611a      	str	r2, [r3, #16]
  hlcd.Init.VoltageSource = LCD_VOLTAGESOURCE_INTERNAL;
 80009da:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <MX_LCD_Init+0x68>)
 80009dc:	2200      	movs	r2, #0
 80009de:	615a      	str	r2, [r3, #20]
  hlcd.Init.Contrast = LCD_CONTRASTLEVEL_0;
 80009e0:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <MX_LCD_Init+0x68>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	619a      	str	r2, [r3, #24]
  hlcd.Init.DeadTime = LCD_DEADTIME_0;
 80009e6:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <MX_LCD_Init+0x68>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	61da      	str	r2, [r3, #28]
  hlcd.Init.PulseOnDuration = LCD_PULSEONDURATION_0;
 80009ec:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <MX_LCD_Init+0x68>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	621a      	str	r2, [r3, #32]
  hlcd.Init.MuxSegment = LCD_MUXSEGMENT_DISABLE;
 80009f2:	4b0b      	ldr	r3, [pc, #44]	; (8000a20 <MX_LCD_Init+0x68>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	631a      	str	r2, [r3, #48]	; 0x30
  hlcd.Init.BlinkMode = LCD_BLINKMODE_OFF;
 80009f8:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <MX_LCD_Init+0x68>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	629a      	str	r2, [r3, #40]	; 0x28
  hlcd.Init.BlinkFrequency = LCD_BLINKFREQUENCY_DIV8;
 80009fe:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <MX_LCD_Init+0x68>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	62da      	str	r2, [r3, #44]	; 0x2c
  hlcd.Init.HighDrive = LCD_HIGHDRIVE_DISABLE;
 8000a04:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <MX_LCD_Init+0x68>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_LCD_Init(&hlcd) != HAL_OK)
 8000a0a:	4805      	ldr	r0, [pc, #20]	; (8000a20 <MX_LCD_Init+0x68>)
 8000a0c:	f002 f834 	bl	8002a78 <HAL_LCD_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_LCD_Init+0x62>
  {
    Error_Handler();
 8000a16:	f000 f9b5 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN LCD_Init 2 */

  /* USER CODE END LCD_Init 2 */

}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	2000010c 	.word	0x2000010c
 8000a24:	40002400 	.word	0x40002400

08000a28 <HAL_LCD_MspInit>:

void HAL_LCD_MspInit(LCD_HandleTypeDef* lcdHandle)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b0ae      	sub	sp, #184	; 0xb8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a30:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]
 8000a3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a40:	f107 031c 	add.w	r3, r7, #28
 8000a44:	2288      	movs	r2, #136	; 0x88
 8000a46:	2100      	movs	r1, #0
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f005 fc6c 	bl	8006326 <memset>
  if(lcdHandle->Instance==LCD)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a57      	ldr	r2, [pc, #348]	; (8000bb0 <HAL_LCD_MspInit+0x188>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	f040 80a6 	bne.w	8000ba6 <HAL_LCD_MspInit+0x17e>

  /* USER CODE END LCD_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000a5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a5e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000a60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a64:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a68:	f107 031c 	add.w	r3, r7, #28
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f003 f815 	bl	8003a9c <HAL_RCCEx_PeriphCLKConfig>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <HAL_LCD_MspInit+0x54>
    {
      Error_Handler();
 8000a78:	f000 f984 	bl	8000d84 <Error_Handler>
    }

    /* LCD clock enable */
    __HAL_RCC_LCD_CLK_ENABLE();
 8000a7c:	4b4d      	ldr	r3, [pc, #308]	; (8000bb4 <HAL_LCD_MspInit+0x18c>)
 8000a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a80:	4a4c      	ldr	r2, [pc, #304]	; (8000bb4 <HAL_LCD_MspInit+0x18c>)
 8000a82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a86:	6593      	str	r3, [r2, #88]	; 0x58
 8000a88:	4b4a      	ldr	r3, [pc, #296]	; (8000bb4 <HAL_LCD_MspInit+0x18c>)
 8000a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a90:	61bb      	str	r3, [r7, #24]
 8000a92:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a94:	4b47      	ldr	r3, [pc, #284]	; (8000bb4 <HAL_LCD_MspInit+0x18c>)
 8000a96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a98:	4a46      	ldr	r2, [pc, #280]	; (8000bb4 <HAL_LCD_MspInit+0x18c>)
 8000a9a:	f043 0304 	orr.w	r3, r3, #4
 8000a9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aa0:	4b44      	ldr	r3, [pc, #272]	; (8000bb4 <HAL_LCD_MspInit+0x18c>)
 8000aa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa4:	f003 0304 	and.w	r3, r3, #4
 8000aa8:	617b      	str	r3, [r7, #20]
 8000aaa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aac:	4b41      	ldr	r3, [pc, #260]	; (8000bb4 <HAL_LCD_MspInit+0x18c>)
 8000aae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab0:	4a40      	ldr	r2, [pc, #256]	; (8000bb4 <HAL_LCD_MspInit+0x18c>)
 8000ab2:	f043 0301 	orr.w	r3, r3, #1
 8000ab6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ab8:	4b3e      	ldr	r3, [pc, #248]	; (8000bb4 <HAL_LCD_MspInit+0x18c>)
 8000aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000abc:	f003 0301 	and.w	r3, r3, #1
 8000ac0:	613b      	str	r3, [r7, #16]
 8000ac2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac4:	4b3b      	ldr	r3, [pc, #236]	; (8000bb4 <HAL_LCD_MspInit+0x18c>)
 8000ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac8:	4a3a      	ldr	r2, [pc, #232]	; (8000bb4 <HAL_LCD_MspInit+0x18c>)
 8000aca:	f043 0302 	orr.w	r3, r3, #2
 8000ace:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ad0:	4b38      	ldr	r3, [pc, #224]	; (8000bb4 <HAL_LCD_MspInit+0x18c>)
 8000ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad4:	f003 0302 	and.w	r3, r3, #2
 8000ad8:	60fb      	str	r3, [r7, #12]
 8000ada:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000adc:	4b35      	ldr	r3, [pc, #212]	; (8000bb4 <HAL_LCD_MspInit+0x18c>)
 8000ade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae0:	4a34      	ldr	r2, [pc, #208]	; (8000bb4 <HAL_LCD_MspInit+0x18c>)
 8000ae2:	f043 0308 	orr.w	r3, r3, #8
 8000ae6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ae8:	4b32      	ldr	r3, [pc, #200]	; (8000bb4 <HAL_LCD_MspInit+0x18c>)
 8000aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aec:	f003 0308 	and.w	r3, r3, #8
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	68bb      	ldr	r3, [r7, #8]
    PA15 (JTDI)     ------> LCD_SEG17
    PB4 (NJTRST)     ------> LCD_SEG8
    PB5     ------> LCD_SEG9
    PB9     ------> LCD_COM3
    */
    GPIO_InitStruct.Pin = VLCD_Pin|SEG22_Pin|SEG1_Pin|SEG14_Pin
 8000af4:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8000af8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |SEG9_Pin|SEG13_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afc:	2302      	movs	r3, #2
 8000afe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000b0e:	230b      	movs	r3, #11
 8000b10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b14:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4827      	ldr	r0, [pc, #156]	; (8000bb8 <HAL_LCD_MspInit+0x190>)
 8000b1c:	f001 fcb8 	bl	8002490 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG23_Pin|SEG0_Pin|COM0_Pin|COM1_Pin
 8000b20:	f248 73c0 	movw	r3, #34752	; 0x87c0
 8000b24:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |COM2_Pin|SEG10_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b34:	2300      	movs	r3, #0
 8000b36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000b3a:	230b      	movs	r3, #11
 8000b3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b40:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b44:	4619      	mov	r1, r3
 8000b46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b4a:	f001 fca1 	bl	8002490 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG21_Pin|SEG2_Pin|SEG20_Pin|SEG3_Pin
 8000b4e:	f24f 2333 	movw	r3, #62003	; 0xf233
 8000b52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |SEG19_Pin|SEG4_Pin|SEG11_Pin|SEG12_Pin
                          |COM3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b56:	2302      	movs	r3, #2
 8000b58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b62:	2300      	movs	r3, #0
 8000b64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000b68:	230b      	movs	r3, #11
 8000b6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b6e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b72:	4619      	mov	r1, r3
 8000b74:	4811      	ldr	r0, [pc, #68]	; (8000bbc <HAL_LCD_MspInit+0x194>)
 8000b76:	f001 fc8b 	bl	8002490 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG18_Pin|SEG5_Pin|SEG17_Pin|SEG6_Pin
 8000b7a:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000b7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |SEG16_Pin|SEG7_Pin|SEG15_Pin|SEG8_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b82:	2302      	movs	r3, #2
 8000b84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000b94:	230b      	movs	r3, #11
 8000b96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b9a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4807      	ldr	r0, [pc, #28]	; (8000bc0 <HAL_LCD_MspInit+0x198>)
 8000ba2:	f001 fc75 	bl	8002490 <HAL_GPIO_Init>

  /* USER CODE BEGIN LCD_MspInit 1 */

  /* USER CODE END LCD_MspInit 1 */
  }
}
 8000ba6:	bf00      	nop
 8000ba8:	37b8      	adds	r7, #184	; 0xb8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40002400 	.word	0x40002400
 8000bb4:	40021000 	.word	0x40021000
 8000bb8:	48000800 	.word	0x48000800
 8000bbc:	48000400 	.word	0x48000400
 8000bc0:	48000c00 	.word	0x48000c00

08000bc4 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr ,int len) {
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2 ,ptr ,len ,50);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	b29a      	uxth	r2, r3
 8000bd4:	2332      	movs	r3, #50	; 0x32
 8000bd6:	68b9      	ldr	r1, [r7, #8]
 8000bd8:	4803      	ldr	r0, [pc, #12]	; (8000be8 <_write+0x24>)
 8000bda:	f004 fd34 	bl	8005646 <HAL_UART_Transmit>
	return len;
 8000bde:	687b      	ldr	r3, [r7, #4]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3710      	adds	r7, #16
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	2000030c 	.word	0x2000030c

08000bec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bf0:	f001 f934 	bl	8001e5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bf4:	f000 f838 	bl	8000c68 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000bf8:	f000 f89a 	bl	8000d30 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bfc:	f7ff fcdc 	bl	80005b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c00:	f7ff fcb4 	bl	800056c <MX_DMA_Init>
  MX_I2C1_Init();
 8000c04:	f7ff fe3a 	bl	800087c <MX_I2C1_Init>
  MX_LCD_Init();
 8000c08:	f7ff fed6 	bl	80009b8 <MX_LCD_Init>
  MX_QUADSPI_Init();
 8000c0c:	f000 f8c0 	bl	8000d90 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 8000c10:	f000 f928 	bl	8000e64 <MX_SAI1_Init>
  MX_SPI2_Init();
 8000c14:	f000 fa46 	bl	80010a4 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8000c18:	f000 fbc2 	bl	80013a0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  BSP_GYRO_Init();
 8000c1c:	f001 f8a0 	bl	8001d60 <BSP_GYRO_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 BSP_GYRO_GetXYZ(data);
 8000c20:	480f      	ldr	r0, [pc, #60]	; (8000c60 <main+0x74>)
 8000c22:	f001 f907 	bl	8001e34 <BSP_GYRO_GetXYZ>
	 printf("X: %d		Y: %d		Z: %d\r\n", (int)data[0], (int)data[1], (int)data[2]);
 8000c26:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <main+0x74>)
 8000c28:	edd3 7a00 	vldr	s15, [r3]
 8000c2c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8000c30:	4b0b      	ldr	r3, [pc, #44]	; (8000c60 <main+0x74>)
 8000c32:	edd3 7a01 	vldr	s15, [r3, #4]
 8000c36:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8000c3a:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <main+0x74>)
 8000c3c:	edd3 7a02 	vldr	s15, [r3, #8]
 8000c40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c44:	ee17 3a90 	vmov	r3, s15
 8000c48:	ee16 2a90 	vmov	r2, s13
 8000c4c:	ee17 1a10 	vmov	r1, s14
 8000c50:	4804      	ldr	r0, [pc, #16]	; (8000c64 <main+0x78>)
 8000c52:	f005 fb13 	bl	800627c <iprintf>
	 HAL_Delay(500);
 8000c56:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c5a:	f001 f97b 	bl	8001f54 <HAL_Delay>
	 BSP_GYRO_GetXYZ(data);
 8000c5e:	e7df      	b.n	8000c20 <main+0x34>
 8000c60:	20000148 	.word	0x20000148
 8000c64:	08006f80 	.word	0x08006f80

08000c68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b096      	sub	sp, #88	; 0x58
 8000c6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c6e:	f107 0314 	add.w	r3, r7, #20
 8000c72:	2244      	movs	r2, #68	; 0x44
 8000c74:	2100      	movs	r1, #0
 8000c76:	4618      	mov	r0, r3
 8000c78:	f005 fb55 	bl	8006326 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c7c:	463b      	mov	r3, r7
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	609a      	str	r2, [r3, #8]
 8000c86:	60da      	str	r2, [r3, #12]
 8000c88:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c8a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c8e:	f001 fff3 	bl	8002c78 <HAL_PWREx_ControlVoltageScaling>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000c98:	f000 f874 	bl	8000d84 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000c9c:	f001 ffce 	bl	8002c3c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000ca0:	4b22      	ldr	r3, [pc, #136]	; (8000d2c <SystemClock_Config+0xc4>)
 8000ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ca6:	4a21      	ldr	r2, [pc, #132]	; (8000d2c <SystemClock_Config+0xc4>)
 8000ca8:	f023 0318 	bic.w	r3, r3, #24
 8000cac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8000cb0:	231c      	movs	r3, #28
 8000cb2:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000cc4:	2360      	movs	r3, #96	; 0x60
 8000cc6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000cd4:	2314      	movs	r3, #20
 8000cd6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000cd8:	2307      	movs	r3, #7
 8000cda:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f002 f8d7 	bl	8002e9c <HAL_RCC_OscConfig>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000cf4:	f000 f846 	bl	8000d84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cf8:	230f      	movs	r3, #15
 8000cfa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000d00:	2380      	movs	r3, #128	; 0x80
 8000d02:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d04:	2300      	movs	r3, #0
 8000d06:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d0c:	463b      	mov	r3, r7
 8000d0e:	2101      	movs	r1, #1
 8000d10:	4618      	mov	r0, r3
 8000d12:	f002 fc9f 	bl	8003654 <HAL_RCC_ClockConfig>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000d1c:	f000 f832 	bl	8000d84 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000d20:	f003 ff14 	bl	8004b4c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000d24:	bf00      	nop
 8000d26:	3758      	adds	r7, #88	; 0x58
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40021000 	.word	0x40021000

08000d30 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b0a2      	sub	sp, #136	; 0x88
 8000d34:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d36:	463b      	mov	r3, r7
 8000d38:	2288      	movs	r2, #136	; 0x88
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f005 faf2 	bl	8006326 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8000d42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d46:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000d50:	2301      	movs	r3, #1
 8000d52:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000d54:	2318      	movs	r3, #24
 8000d56:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000d58:	2307      	movs	r3, #7
 8000d5a:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000d60:	2302      	movs	r3, #2
 8000d62:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 8000d64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d68:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d6a:	463b      	mov	r3, r7
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f002 fe95 	bl	8003a9c <HAL_RCCEx_PeriphCLKConfig>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <PeriphCommonClock_Config+0x4c>
  {
    Error_Handler();
 8000d78:	f000 f804 	bl	8000d84 <Error_Handler>
  }
}
 8000d7c:	bf00      	nop
 8000d7e:	3788      	adds	r7, #136	; 0x88
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d88:	b672      	cpsid	i
}
 8000d8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <Error_Handler+0x8>
	...

08000d90 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8000d94:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <MX_QUADSPI_Init+0x44>)
 8000d96:	4a10      	ldr	r2, [pc, #64]	; (8000dd8 <MX_QUADSPI_Init+0x48>)
 8000d98:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000d9a:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <MX_QUADSPI_Init+0x44>)
 8000d9c:	22ff      	movs	r2, #255	; 0xff
 8000d9e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000da0:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <MX_QUADSPI_Init+0x44>)
 8000da2:	2201      	movs	r2, #1
 8000da4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000da6:	4b0b      	ldr	r3, [pc, #44]	; (8000dd4 <MX_QUADSPI_Init+0x44>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000dac:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <MX_QUADSPI_Init+0x44>)
 8000dae:	2201      	movs	r2, #1
 8000db0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000db2:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <MX_QUADSPI_Init+0x44>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000db8:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <MX_QUADSPI_Init+0x44>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000dbe:	4805      	ldr	r0, [pc, #20]	; (8000dd4 <MX_QUADSPI_Init+0x44>)
 8000dc0:	f001 ffb0 	bl	8002d24 <HAL_QSPI_Init>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000dca:	f7ff ffdb 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000154 	.word	0x20000154
 8000dd8:	a0001000 	.word	0xa0001000

08000ddc <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08a      	sub	sp, #40	; 0x28
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de4:	f107 0314 	add.w	r3, r7, #20
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a17      	ldr	r2, [pc, #92]	; (8000e58 <HAL_QSPI_MspInit+0x7c>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d128      	bne.n	8000e50 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000dfe:	4b17      	ldr	r3, [pc, #92]	; (8000e5c <HAL_QSPI_MspInit+0x80>)
 8000e00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e02:	4a16      	ldr	r2, [pc, #88]	; (8000e5c <HAL_QSPI_MspInit+0x80>)
 8000e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e08:	6513      	str	r3, [r2, #80]	; 0x50
 8000e0a:	4b14      	ldr	r3, [pc, #80]	; (8000e5c <HAL_QSPI_MspInit+0x80>)
 8000e0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e12:	613b      	str	r3, [r7, #16]
 8000e14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e16:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <HAL_QSPI_MspInit+0x80>)
 8000e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1a:	4a10      	ldr	r2, [pc, #64]	; (8000e5c <HAL_QSPI_MspInit+0x80>)
 8000e1c:	f043 0310 	orr.w	r3, r3, #16
 8000e20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e22:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <HAL_QSPI_MspInit+0x80>)
 8000e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e26:	f003 0310 	and.w	r3, r3, #16
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QSPI_CLK_Pin|QSPI_CS_Pin|QSPI_D0_Pin|QSPI_D1_Pin
 8000e2e:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000e32:	617b      	str	r3, [r7, #20]
                          |QSPI_D2_Pin|QSPI_D3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e34:	2302      	movs	r3, #2
 8000e36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000e40:	230a      	movs	r3, #10
 8000e42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4805      	ldr	r0, [pc, #20]	; (8000e60 <HAL_QSPI_MspInit+0x84>)
 8000e4c:	f001 fb20 	bl	8002490 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8000e50:	bf00      	nop
 8000e52:	3728      	adds	r7, #40	; 0x28
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	a0001000 	.word	0xa0001000
 8000e5c:	40021000 	.word	0x40021000
 8000e60:	48001000 	.word	0x48001000

08000e64 <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
SAI_HandleTypeDef hsai_BlockB1;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8000e68:	4b4d      	ldr	r3, [pc, #308]	; (8000fa0 <MX_SAI1_Init+0x13c>)
 8000e6a:	4a4e      	ldr	r2, [pc, #312]	; (8000fa4 <MX_SAI1_Init+0x140>)
 8000e6c:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000e6e:	4b4c      	ldr	r3, [pc, #304]	; (8000fa0 <MX_SAI1_Init+0x13c>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000e74:	4b4a      	ldr	r3, [pc, #296]	; (8000fa0 <MX_SAI1_Init+0x13c>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8000e7a:	4b49      	ldr	r3, [pc, #292]	; (8000fa0 <MX_SAI1_Init+0x13c>)
 8000e7c:	2240      	movs	r2, #64	; 0x40
 8000e7e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000e80:	4b47      	ldr	r3, [pc, #284]	; (8000fa0 <MX_SAI1_Init+0x13c>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000e86:	4b46      	ldr	r3, [pc, #280]	; (8000fa0 <MX_SAI1_Init+0x13c>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000e8c:	4b44      	ldr	r3, [pc, #272]	; (8000fa0 <MX_SAI1_Init+0x13c>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000e92:	4b43      	ldr	r3, [pc, #268]	; (8000fa0 <MX_SAI1_Init+0x13c>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000e98:	4b41      	ldr	r3, [pc, #260]	; (8000fa0 <MX_SAI1_Init+0x13c>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000e9e:	4b40      	ldr	r3, [pc, #256]	; (8000fa0 <MX_SAI1_Init+0x13c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000ea4:	4b3e      	ldr	r3, [pc, #248]	; (8000fa0 <MX_SAI1_Init+0x13c>)
 8000ea6:	4a40      	ldr	r2, [pc, #256]	; (8000fa8 <MX_SAI1_Init+0x144>)
 8000ea8:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000eaa:	4b3d      	ldr	r3, [pc, #244]	; (8000fa0 <MX_SAI1_Init+0x13c>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000eb0:	4b3b      	ldr	r3, [pc, #236]	; (8000fa0 <MX_SAI1_Init+0x13c>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000eb6:	4b3a      	ldr	r3, [pc, #232]	; (8000fa0 <MX_SAI1_Init+0x13c>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000ebc:	4b38      	ldr	r3, [pc, #224]	; (8000fa0 <MX_SAI1_Init+0x13c>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8000ec2:	4b37      	ldr	r3, [pc, #220]	; (8000fa0 <MX_SAI1_Init+0x13c>)
 8000ec4:	2208      	movs	r2, #8
 8000ec6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8000ec8:	4b35      	ldr	r3, [pc, #212]	; (8000fa0 <MX_SAI1_Init+0x13c>)
 8000eca:	2201      	movs	r2, #1
 8000ecc:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000ece:	4b34      	ldr	r3, [pc, #208]	; (8000fa0 <MX_SAI1_Init+0x13c>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000ed4:	4b32      	ldr	r3, [pc, #200]	; (8000fa0 <MX_SAI1_Init+0x13c>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000eda:	4b31      	ldr	r3, [pc, #196]	; (8000fa0 <MX_SAI1_Init+0x13c>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000ee0:	4b2f      	ldr	r3, [pc, #188]	; (8000fa0 <MX_SAI1_Init+0x13c>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000ee6:	4b2e      	ldr	r3, [pc, #184]	; (8000fa0 <MX_SAI1_Init+0x13c>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8000eec:	4b2c      	ldr	r3, [pc, #176]	; (8000fa0 <MX_SAI1_Init+0x13c>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8000ef2:	4b2b      	ldr	r3, [pc, #172]	; (8000fa0 <MX_SAI1_Init+0x13c>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000ef8:	4829      	ldr	r0, [pc, #164]	; (8000fa0 <MX_SAI1_Init+0x13c>)
 8000efa:	f004 f8f9 	bl	80050f0 <HAL_SAI_Init>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 8000f04:	f7ff ff3e 	bl	8000d84 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8000f08:	4b28      	ldr	r3, [pc, #160]	; (8000fac <MX_SAI1_Init+0x148>)
 8000f0a:	4a29      	ldr	r2, [pc, #164]	; (8000fb0 <MX_SAI1_Init+0x14c>)
 8000f0c:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000f0e:	4b27      	ldr	r3, [pc, #156]	; (8000fac <MX_SAI1_Init+0x148>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8000f14:	4b25      	ldr	r3, [pc, #148]	; (8000fac <MX_SAI1_Init+0x148>)
 8000f16:	2203      	movs	r2, #3
 8000f18:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8000f1a:	4b24      	ldr	r3, [pc, #144]	; (8000fac <MX_SAI1_Init+0x148>)
 8000f1c:	2240      	movs	r2, #64	; 0x40
 8000f1e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000f20:	4b22      	ldr	r3, [pc, #136]	; (8000fac <MX_SAI1_Init+0x148>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000f26:	4b21      	ldr	r3, [pc, #132]	; (8000fac <MX_SAI1_Init+0x148>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8000f2c:	4b1f      	ldr	r3, [pc, #124]	; (8000fac <MX_SAI1_Init+0x148>)
 8000f2e:	2201      	movs	r2, #1
 8000f30:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000f32:	4b1e      	ldr	r3, [pc, #120]	; (8000fac <MX_SAI1_Init+0x148>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000f38:	4b1c      	ldr	r3, [pc, #112]	; (8000fac <MX_SAI1_Init+0x148>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000f3e:	4b1b      	ldr	r3, [pc, #108]	; (8000fac <MX_SAI1_Init+0x148>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000f44:	4b19      	ldr	r3, [pc, #100]	; (8000fac <MX_SAI1_Init+0x148>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000f4a:	4b18      	ldr	r3, [pc, #96]	; (8000fac <MX_SAI1_Init+0x148>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000f50:	4b16      	ldr	r3, [pc, #88]	; (8000fac <MX_SAI1_Init+0x148>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 8000f56:	4b15      	ldr	r3, [pc, #84]	; (8000fac <MX_SAI1_Init+0x148>)
 8000f58:	2208      	movs	r2, #8
 8000f5a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8000f5c:	4b13      	ldr	r3, [pc, #76]	; (8000fac <MX_SAI1_Init+0x148>)
 8000f5e:	2201      	movs	r2, #1
 8000f60:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000f62:	4b12      	ldr	r3, [pc, #72]	; (8000fac <MX_SAI1_Init+0x148>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000f68:	4b10      	ldr	r3, [pc, #64]	; (8000fac <MX_SAI1_Init+0x148>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000f6e:	4b0f      	ldr	r3, [pc, #60]	; (8000fac <MX_SAI1_Init+0x148>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8000f74:	4b0d      	ldr	r3, [pc, #52]	; (8000fac <MX_SAI1_Init+0x148>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000f7a:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <MX_SAI1_Init+0x148>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8000f80:	4b0a      	ldr	r3, [pc, #40]	; (8000fac <MX_SAI1_Init+0x148>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8000f86:	4b09      	ldr	r3, [pc, #36]	; (8000fac <MX_SAI1_Init+0x148>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8000f8c:	4807      	ldr	r0, [pc, #28]	; (8000fac <MX_SAI1_Init+0x148>)
 8000f8e:	f004 f8af 	bl	80050f0 <HAL_SAI_Init>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_SAI1_Init+0x138>
  {
    Error_Handler();
 8000f98:	f7ff fef4 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20000198 	.word	0x20000198
 8000fa4:	40015404 	.word	0x40015404
 8000fa8:	0002ee00 	.word	0x0002ee00
 8000fac:	2000021c 	.word	0x2000021c
 8000fb0:	40015424 	.word	0x40015424

08000fb4 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08a      	sub	sp, #40	; 0x28
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a33      	ldr	r2, [pc, #204]	; (8001090 <HAL_SAI_MspInit+0xdc>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d135      	bne.n	8001032 <HAL_SAI_MspInit+0x7e>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 8000fc6:	4b33      	ldr	r3, [pc, #204]	; (8001094 <HAL_SAI_MspInit+0xe0>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d10b      	bne.n	8000fe6 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8000fce:	4b32      	ldr	r3, [pc, #200]	; (8001098 <HAL_SAI_MspInit+0xe4>)
 8000fd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fd2:	4a31      	ldr	r2, [pc, #196]	; (8001098 <HAL_SAI_MspInit+0xe4>)
 8000fd4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fd8:	6613      	str	r3, [r2, #96]	; 0x60
 8000fda:	4b2f      	ldr	r3, [pc, #188]	; (8001098 <HAL_SAI_MspInit+0xe4>)
 8000fdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fe2:	613b      	str	r3, [r7, #16]
 8000fe4:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8000fe6:	4b2b      	ldr	r3, [pc, #172]	; (8001094 <HAL_SAI_MspInit+0xe0>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	3301      	adds	r3, #1
 8000fec:	4a29      	ldr	r2, [pc, #164]	; (8001094 <HAL_SAI_MspInit+0xe0>)
 8000fee:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    PE9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = SAI1_MCK_Pin|SAI1_FS_Pin|SAI1_SCK_Pin|SAI1_SD_Pin;
 8000ff0:	2374      	movs	r3, #116	; 0x74
 8000ff2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001000:	230d      	movs	r3, #13
 8001002:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	4619      	mov	r1, r3
 800100a:	4824      	ldr	r0, [pc, #144]	; (800109c <HAL_SAI_MspInit+0xe8>)
 800100c:	f001 fa40 	bl	8002490 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AUDIO_CLK_Pin;
 8001010:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001014:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001016:	2302      	movs	r3, #2
 8001018:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101e:	2300      	movs	r3, #0
 8001020:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001022:	230d      	movs	r3, #13
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUDIO_CLK_GPIO_Port, &GPIO_InitStruct);
 8001026:	f107 0314 	add.w	r3, r7, #20
 800102a:	4619      	mov	r1, r3
 800102c:	481b      	ldr	r0, [pc, #108]	; (800109c <HAL_SAI_MspInit+0xe8>)
 800102e:	f001 fa2f 	bl	8002490 <HAL_GPIO_Init>

    }
    if(saiHandle->Instance==SAI1_Block_B)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a1a      	ldr	r2, [pc, #104]	; (80010a0 <HAL_SAI_MspInit+0xec>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d124      	bne.n	8001086 <HAL_SAI_MspInit+0xd2>
    {
      /* SAI1 clock enable */
      if (SAI1_client == 0)
 800103c:	4b15      	ldr	r3, [pc, #84]	; (8001094 <HAL_SAI_MspInit+0xe0>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d10b      	bne.n	800105c <HAL_SAI_MspInit+0xa8>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001044:	4b14      	ldr	r3, [pc, #80]	; (8001098 <HAL_SAI_MspInit+0xe4>)
 8001046:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001048:	4a13      	ldr	r2, [pc, #76]	; (8001098 <HAL_SAI_MspInit+0xe4>)
 800104a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800104e:	6613      	str	r3, [r2, #96]	; 0x60
 8001050:	4b11      	ldr	r3, [pc, #68]	; (8001098 <HAL_SAI_MspInit+0xe4>)
 8001052:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001054:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 800105c:	4b0d      	ldr	r3, [pc, #52]	; (8001094 <HAL_SAI_MspInit+0xe0>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	3301      	adds	r3, #1
 8001062:	4a0c      	ldr	r2, [pc, #48]	; (8001094 <HAL_SAI_MspInit+0xe0>)
 8001064:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE7     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = AUDIO_DIN_Pin;
 8001066:	2380      	movs	r3, #128	; 0x80
 8001068:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106a:	2302      	movs	r3, #2
 800106c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001072:	2303      	movs	r3, #3
 8001074:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001076:	230d      	movs	r3, #13
 8001078:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUDIO_DIN_GPIO_Port, &GPIO_InitStruct);
 800107a:	f107 0314 	add.w	r3, r7, #20
 800107e:	4619      	mov	r1, r3
 8001080:	4806      	ldr	r0, [pc, #24]	; (800109c <HAL_SAI_MspInit+0xe8>)
 8001082:	f001 fa05 	bl	8002490 <HAL_GPIO_Init>

    }
}
 8001086:	bf00      	nop
 8001088:	3728      	adds	r7, #40	; 0x28
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40015404 	.word	0x40015404
 8001094:	200002a0 	.word	0x200002a0
 8001098:	40021000 	.word	0x40021000
 800109c:	48001000 	.word	0x48001000
 80010a0:	40015424 	.word	0x40015424

080010a4 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80010a8:	4b1b      	ldr	r3, [pc, #108]	; (8001118 <MX_SPI2_Init+0x74>)
 80010aa:	4a1c      	ldr	r2, [pc, #112]	; (800111c <MX_SPI2_Init+0x78>)
 80010ac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80010ae:	4b1a      	ldr	r3, [pc, #104]	; (8001118 <MX_SPI2_Init+0x74>)
 80010b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010b4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80010b6:	4b18      	ldr	r3, [pc, #96]	; (8001118 <MX_SPI2_Init+0x74>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80010bc:	4b16      	ldr	r3, [pc, #88]	; (8001118 <MX_SPI2_Init+0x74>)
 80010be:	f44f 7240 	mov.w	r2, #768	; 0x300
 80010c2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010c4:	4b14      	ldr	r3, [pc, #80]	; (8001118 <MX_SPI2_Init+0x74>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010ca:	4b13      	ldr	r3, [pc, #76]	; (8001118 <MX_SPI2_Init+0x74>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80010d0:	4b11      	ldr	r3, [pc, #68]	; (8001118 <MX_SPI2_Init+0x74>)
 80010d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010d6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010d8:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <MX_SPI2_Init+0x74>)
 80010da:	2200      	movs	r2, #0
 80010dc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010de:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <MX_SPI2_Init+0x74>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80010e4:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <MX_SPI2_Init+0x74>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010ea:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <MX_SPI2_Init+0x74>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80010f0:	4b09      	ldr	r3, [pc, #36]	; (8001118 <MX_SPI2_Init+0x74>)
 80010f2:	2207      	movs	r2, #7
 80010f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80010f6:	4b08      	ldr	r3, [pc, #32]	; (8001118 <MX_SPI2_Init+0x74>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010fc:	4b06      	ldr	r3, [pc, #24]	; (8001118 <MX_SPI2_Init+0x74>)
 80010fe:	2208      	movs	r2, #8
 8001100:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001102:	4805      	ldr	r0, [pc, #20]	; (8001118 <MX_SPI2_Init+0x74>)
 8001104:	f004 f9a0 	bl	8005448 <HAL_SPI_Init>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800110e:	f7ff fe39 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	200002a4 	.word	0x200002a4
 800111c:	40003800 	.word	0x40003800

08001120 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08a      	sub	sp, #40	; 0x28
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001128:	f107 0314 	add.w	r3, r7, #20
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a17      	ldr	r2, [pc, #92]	; (800119c <HAL_SPI_MspInit+0x7c>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d127      	bne.n	8001192 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001142:	4b17      	ldr	r3, [pc, #92]	; (80011a0 <HAL_SPI_MspInit+0x80>)
 8001144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001146:	4a16      	ldr	r2, [pc, #88]	; (80011a0 <HAL_SPI_MspInit+0x80>)
 8001148:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800114c:	6593      	str	r3, [r2, #88]	; 0x58
 800114e:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <HAL_SPI_MspInit+0x80>)
 8001150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001152:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001156:	613b      	str	r3, [r7, #16]
 8001158:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800115a:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <HAL_SPI_MspInit+0x80>)
 800115c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115e:	4a10      	ldr	r2, [pc, #64]	; (80011a0 <HAL_SPI_MspInit+0x80>)
 8001160:	f043 0308 	orr.w	r3, r3, #8
 8001164:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001166:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <HAL_SPI_MspInit+0x80>)
 8001168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116a:	f003 0308 	and.w	r3, r3, #8
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PD1     ------> SPI2_SCK
    PD3     ------> SPI2_MISO
    PD4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = MEMS_SCK_Pin|MEMS_MISO_Pin|MEMS_MOSI_Pin;
 8001172:	231a      	movs	r3, #26
 8001174:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001176:	2302      	movs	r3, #2
 8001178:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117e:	2303      	movs	r3, #3
 8001180:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001182:	2305      	movs	r3, #5
 8001184:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001186:	f107 0314 	add.w	r3, r7, #20
 800118a:	4619      	mov	r1, r3
 800118c:	4805      	ldr	r0, [pc, #20]	; (80011a4 <HAL_SPI_MspInit+0x84>)
 800118e:	f001 f97f 	bl	8002490 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001192:	bf00      	nop
 8001194:	3728      	adds	r7, #40	; 0x28
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40003800 	.word	0x40003800
 80011a0:	40021000 	.word	0x40021000
 80011a4:	48000c00 	.word	0x48000c00

080011a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ae:	4b0f      	ldr	r3, [pc, #60]	; (80011ec <HAL_MspInit+0x44>)
 80011b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011b2:	4a0e      	ldr	r2, [pc, #56]	; (80011ec <HAL_MspInit+0x44>)
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	6613      	str	r3, [r2, #96]	; 0x60
 80011ba:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <HAL_MspInit+0x44>)
 80011bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	607b      	str	r3, [r7, #4]
 80011c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c6:	4b09      	ldr	r3, [pc, #36]	; (80011ec <HAL_MspInit+0x44>)
 80011c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ca:	4a08      	ldr	r2, [pc, #32]	; (80011ec <HAL_MspInit+0x44>)
 80011cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d0:	6593      	str	r3, [r2, #88]	; 0x58
 80011d2:	4b06      	ldr	r3, [pc, #24]	; (80011ec <HAL_MspInit+0x44>)
 80011d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011da:	603b      	str	r3, [r7, #0]
 80011dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011de:	bf00      	nop
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	40021000 	.word	0x40021000

080011f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011f4:	e7fe      	b.n	80011f4 <NMI_Handler+0x4>

080011f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011f6:	b480      	push	{r7}
 80011f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011fa:	e7fe      	b.n	80011fa <HardFault_Handler+0x4>

080011fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001200:	e7fe      	b.n	8001200 <MemManage_Handler+0x4>

08001202 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001202:	b480      	push	{r7}
 8001204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001206:	e7fe      	b.n	8001206 <BusFault_Handler+0x4>

08001208 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800120c:	e7fe      	b.n	800120c <UsageFault_Handler+0x4>

0800120e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800120e:	b480      	push	{r7}
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr

0800122a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800123c:	f000 fe6a 	bl	8001f14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001240:	bf00      	nop
 8001242:	bd80      	pop	{r7, pc}

08001244 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001248:	4802      	ldr	r0, [pc, #8]	; (8001254 <DMA1_Channel6_IRQHandler+0x10>)
 800124a:	f001 f871 	bl	8002330 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000394 	.word	0x20000394

08001258 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800125c:	4802      	ldr	r0, [pc, #8]	; (8001268 <DMA1_Channel7_IRQHandler+0x10>)
 800125e:	f001 f867 	bl	8002330 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	200003dc 	.word	0x200003dc

0800126c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]
 800127c:	e00a      	b.n	8001294 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800127e:	f3af 8000 	nop.w
 8001282:	4601      	mov	r1, r0
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	1c5a      	adds	r2, r3, #1
 8001288:	60ba      	str	r2, [r7, #8]
 800128a:	b2ca      	uxtb	r2, r1
 800128c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	3301      	adds	r3, #1
 8001292:	617b      	str	r3, [r7, #20]
 8001294:	697a      	ldr	r2, [r7, #20]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	429a      	cmp	r2, r3
 800129a:	dbf0      	blt.n	800127e <_read+0x12>
  }

  return len;
 800129c:	687b      	ldr	r3, [r7, #4]
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3718      	adds	r7, #24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80012a6:	b480      	push	{r7}
 80012a8:	b083      	sub	sp, #12
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012be:	b480      	push	{r7}
 80012c0:	b083      	sub	sp, #12
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
 80012c6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012ce:	605a      	str	r2, [r3, #4]
  return 0;
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <_isatty>:

int _isatty(int file)
{
 80012de:	b480      	push	{r7}
 80012e0:	b083      	sub	sp, #12
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012e6:	2301      	movs	r3, #1
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3714      	adds	r7, #20
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
	...

08001310 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001318:	4a14      	ldr	r2, [pc, #80]	; (800136c <_sbrk+0x5c>)
 800131a:	4b15      	ldr	r3, [pc, #84]	; (8001370 <_sbrk+0x60>)
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001324:	4b13      	ldr	r3, [pc, #76]	; (8001374 <_sbrk+0x64>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d102      	bne.n	8001332 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800132c:	4b11      	ldr	r3, [pc, #68]	; (8001374 <_sbrk+0x64>)
 800132e:	4a12      	ldr	r2, [pc, #72]	; (8001378 <_sbrk+0x68>)
 8001330:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001332:	4b10      	ldr	r3, [pc, #64]	; (8001374 <_sbrk+0x64>)
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4413      	add	r3, r2
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	429a      	cmp	r2, r3
 800133e:	d207      	bcs.n	8001350 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001340:	f005 f840 	bl	80063c4 <__errno>
 8001344:	4603      	mov	r3, r0
 8001346:	220c      	movs	r2, #12
 8001348:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800134a:	f04f 33ff 	mov.w	r3, #4294967295
 800134e:	e009      	b.n	8001364 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001350:	4b08      	ldr	r3, [pc, #32]	; (8001374 <_sbrk+0x64>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001356:	4b07      	ldr	r3, [pc, #28]	; (8001374 <_sbrk+0x64>)
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4413      	add	r3, r2
 800135e:	4a05      	ldr	r2, [pc, #20]	; (8001374 <_sbrk+0x64>)
 8001360:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001362:	68fb      	ldr	r3, [r7, #12]
}
 8001364:	4618      	mov	r0, r3
 8001366:	3718      	adds	r7, #24
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20018000 	.word	0x20018000
 8001370:	00000400 	.word	0x00000400
 8001374:	20000308 	.word	0x20000308
 8001378:	200005e0 	.word	0x200005e0

0800137c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001380:	4b06      	ldr	r3, [pc, #24]	; (800139c <SystemInit+0x20>)
 8001382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001386:	4a05      	ldr	r2, [pc, #20]	; (800139c <SystemInit+0x20>)
 8001388:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800138c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	e000ed00 	.word	0xe000ed00

080013a0 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013a4:	4b14      	ldr	r3, [pc, #80]	; (80013f8 <MX_USART2_UART_Init+0x58>)
 80013a6:	4a15      	ldr	r2, [pc, #84]	; (80013fc <MX_USART2_UART_Init+0x5c>)
 80013a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013aa:	4b13      	ldr	r3, [pc, #76]	; (80013f8 <MX_USART2_UART_Init+0x58>)
 80013ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013b2:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <MX_USART2_UART_Init+0x58>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013b8:	4b0f      	ldr	r3, [pc, #60]	; (80013f8 <MX_USART2_UART_Init+0x58>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013be:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <MX_USART2_UART_Init+0x58>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013c4:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <MX_USART2_UART_Init+0x58>)
 80013c6:	220c      	movs	r2, #12
 80013c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ca:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <MX_USART2_UART_Init+0x58>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013d0:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <MX_USART2_UART_Init+0x58>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013d6:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <MX_USART2_UART_Init+0x58>)
 80013d8:	2200      	movs	r2, #0
 80013da:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013dc:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <MX_USART2_UART_Init+0x58>)
 80013de:	2200      	movs	r2, #0
 80013e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013e2:	4805      	ldr	r0, [pc, #20]	; (80013f8 <MX_USART2_UART_Init+0x58>)
 80013e4:	f004 f8e1 	bl	80055aa <HAL_UART_Init>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80013ee:	f7ff fcc9 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	2000030c 	.word	0x2000030c
 80013fc:	40004400 	.word	0x40004400

08001400 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b0ac      	sub	sp, #176	; 0xb0
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001408:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001418:	f107 0314 	add.w	r3, r7, #20
 800141c:	2288      	movs	r2, #136	; 0x88
 800141e:	2100      	movs	r1, #0
 8001420:	4618      	mov	r0, r3
 8001422:	f004 ff80 	bl	8006326 <memset>
  if(uartHandle->Instance==USART2)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a4a      	ldr	r2, [pc, #296]	; (8001554 <HAL_UART_MspInit+0x154>)
 800142c:	4293      	cmp	r3, r2
 800142e:	f040 808d 	bne.w	800154c <HAL_UART_MspInit+0x14c>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001432:	2302      	movs	r3, #2
 8001434:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001436:	2300      	movs	r3, #0
 8001438:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800143a:	f107 0314 	add.w	r3, r7, #20
 800143e:	4618      	mov	r0, r3
 8001440:	f002 fb2c 	bl	8003a9c <HAL_RCCEx_PeriphCLKConfig>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800144a:	f7ff fc9b 	bl	8000d84 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800144e:	4b42      	ldr	r3, [pc, #264]	; (8001558 <HAL_UART_MspInit+0x158>)
 8001450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001452:	4a41      	ldr	r2, [pc, #260]	; (8001558 <HAL_UART_MspInit+0x158>)
 8001454:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001458:	6593      	str	r3, [r2, #88]	; 0x58
 800145a:	4b3f      	ldr	r3, [pc, #252]	; (8001558 <HAL_UART_MspInit+0x158>)
 800145c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800145e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001462:	613b      	str	r3, [r7, #16]
 8001464:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001466:	4b3c      	ldr	r3, [pc, #240]	; (8001558 <HAL_UART_MspInit+0x158>)
 8001468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146a:	4a3b      	ldr	r2, [pc, #236]	; (8001558 <HAL_UART_MspInit+0x158>)
 800146c:	f043 0308 	orr.w	r3, r3, #8
 8001470:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001472:	4b39      	ldr	r3, [pc, #228]	; (8001558 <HAL_UART_MspInit+0x158>)
 8001474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001476:	f003 0308 	and.w	r3, r3, #8
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800147e:	2360      	movs	r3, #96	; 0x60
 8001480:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001484:	2302      	movs	r3, #2
 8001486:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800148a:	2301      	movs	r3, #1
 800148c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001490:	2303      	movs	r3, #3
 8001492:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001496:	2307      	movs	r3, #7
 8001498:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800149c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014a0:	4619      	mov	r1, r3
 80014a2:	482e      	ldr	r0, [pc, #184]	; (800155c <HAL_UART_MspInit+0x15c>)
 80014a4:	f000 fff4 	bl	8002490 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80014a8:	4b2d      	ldr	r3, [pc, #180]	; (8001560 <HAL_UART_MspInit+0x160>)
 80014aa:	4a2e      	ldr	r2, [pc, #184]	; (8001564 <HAL_UART_MspInit+0x164>)
 80014ac:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 80014ae:	4b2c      	ldr	r3, [pc, #176]	; (8001560 <HAL_UART_MspInit+0x160>)
 80014b0:	2202      	movs	r2, #2
 80014b2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014b4:	4b2a      	ldr	r3, [pc, #168]	; (8001560 <HAL_UART_MspInit+0x160>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014ba:	4b29      	ldr	r3, [pc, #164]	; (8001560 <HAL_UART_MspInit+0x160>)
 80014bc:	2200      	movs	r2, #0
 80014be:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014c0:	4b27      	ldr	r3, [pc, #156]	; (8001560 <HAL_UART_MspInit+0x160>)
 80014c2:	2280      	movs	r2, #128	; 0x80
 80014c4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014c6:	4b26      	ldr	r3, [pc, #152]	; (8001560 <HAL_UART_MspInit+0x160>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014cc:	4b24      	ldr	r3, [pc, #144]	; (8001560 <HAL_UART_MspInit+0x160>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80014d2:	4b23      	ldr	r3, [pc, #140]	; (8001560 <HAL_UART_MspInit+0x160>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80014d8:	4b21      	ldr	r3, [pc, #132]	; (8001560 <HAL_UART_MspInit+0x160>)
 80014da:	2200      	movs	r2, #0
 80014dc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80014de:	4820      	ldr	r0, [pc, #128]	; (8001560 <HAL_UART_MspInit+0x160>)
 80014e0:	f000 fe6e 	bl	80021c0 <HAL_DMA_Init>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 80014ea:	f7ff fc4b 	bl	8000d84 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a1b      	ldr	r2, [pc, #108]	; (8001560 <HAL_UART_MspInit+0x160>)
 80014f2:	675a      	str	r2, [r3, #116]	; 0x74
 80014f4:	4a1a      	ldr	r2, [pc, #104]	; (8001560 <HAL_UART_MspInit+0x160>)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80014fa:	4b1b      	ldr	r3, [pc, #108]	; (8001568 <HAL_UART_MspInit+0x168>)
 80014fc:	4a1b      	ldr	r2, [pc, #108]	; (800156c <HAL_UART_MspInit+0x16c>)
 80014fe:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8001500:	4b19      	ldr	r3, [pc, #100]	; (8001568 <HAL_UART_MspInit+0x168>)
 8001502:	2202      	movs	r2, #2
 8001504:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001506:	4b18      	ldr	r3, [pc, #96]	; (8001568 <HAL_UART_MspInit+0x168>)
 8001508:	2210      	movs	r2, #16
 800150a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800150c:	4b16      	ldr	r3, [pc, #88]	; (8001568 <HAL_UART_MspInit+0x168>)
 800150e:	2200      	movs	r2, #0
 8001510:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001512:	4b15      	ldr	r3, [pc, #84]	; (8001568 <HAL_UART_MspInit+0x168>)
 8001514:	2280      	movs	r2, #128	; 0x80
 8001516:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001518:	4b13      	ldr	r3, [pc, #76]	; (8001568 <HAL_UART_MspInit+0x168>)
 800151a:	2200      	movs	r2, #0
 800151c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800151e:	4b12      	ldr	r3, [pc, #72]	; (8001568 <HAL_UART_MspInit+0x168>)
 8001520:	2200      	movs	r2, #0
 8001522:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001524:	4b10      	ldr	r3, [pc, #64]	; (8001568 <HAL_UART_MspInit+0x168>)
 8001526:	2200      	movs	r2, #0
 8001528:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800152a:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <HAL_UART_MspInit+0x168>)
 800152c:	2200      	movs	r2, #0
 800152e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001530:	480d      	ldr	r0, [pc, #52]	; (8001568 <HAL_UART_MspInit+0x168>)
 8001532:	f000 fe45 	bl	80021c0 <HAL_DMA_Init>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <HAL_UART_MspInit+0x140>
    {
      Error_Handler();
 800153c:	f7ff fc22 	bl	8000d84 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4a09      	ldr	r2, [pc, #36]	; (8001568 <HAL_UART_MspInit+0x168>)
 8001544:	671a      	str	r2, [r3, #112]	; 0x70
 8001546:	4a08      	ldr	r2, [pc, #32]	; (8001568 <HAL_UART_MspInit+0x168>)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800154c:	bf00      	nop
 800154e:	37b0      	adds	r7, #176	; 0xb0
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40004400 	.word	0x40004400
 8001558:	40021000 	.word	0x40021000
 800155c:	48000c00 	.word	0x48000c00
 8001560:	20000394 	.word	0x20000394
 8001564:	4002006c 	.word	0x4002006c
 8001568:	200003dc 	.word	0x200003dc
 800156c:	40020080 	.word	0x40020080

08001570 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001570:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001574:	f7ff ff02 	bl	800137c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001578:	480c      	ldr	r0, [pc, #48]	; (80015ac <LoopForever+0x6>)
  ldr r1, =_edata
 800157a:	490d      	ldr	r1, [pc, #52]	; (80015b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800157c:	4a0d      	ldr	r2, [pc, #52]	; (80015b4 <LoopForever+0xe>)
  movs r3, #0
 800157e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001580:	e002      	b.n	8001588 <LoopCopyDataInit>

08001582 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001582:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001584:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001586:	3304      	adds	r3, #4

08001588 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001588:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800158a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800158c:	d3f9      	bcc.n	8001582 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800158e:	4a0a      	ldr	r2, [pc, #40]	; (80015b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001590:	4c0a      	ldr	r4, [pc, #40]	; (80015bc <LoopForever+0x16>)
  movs r3, #0
 8001592:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001594:	e001      	b.n	800159a <LoopFillZerobss>

08001596 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001596:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001598:	3204      	adds	r2, #4

0800159a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800159a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800159c:	d3fb      	bcc.n	8001596 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800159e:	f004 ff17 	bl	80063d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015a2:	f7ff fb23 	bl	8000bec <main>

080015a6 <LoopForever>:

LoopForever:
    b LoopForever
 80015a6:	e7fe      	b.n	80015a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80015a8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80015ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015b0:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 80015b4:	08007024 	.word	0x08007024
  ldr r2, =_sbss
 80015b8:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 80015bc:	200005dc 	.word	0x200005dc

080015c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015c0:	e7fe      	b.n	80015c0 <ADC1_2_IRQHandler>

080015c2 <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b084      	sub	sp, #16
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	4603      	mov	r3, r0
 80015ca:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80015cc:	2300      	movs	r3, #0
 80015ce:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 80015d0:	f000 faa6 	bl	8001b20 <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80015d4:	88fb      	ldrh	r3, [r7, #6]
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 80015da:	f107 030f 	add.w	r3, r7, #15
 80015de:	2201      	movs	r2, #1
 80015e0:	2120      	movs	r1, #32
 80015e2:	4618      	mov	r0, r3
 80015e4:	f000 fb3c 	bl	8001c60 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 80015e8:	88fb      	ldrh	r3, [r7, #6]
 80015ea:	0a1b      	lsrs	r3, r3, #8
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 80015f2:	f107 030f 	add.w	r3, r7, #15
 80015f6:	2201      	movs	r2, #1
 80015f8:	2123      	movs	r1, #35	; 0x23
 80015fa:	4618      	mov	r0, r3
 80015fc:	f000 fb30 	bl	8001c60 <GYRO_IO_Write>
}
 8001600:	bf00      	nop
 8001602:	3710      	adds	r7, #16
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}

08001608 <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b082      	sub	sp, #8
 800161a:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 800161c:	f000 fa80 	bl	8001b20 <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 8001620:	1dfb      	adds	r3, r7, #7
 8001622:	2201      	movs	r2, #1
 8001624:	210f      	movs	r1, #15
 8001626:	4618      	mov	r0, r3
 8001628:	f000 fb56 	bl	8001cd8 <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 800162c:	79fb      	ldrb	r3, [r7, #7]
}
 800162e:	4618      	mov	r0, r3
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b082      	sub	sp, #8
 800163a:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800163c:	1dfb      	adds	r3, r7, #7
 800163e:	2201      	movs	r2, #1
 8001640:	2124      	movs	r1, #36	; 0x24
 8001642:	4618      	mov	r0, r3
 8001644:	f000 fb48 	bl	8001cd8 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8001648:	79fb      	ldrb	r3, [r7, #7]
 800164a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800164e:	b2db      	uxtb	r3, r3
 8001650:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001652:	1dfb      	adds	r3, r7, #7
 8001654:	2201      	movs	r2, #1
 8001656:	2124      	movs	r1, #36	; 0x24
 8001658:	4618      	mov	r0, r3
 800165a:	f000 fb01 	bl	8001c60 <GYRO_IO_Write>
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 8001666:	b580      	push	{r7, lr}
 8001668:	b084      	sub	sp, #16
 800166a:	af00      	add	r7, sp, #0
 800166c:	4603      	mov	r3, r0
 800166e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001670:	2300      	movs	r3, #0
 8001672:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001674:	88fb      	ldrh	r3, [r7, #6]
 8001676:	b2db      	uxtb	r3, r3
 8001678:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 800167a:	f107 030f 	add.w	r3, r7, #15
 800167e:	2201      	movs	r2, #1
 8001680:	2120      	movs	r1, #32
 8001682:	4618      	mov	r0, r3
 8001684:	f000 faec 	bl	8001c60 <GYRO_IO_Write>
}
 8001688:	bf00      	nop
 800168a:	3710      	adds	r7, #16
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 800169a:	2300      	movs	r3, #0
 800169c:	73fb      	strb	r3, [r7, #15]
 800169e:	2300      	movs	r3, #0
 80016a0:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 80016a2:	f107 030f 	add.w	r3, r7, #15
 80016a6:	2201      	movs	r2, #1
 80016a8:	2130      	movs	r1, #48	; 0x30
 80016aa:	4618      	mov	r0, r3
 80016ac:	f000 fb14 	bl	8001cd8 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 80016b0:	f107 030e 	add.w	r3, r7, #14
 80016b4:	2201      	movs	r2, #1
 80016b6:	2122      	movs	r1, #34	; 0x22
 80016b8:	4618      	mov	r0, r3
 80016ba:	f000 fb0d 	bl	8001cd8 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 80016be:	7bfb      	ldrb	r3, [r7, #15]
 80016c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 80016c8:	88fb      	ldrh	r3, [r7, #6]
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	121b      	asrs	r3, r3, #8
 80016ce:	b25a      	sxtb	r2, r3
 80016d0:	7bfb      	ldrb	r3, [r7, #15]
 80016d2:	b25b      	sxtb	r3, r3
 80016d4:	4313      	orrs	r3, r2
 80016d6:	b25b      	sxtb	r3, r3
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 80016dc:	7bbb      	ldrb	r3, [r7, #14]
 80016de:	f023 0320 	bic.w	r3, r3, #32
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 80016e6:	88fb      	ldrh	r3, [r7, #6]
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	7bbb      	ldrb	r3, [r7, #14]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 80016f2:	f107 030f 	add.w	r3, r7, #15
 80016f6:	2201      	movs	r2, #1
 80016f8:	2130      	movs	r1, #48	; 0x30
 80016fa:	4618      	mov	r0, r3
 80016fc:	f000 fab0 	bl	8001c60 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8001700:	f107 030e 	add.w	r3, r7, #14
 8001704:	2201      	movs	r2, #1
 8001706:	2122      	movs	r1, #34	; 0x22
 8001708:	4618      	mov	r0, r3
 800170a:	f000 faa9 	bl	8001c60 <GYRO_IO_Write>
}
 800170e:	bf00      	nop
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 8001716:	b580      	push	{r7, lr}
 8001718:	b084      	sub	sp, #16
 800171a:	af00      	add	r7, sp, #0
 800171c:	4603      	mov	r3, r0
 800171e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001720:	f107 030f 	add.w	r3, r7, #15
 8001724:	2201      	movs	r2, #1
 8001726:	2122      	movs	r1, #34	; 0x22
 8001728:	4618      	mov	r0, r3
 800172a:	f000 fad5 	bl	8001cd8 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 800172e:	79fb      	ldrb	r3, [r7, #7]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d10a      	bne.n	800174a <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 8001734:	7bfb      	ldrb	r3, [r7, #15]
 8001736:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800173a:	b2db      	uxtb	r3, r3
 800173c:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 800173e:	7bfb      	ldrb	r3, [r7, #15]
 8001740:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001744:	b2db      	uxtb	r3, r3
 8001746:	73fb      	strb	r3, [r7, #15]
 8001748:	e00c      	b.n	8001764 <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 800174a:	79fb      	ldrb	r3, [r7, #7]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d109      	bne.n	8001764 <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 8001750:	7bfb      	ldrb	r3, [r7, #15]
 8001752:	f023 0308 	bic.w	r3, r3, #8
 8001756:	b2db      	uxtb	r3, r3
 8001758:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 800175a:	7bfb      	ldrb	r3, [r7, #15]
 800175c:	f043 0308 	orr.w	r3, r3, #8
 8001760:	b2db      	uxtb	r3, r3
 8001762:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001764:	f107 030f 	add.w	r3, r7, #15
 8001768:	2201      	movs	r2, #1
 800176a:	2122      	movs	r1, #34	; 0x22
 800176c:	4618      	mov	r0, r3
 800176e:	f000 fa77 	bl	8001c60 <GYRO_IO_Write>
}
 8001772:	bf00      	nop
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 800177a:	b580      	push	{r7, lr}
 800177c:	b084      	sub	sp, #16
 800177e:	af00      	add	r7, sp, #0
 8001780:	4603      	mov	r3, r0
 8001782:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001784:	f107 030f 	add.w	r3, r7, #15
 8001788:	2201      	movs	r2, #1
 800178a:	2122      	movs	r1, #34	; 0x22
 800178c:	4618      	mov	r0, r3
 800178e:	f000 faa3 	bl	8001cd8 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8001792:	79fb      	ldrb	r3, [r7, #7]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d107      	bne.n	80017a8 <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 8001798:	7bfb      	ldrb	r3, [r7, #15]
 800179a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 80017a2:	7bfb      	ldrb	r3, [r7, #15]
 80017a4:	73fb      	strb	r3, [r7, #15]
 80017a6:	e009      	b.n	80017bc <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 80017a8:	79fb      	ldrb	r3, [r7, #7]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d106      	bne.n	80017bc <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 80017ae:	7bfb      	ldrb	r3, [r7, #15]
 80017b0:	f023 0308 	bic.w	r3, r3, #8
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 80017b8:	7bfb      	ldrb	r3, [r7, #15]
 80017ba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80017bc:	f107 030f 	add.w	r3, r7, #15
 80017c0:	2201      	movs	r2, #1
 80017c2:	2122      	movs	r1, #34	; 0x22
 80017c4:	4618      	mov	r0, r3
 80017c6:	f000 fa4b 	bl	8001c60 <GYRO_IO_Write>
}
 80017ca:	bf00      	nop
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b084      	sub	sp, #16
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	4603      	mov	r3, r0
 80017da:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80017dc:	f107 030f 	add.w	r3, r7, #15
 80017e0:	2201      	movs	r2, #1
 80017e2:	2121      	movs	r1, #33	; 0x21
 80017e4:	4618      	mov	r0, r3
 80017e6:	f000 fa77 	bl	8001cd8 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 80017ea:	7bfb      	ldrb	r3, [r7, #15]
 80017ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 80017f4:	7bfa      	ldrb	r2, [r7, #15]
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80017fe:	f107 030f 	add.w	r3, r7, #15
 8001802:	2201      	movs	r2, #1
 8001804:	2121      	movs	r1, #33	; 0x21
 8001806:	4618      	mov	r0, r3
 8001808:	f000 fa2a 	bl	8001c60 <GYRO_IO_Write>
}
 800180c:	bf00      	nop
 800180e:	3710      	adds	r7, #16
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800181e:	f107 030f 	add.w	r3, r7, #15
 8001822:	2201      	movs	r2, #1
 8001824:	2124      	movs	r1, #36	; 0x24
 8001826:	4618      	mov	r0, r3
 8001828:	f000 fa56 	bl	8001cd8 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 800182c:	7bfb      	ldrb	r3, [r7, #15]
 800182e:	f023 0310 	bic.w	r3, r3, #16
 8001832:	b2db      	uxtb	r3, r3
 8001834:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8001836:	7bfa      	ldrb	r2, [r7, #15]
 8001838:	79fb      	ldrb	r3, [r7, #7]
 800183a:	4313      	orrs	r3, r2
 800183c:	b2db      	uxtb	r3, r3
 800183e:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001840:	f107 030f 	add.w	r3, r7, #15
 8001844:	2201      	movs	r2, #1
 8001846:	2124      	movs	r1, #36	; 0x24
 8001848:	4618      	mov	r0, r3
 800184a:	f000 fa09 	bl	8001c60 <GYRO_IO_Write>
}
 800184e:	bf00      	nop
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
	...

08001858 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b08a      	sub	sp, #40	; 0x28
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 8001860:	2300      	movs	r3, #0
 8001862:	61bb      	str	r3, [r7, #24]
 8001864:	2300      	movs	r3, #0
 8001866:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8001868:	f107 0310 	add.w	r3, r7, #16
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 8001872:	2300      	movs	r3, #0
 8001874:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8001876:	f04f 0300 	mov.w	r3, #0
 800187a:	627b      	str	r3, [r7, #36]	; 0x24
  int i =0;
 800187c:	2300      	movs	r3, #0
 800187e:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8001880:	f107 030f 	add.w	r3, r7, #15
 8001884:	2201      	movs	r2, #1
 8001886:	2123      	movs	r1, #35	; 0x23
 8001888:	4618      	mov	r0, r3
 800188a:	f000 fa25 	bl	8001cd8 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 800188e:	f107 0318 	add.w	r3, r7, #24
 8001892:	2206      	movs	r2, #6
 8001894:	2128      	movs	r1, #40	; 0x28
 8001896:	4618      	mov	r0, r3
 8001898:	f000 fa1e 	bl	8001cd8 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 800189c:	7bfb      	ldrb	r3, [r7, #15]
 800189e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d123      	bne.n	80018ee <L3GD20_ReadXYZAngRate+0x96>
  {
    for(i=0; i<3; i++)
 80018a6:	2300      	movs	r3, #0
 80018a8:	623b      	str	r3, [r7, #32]
 80018aa:	e01c      	b.n	80018e6 <L3GD20_ReadXYZAngRate+0x8e>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 80018ac:	6a3b      	ldr	r3, [r7, #32]
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	3301      	adds	r3, #1
 80018b2:	3328      	adds	r3, #40	; 0x28
 80018b4:	443b      	add	r3, r7
 80018b6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	021b      	lsls	r3, r3, #8
 80018be:	b29a      	uxth	r2, r3
 80018c0:	6a3b      	ldr	r3, [r7, #32]
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	3328      	adds	r3, #40	; 0x28
 80018c6:	443b      	add	r3, r7
 80018c8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	4413      	add	r3, r2
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	b21a      	sxth	r2, r3
 80018d4:	6a3b      	ldr	r3, [r7, #32]
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	3328      	adds	r3, #40	; 0x28
 80018da:	443b      	add	r3, r7
 80018dc:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 80018e0:	6a3b      	ldr	r3, [r7, #32]
 80018e2:	3301      	adds	r3, #1
 80018e4:	623b      	str	r3, [r7, #32]
 80018e6:	6a3b      	ldr	r3, [r7, #32]
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	dddf      	ble.n	80018ac <L3GD20_ReadXYZAngRate+0x54>
 80018ec:	e022      	b.n	8001934 <L3GD20_ReadXYZAngRate+0xdc>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 80018ee:	2300      	movs	r3, #0
 80018f0:	623b      	str	r3, [r7, #32]
 80018f2:	e01c      	b.n	800192e <L3GD20_ReadXYZAngRate+0xd6>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 80018f4:	6a3b      	ldr	r3, [r7, #32]
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	3328      	adds	r3, #40	; 0x28
 80018fa:	443b      	add	r3, r7
 80018fc:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001900:	b29b      	uxth	r3, r3
 8001902:	021b      	lsls	r3, r3, #8
 8001904:	b29a      	uxth	r2, r3
 8001906:	6a3b      	ldr	r3, [r7, #32]
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	3301      	adds	r3, #1
 800190c:	3328      	adds	r3, #40	; 0x28
 800190e:	443b      	add	r3, r7
 8001910:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001914:	b29b      	uxth	r3, r3
 8001916:	4413      	add	r3, r2
 8001918:	b29b      	uxth	r3, r3
 800191a:	b21a      	sxth	r2, r3
 800191c:	6a3b      	ldr	r3, [r7, #32]
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	3328      	adds	r3, #40	; 0x28
 8001922:	443b      	add	r3, r7
 8001924:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8001928:	6a3b      	ldr	r3, [r7, #32]
 800192a:	3301      	adds	r3, #1
 800192c:	623b      	str	r3, [r7, #32]
 800192e:	6a3b      	ldr	r3, [r7, #32]
 8001930:	2b02      	cmp	r3, #2
 8001932:	dddf      	ble.n	80018f4 <L3GD20_ReadXYZAngRate+0x9c>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8001934:	7bfb      	ldrb	r3, [r7, #15]
 8001936:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800193a:	2b20      	cmp	r3, #32
 800193c:	d00c      	beq.n	8001958 <L3GD20_ReadXYZAngRate+0x100>
 800193e:	2b20      	cmp	r3, #32
 8001940:	dc0d      	bgt.n	800195e <L3GD20_ReadXYZAngRate+0x106>
 8001942:	2b00      	cmp	r3, #0
 8001944:	d002      	beq.n	800194c <L3GD20_ReadXYZAngRate+0xf4>
 8001946:	2b10      	cmp	r3, #16
 8001948:	d003      	beq.n	8001952 <L3GD20_ReadXYZAngRate+0xfa>
 800194a:	e008      	b.n	800195e <L3GD20_ReadXYZAngRate+0x106>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 800194c:	4b15      	ldr	r3, [pc, #84]	; (80019a4 <L3GD20_ReadXYZAngRate+0x14c>)
 800194e:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001950:	e005      	b.n	800195e <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 8001952:	4b15      	ldr	r3, [pc, #84]	; (80019a8 <L3GD20_ReadXYZAngRate+0x150>)
 8001954:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001956:	e002      	b.n	800195e <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 8001958:	4b14      	ldr	r3, [pc, #80]	; (80019ac <L3GD20_ReadXYZAngRate+0x154>)
 800195a:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 800195c:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 800195e:	2300      	movs	r3, #0
 8001960:	623b      	str	r3, [r7, #32]
 8001962:	e016      	b.n	8001992 <L3GD20_ReadXYZAngRate+0x13a>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 8001964:	6a3b      	ldr	r3, [r7, #32]
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	3328      	adds	r3, #40	; 0x28
 800196a:	443b      	add	r3, r7
 800196c:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8001970:	ee07 3a90 	vmov	s15, r3
 8001974:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001978:	6a3b      	ldr	r3, [r7, #32]
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	4413      	add	r3, r2
 8001980:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001984:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001988:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 800198c:	6a3b      	ldr	r3, [r7, #32]
 800198e:	3301      	adds	r3, #1
 8001990:	623b      	str	r3, [r7, #32]
 8001992:	6a3b      	ldr	r3, [r7, #32]
 8001994:	2b02      	cmp	r3, #2
 8001996:	dde5      	ble.n	8001964 <L3GD20_ReadXYZAngRate+0x10c>
  }
}
 8001998:	bf00      	nop
 800199a:	bf00      	nop
 800199c:	3728      	adds	r7, #40	; 0x28
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	410c0000 	.word	0x410c0000
 80019a8:	418c0000 	.word	0x418c0000
 80019ac:	428c0000 	.word	0x428c0000

080019b0 <SPIx_Init>:
/**
  * @brief SPIx Bus initialization
  * @retval None
  */
static void SPIx_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  if (HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80019b4:	481a      	ldr	r0, [pc, #104]	; (8001a20 <SPIx_Init+0x70>)
 80019b6:	f003 fdea 	bl	800558e <HAL_SPI_GetState>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d12c      	bne.n	8001a1a <SPIx_Init+0x6a>
  {
    /* SPI Config */
    SpiHandle.Instance = DISCOVERY_SPIx;
 80019c0:	4b17      	ldr	r3, [pc, #92]	; (8001a20 <SPIx_Init+0x70>)
 80019c2:	4a18      	ldr	r2, [pc, #96]	; (8001a24 <SPIx_Init+0x74>)
 80019c4:	601a      	str	r2, [r3, #0]
    /* SPI baudrate is set to 10 MHz (PCLK1/SPI_BaudRatePrescaler = 80/8 = 10 MHz)
      to verify these constraints:
      lsm303c SPI interface max baudrate is 10MHz for write/read
      PCLK1 max frequency is set to 80 MHz
      */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80019c6:	4b16      	ldr	r3, [pc, #88]	; (8001a20 <SPIx_Init+0x70>)
 80019c8:	2210      	movs	r2, #16
 80019ca:	61da      	str	r2, [r3, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES;
 80019cc:	4b14      	ldr	r3, [pc, #80]	; (8001a20 <SPIx_Init+0x70>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019d2:	4b13      	ldr	r3, [pc, #76]	; (8001a20 <SPIx_Init+0x70>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019d8:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <SPIx_Init+0x70>)
 80019da:	2200      	movs	r2, #0
 80019dc:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019de:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <SPIx_Init+0x70>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial = 7;
 80019e4:	4b0e      	ldr	r3, [pc, #56]	; (8001a20 <SPIx_Init+0x70>)
 80019e6:	2207      	movs	r2, #7
 80019e8:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 80019ea:	4b0d      	ldr	r3, [pc, #52]	; (8001a20 <SPIx_Init+0x70>)
 80019ec:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80019f0:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019f2:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <SPIx_Init+0x70>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 80019f8:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <SPIx_Init+0x70>)
 80019fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019fe:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a00:	4b07      	ldr	r3, [pc, #28]	; (8001a20 <SPIx_Init+0x70>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8001a06:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <SPIx_Init+0x70>)
 8001a08:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a0c:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 8001a0e:	4804      	ldr	r0, [pc, #16]	; (8001a20 <SPIx_Init+0x70>)
 8001a10:	f000 f80a 	bl	8001a28 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001a14:	4802      	ldr	r0, [pc, #8]	; (8001a20 <SPIx_Init+0x70>)
 8001a16:	f003 fd17 	bl	8005448 <HAL_SPI_Init>
  }
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	20000424 	.word	0x20000424
 8001a24:	40003800 	.word	0x40003800

08001a28 <SPIx_MspInit>:
  * @brief SPI MSP Init
  * @param hspi: SPI handle
  * @retval None
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b08a      	sub	sp, #40	; 0x28
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock  */
  DISCOVERY_SPIx_CLOCK_ENABLE();
 8001a30:	4b15      	ldr	r3, [pc, #84]	; (8001a88 <SPIx_MspInit+0x60>)
 8001a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a34:	4a14      	ldr	r2, [pc, #80]	; (8001a88 <SPIx_MspInit+0x60>)
 8001a36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a3a:	6593      	str	r3, [r2, #88]	; 0x58
 8001a3c:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <SPIx_MspInit+0x60>)
 8001a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a44:	613b      	str	r3, [r7, #16]
 8001a46:	693b      	ldr	r3, [r7, #16]

  /* enable SPIx gpio clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001a48:	4b0f      	ldr	r3, [pc, #60]	; (8001a88 <SPIx_MspInit+0x60>)
 8001a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a4c:	4a0e      	ldr	r2, [pc, #56]	; (8001a88 <SPIx_MspInit+0x60>)
 8001a4e:	f043 0308 	orr.w	r3, r3, #8
 8001a52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a54:	4b0c      	ldr	r3, [pc, #48]	; (8001a88 <SPIx_MspInit+0x60>)
 8001a56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a58:	f003 0308 	and.w	r3, r3, #8
 8001a5c:	60fb      	str	r3, [r7, #12]
 8001a5e:	68fb      	ldr	r3, [r7, #12]

  /* configure SPIx SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8001a60:	231a      	movs	r3, #26
 8001a62:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001a64:	2302      	movs	r3, #2
 8001a66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL; // GPIO_PULLDOWN;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8001a70:	2305      	movs	r3, #5
 8001a72:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 8001a74:	f107 0314 	add.w	r3, r7, #20
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4804      	ldr	r0, [pc, #16]	; (8001a8c <SPIx_MspInit+0x64>)
 8001a7c:	f000 fd08 	bl	8002490 <HAL_GPIO_Init>
}
 8001a80:	bf00      	nop
 8001a82:	3728      	adds	r7, #40	; 0x28
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	48000c00 	.word	0x48000c00

08001a90 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte : Byte send.
  * @retval none.
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte;

  /* Enable the SPI */
  __HAL_SPI_ENABLE(&SpiHandle);
 8001a9a:	4b20      	ldr	r3, [pc, #128]	; (8001b1c <SPIx_WriteRead+0x8c>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	4b1e      	ldr	r3, [pc, #120]	; (8001b1c <SPIx_WriteRead+0x8c>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001aa8:	601a      	str	r2, [r3, #0]
  /* check TXE flag */
  while ((SpiHandle.Instance->SR & SPI_FLAG_TXE) != SPI_FLAG_TXE);
 8001aaa:	bf00      	nop
 8001aac:	4b1b      	ldr	r3, [pc, #108]	; (8001b1c <SPIx_WriteRead+0x8c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d1f8      	bne.n	8001aac <SPIx_WriteRead+0x1c>

  /* Write the data */
  *((__IO uint8_t *)&SpiHandle.Instance->DR) = Byte;
 8001aba:	4b18      	ldr	r3, [pc, #96]	; (8001b1c <SPIx_WriteRead+0x8c>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	330c      	adds	r3, #12
 8001ac0:	79fa      	ldrb	r2, [r7, #7]
 8001ac2:	701a      	strb	r2, [r3, #0]

  while ((SpiHandle.Instance->SR & SPI_FLAG_RXNE) != SPI_FLAG_RXNE);
 8001ac4:	bf00      	nop
 8001ac6:	4b15      	ldr	r3, [pc, #84]	; (8001b1c <SPIx_WriteRead+0x8c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f003 0301 	and.w	r3, r3, #1
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d1f8      	bne.n	8001ac6 <SPIx_WriteRead+0x36>
  receivedbyte = *((__IO uint8_t *)&SpiHandle.Instance->DR);
 8001ad4:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <SPIx_WriteRead+0x8c>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	330c      	adds	r3, #12
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	73fb      	strb	r3, [r7, #15]

  /* Wait BSY flag */
  while ((SpiHandle.Instance->SR & SPI_FLAG_FTLVL) != SPI_FTLVL_EMPTY);
 8001ade:	bf00      	nop
 8001ae0:	4b0e      	ldr	r3, [pc, #56]	; (8001b1c <SPIx_WriteRead+0x8c>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1f8      	bne.n	8001ae0 <SPIx_WriteRead+0x50>
  while ((SpiHandle.Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY);
 8001aee:	bf00      	nop
 8001af0:	4b0a      	ldr	r3, [pc, #40]	; (8001b1c <SPIx_WriteRead+0x8c>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001afa:	2b80      	cmp	r3, #128	; 0x80
 8001afc:	d0f8      	beq.n	8001af0 <SPIx_WriteRead+0x60>

  /* disable the SPI */
  __HAL_SPI_DISABLE(&SpiHandle);
 8001afe:	4b07      	ldr	r3, [pc, #28]	; (8001b1c <SPIx_WriteRead+0x8c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	4b05      	ldr	r3, [pc, #20]	; (8001b1c <SPIx_WriteRead+0x8c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b0c:	601a      	str	r2, [r3, #0]

  return receivedbyte;
 8001b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3714      	adds	r7, #20
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	20000424 	.word	0x20000424

08001b20 <GYRO_IO_Init>:
/**
  * @brief  Configures the GYRO SPI interface.
  * @retval None
  */
void GYRO_IO_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b08a      	sub	sp, #40	; 0x28
 8001b24:	af00      	add	r7, sp, #0

  /* Case GYRO not used in the demonstration software except being set in
     low power mode.
     To avoid access conflicts with accelerometer and magnetometer,
     initialize  XL_CS and MAG_CS pins then deselect these I/O */
  ACCELERO_CS_GPIO_CLK_ENABLE();
 8001b26:	4b49      	ldr	r3, [pc, #292]	; (8001c4c <GYRO_IO_Init+0x12c>)
 8001b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2a:	4a48      	ldr	r2, [pc, #288]	; (8001c4c <GYRO_IO_Init+0x12c>)
 8001b2c:	f043 0310 	orr.w	r3, r3, #16
 8001b30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b32:	4b46      	ldr	r3, [pc, #280]	; (8001c4c <GYRO_IO_Init+0x12c>)
 8001b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b36:	f003 0310 	and.w	r3, r3, #16
 8001b3a:	613b      	str	r3, [r7, #16]
 8001b3c:	693b      	ldr	r3, [r7, #16]
  GPIO_InitStructure.Pin = ACCELERO_CS_PIN;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001b42:	2301      	movs	r3, #1
 8001b44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8001b46:	2300      	movs	r3, #0
 8001b48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ACCELERO_CS_GPIO_PORT, &GPIO_InitStructure);
 8001b4e:	f107 0314 	add.w	r3, r7, #20
 8001b52:	4619      	mov	r1, r3
 8001b54:	483e      	ldr	r0, [pc, #248]	; (8001c50 <GYRO_IO_Init+0x130>)
 8001b56:	f000 fc9b 	bl	8002490 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  ACCELERO_CS_HIGH();
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	2101      	movs	r1, #1
 8001b5e:	483c      	ldr	r0, [pc, #240]	; (8001c50 <GYRO_IO_Init+0x130>)
 8001b60:	f000 fe40 	bl	80027e4 <HAL_GPIO_WritePin>

  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */
  MAGNETO_CS_GPIO_CLK_ENABLE();
 8001b64:	4b39      	ldr	r3, [pc, #228]	; (8001c4c <GYRO_IO_Init+0x12c>)
 8001b66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b68:	4a38      	ldr	r2, [pc, #224]	; (8001c4c <GYRO_IO_Init+0x12c>)
 8001b6a:	f043 0304 	orr.w	r3, r3, #4
 8001b6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b70:	4b36      	ldr	r3, [pc, #216]	; (8001c4c <GYRO_IO_Init+0x12c>)
 8001b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b74:	f003 0304 	and.w	r3, r3, #4
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
  GPIO_InitStructure.Pin = MAGNETO_CS_PIN;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001b80:	2301      	movs	r3, #1
 8001b82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MAGNETO_CS_GPIO_PORT, &GPIO_InitStructure);
 8001b8c:	f107 0314 	add.w	r3, r7, #20
 8001b90:	4619      	mov	r1, r3
 8001b92:	4830      	ldr	r0, [pc, #192]	; (8001c54 <GYRO_IO_Init+0x134>)
 8001b94:	f000 fc7c 	bl	8002490 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  MAGNETO_CS_HIGH();
 8001b98:	2201      	movs	r2, #1
 8001b9a:	2101      	movs	r1, #1
 8001b9c:	482d      	ldr	r0, [pc, #180]	; (8001c54 <GYRO_IO_Init+0x134>)
 8001b9e:	f000 fe21 	bl	80027e4 <HAL_GPIO_WritePin>


  /* Configure the Gyroscope Control pins ---------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */
  GYRO_CS_GPIO_CLK_ENABLE();
 8001ba2:	4b2a      	ldr	r3, [pc, #168]	; (8001c4c <GYRO_IO_Init+0x12c>)
 8001ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba6:	4a29      	ldr	r2, [pc, #164]	; (8001c4c <GYRO_IO_Init+0x12c>)
 8001ba8:	f043 0308 	orr.w	r3, r3, #8
 8001bac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bae:	4b27      	ldr	r3, [pc, #156]	; (8001c4c <GYRO_IO_Init+0x12c>)
 8001bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb2:	f003 0308 	and.w	r3, r3, #8
 8001bb6:	60bb      	str	r3, [r7, #8]
 8001bb8:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 8001bba:	2380      	movs	r3, #128	; 0x80
 8001bbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 8001bca:	f107 0314 	add.w	r3, r7, #20
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4821      	ldr	r0, [pc, #132]	; (8001c58 <GYRO_IO_Init+0x138>)
 8001bd2:	f000 fc5d 	bl	8002490 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	2180      	movs	r1, #128	; 0x80
 8001bda:	481f      	ldr	r0, [pc, #124]	; (8001c58 <GYRO_IO_Init+0x138>)
 8001bdc:	f000 fe02 	bl	80027e4 <HAL_GPIO_WritePin>

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT1_GPIO_CLK_ENABLE();
 8001be0:	4b1a      	ldr	r3, [pc, #104]	; (8001c4c <GYRO_IO_Init+0x12c>)
 8001be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be4:	4a19      	ldr	r2, [pc, #100]	; (8001c4c <GYRO_IO_Init+0x12c>)
 8001be6:	f043 0308 	orr.w	r3, r3, #8
 8001bea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bec:	4b17      	ldr	r3, [pc, #92]	; (8001c4c <GYRO_IO_Init+0x12c>)
 8001bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf0:	f003 0308 	and.w	r3, r3, #8
 8001bf4:	607b      	str	r3, [r7, #4]
 8001bf6:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN;
 8001bf8:	2304      	movs	r3, #4
 8001bfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c00:	2303      	movs	r3, #3
 8001c02:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GYRO_INT1_GPIO_PORT, &GPIO_InitStructure);
 8001c08:	f107 0314 	add.w	r3, r7, #20
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4812      	ldr	r0, [pc, #72]	; (8001c58 <GYRO_IO_Init+0x138>)
 8001c10:	f000 fc3e 	bl	8002490 <HAL_GPIO_Init>

  GYRO_INT2_GPIO_CLK_ENABLE();
 8001c14:	4b0d      	ldr	r3, [pc, #52]	; (8001c4c <GYRO_IO_Init+0x12c>)
 8001c16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c18:	4a0c      	ldr	r2, [pc, #48]	; (8001c4c <GYRO_IO_Init+0x12c>)
 8001c1a:	f043 0302 	orr.w	r3, r3, #2
 8001c1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c20:	4b0a      	ldr	r3, [pc, #40]	; (8001c4c <GYRO_IO_Init+0x12c>)
 8001c22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c24:	f003 0302 	and.w	r3, r3, #2
 8001c28:	603b      	str	r3, [r7, #0]
 8001c2a:	683b      	ldr	r3, [r7, #0]
  GPIO_InitStructure.Pin = GYRO_INT2_PIN;
 8001c2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c30:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT2_GPIO_PORT, &GPIO_InitStructure);
 8001c32:	f107 0314 	add.w	r3, r7, #20
 8001c36:	4619      	mov	r1, r3
 8001c38:	4808      	ldr	r0, [pc, #32]	; (8001c5c <GYRO_IO_Init+0x13c>)
 8001c3a:	f000 fc29 	bl	8002490 <HAL_GPIO_Init>

  SPIx_Init();
 8001c3e:	f7ff feb7 	bl	80019b0 <SPIx_Init>

}
 8001c42:	bf00      	nop
 8001c44:	3728      	adds	r7, #40	; 0x28
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	48001000 	.word	0x48001000
 8001c54:	48000800 	.word	0x48000800
 8001c58:	48000c00 	.word	0x48000c00
 8001c5c:	48000400 	.word	0x48000400

08001c60 <GYRO_IO_Write>:
  * @param  WriteAddr : GYRO's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  * @retval None
  */
void GYRO_IO_Write(uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	460b      	mov	r3, r1
 8001c6a:	70fb      	strb	r3, [r7, #3]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit:
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if (NumByteToWrite > 0x01)
 8001c70:	883b      	ldrh	r3, [r7, #0]
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d903      	bls.n	8001c7e <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8001c76:	78fb      	ldrb	r3, [r7, #3]
 8001c78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c7c:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8001c7e:	2200      	movs	r2, #0
 8001c80:	2180      	movs	r1, #128	; 0x80
 8001c82:	4813      	ldr	r0, [pc, #76]	; (8001cd0 <GYRO_IO_Write+0x70>)
 8001c84:	f000 fdae 	bl	80027e4 <HAL_GPIO_WritePin>
  __SPI_DIRECTION_2LINES(&SpiHandle);
 8001c88:	4b12      	ldr	r3, [pc, #72]	; (8001cd4 <GYRO_IO_Write+0x74>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <GYRO_IO_Write+0x74>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f422 4244 	bic.w	r2, r2, #50176	; 0xc400
 8001c96:	601a      	str	r2, [r3, #0]

  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 8001c98:	78fb      	ldrb	r3, [r7, #3]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff fef8 	bl	8001a90 <SPIx_WriteRead>

  /* Send the data that will be written into the device (MSB First) */
  while (NumByteToWrite >= 0x01)
 8001ca0:	e00a      	b.n	8001cb8 <GYRO_IO_Write+0x58>
  {
    SPIx_WriteRead(*pBuffer);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff fef2 	bl	8001a90 <SPIx_WriteRead>
    NumByteToWrite--;
 8001cac:	883b      	ldrh	r3, [r7, #0]
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	607b      	str	r3, [r7, #4]
  while (NumByteToWrite >= 0x01)
 8001cb8:	883b      	ldrh	r3, [r7, #0]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1f1      	bne.n	8001ca2 <GYRO_IO_Write+0x42>
  }

  /* Set chip select High at the end of the transmission */
  GYRO_CS_HIGH();
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	2180      	movs	r1, #128	; 0x80
 8001cc2:	4803      	ldr	r0, [pc, #12]	; (8001cd0 <GYRO_IO_Write+0x70>)
 8001cc4:	f000 fd8e 	bl	80027e4 <HAL_GPIO_WritePin>
}
 8001cc8:	bf00      	nop
 8001cca:	3708      	adds	r7, #8
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	48000c00 	.word	0x48000c00
 8001cd4:	20000424 	.word	0x20000424

08001cd8 <GYRO_IO_Read>:
  * @param  ReadAddr : GYROSCOPE's internal address to read from.
  * @param  NumByteToRead : number of bytes to read from the GYROSCOPE.
  * @retval None
  */
void GYRO_IO_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	70fb      	strb	r3, [r7, #3]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	803b      	strh	r3, [r7, #0]
  if (NumByteToRead > 0x01)
 8001ce8:	883b      	ldrh	r3, [r7, #0]
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d904      	bls.n	8001cf8 <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 8001cee:	78fb      	ldrb	r3, [r7, #3]
 8001cf0:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001cf4:	70fb      	strb	r3, [r7, #3]
 8001cf6:	e003      	b.n	8001d00 <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8001cf8:	78fb      	ldrb	r3, [r7, #3]
 8001cfa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001cfe:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8001d00:	2200      	movs	r2, #0
 8001d02:	2180      	movs	r1, #128	; 0x80
 8001d04:	4814      	ldr	r0, [pc, #80]	; (8001d58 <GYRO_IO_Read+0x80>)
 8001d06:	f000 fd6d 	bl	80027e4 <HAL_GPIO_WritePin>
  __SPI_DIRECTION_2LINES(&SpiHandle);
 8001d0a:	4b14      	ldr	r3, [pc, #80]	; (8001d5c <GYRO_IO_Read+0x84>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	4b12      	ldr	r3, [pc, #72]	; (8001d5c <GYRO_IO_Read+0x84>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f422 4244 	bic.w	r2, r2, #50176	; 0xc400
 8001d18:	601a      	str	r2, [r3, #0]
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 8001d1a:	78fb      	ldrb	r3, [r7, #3]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff feb7 	bl	8001a90 <SPIx_WriteRead>

  /* Receive the data that will be read from the device (MSB First) */
  while (NumByteToRead > 0x00)
 8001d22:	e00c      	b.n	8001d3e <GYRO_IO_Read+0x66>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to GYROSCOPE (Slave device) */
    *pBuffer = SPIx_WriteRead(0x00);
 8001d24:	2000      	movs	r0, #0
 8001d26:	f7ff feb3 	bl	8001a90 <SPIx_WriteRead>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 8001d32:	883b      	ldrh	r3, [r7, #0]
 8001d34:	3b01      	subs	r3, #1
 8001d36:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	607b      	str	r3, [r7, #4]
  while (NumByteToRead > 0x00)
 8001d3e:	883b      	ldrh	r3, [r7, #0]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d1ef      	bne.n	8001d24 <GYRO_IO_Read+0x4c>
  }

  /* Set chip select High at the end of the transmission */
  GYRO_CS_HIGH();
 8001d44:	2201      	movs	r2, #1
 8001d46:	2180      	movs	r1, #128	; 0x80
 8001d48:	4803      	ldr	r0, [pc, #12]	; (8001d58 <GYRO_IO_Read+0x80>)
 8001d4a:	f000 fd4b 	bl	80027e4 <HAL_GPIO_WritePin>
}
 8001d4e:	bf00      	nop
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	48000c00 	.word	0x48000c00
 8001d5c:	20000424 	.word	0x20000424

08001d60 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef L3GD20_InitStructure;
  GYRO_FilterConfigTypeDef L3GD20_FilterStructure = {0, 0};
 8001d6e:	2300      	movs	r3, #0
 8001d70:	703b      	strb	r3, [r7, #0]
 8001d72:	2300      	movs	r3, #0
 8001d74:	707b      	strb	r3, [r7, #1]

  if ((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 8001d76:	4b2d      	ldr	r3, [pc, #180]	; (8001e2c <BSP_GYRO_Init+0xcc>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	4798      	blx	r3
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2bd4      	cmp	r3, #212	; 0xd4
 8001d80:	d005      	beq.n	8001d8e <BSP_GYRO_Init+0x2e>
 8001d82:	4b2a      	ldr	r3, [pc, #168]	; (8001e2c <BSP_GYRO_Init+0xcc>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	4798      	blx	r3
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2bd5      	cmp	r3, #213	; 0xd5
 8001d8c:	d146      	bne.n	8001e1c <BSP_GYRO_Init+0xbc>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 8001d8e:	4b28      	ldr	r3, [pc, #160]	; (8001e30 <BSP_GYRO_Init+0xd0>)
 8001d90:	4a26      	ldr	r2, [pc, #152]	; (8001e2c <BSP_GYRO_Init+0xcc>)
 8001d92:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    L3GD20_InitStructure.Power_Mode = L3GD20_MODE_ACTIVE;
 8001d94:	2308      	movs	r3, #8
 8001d96:	713b      	strb	r3, [r7, #4]
    L3GD20_InitStructure.Output_DataRate = L3GD20_OUTPUT_DATARATE_1;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	717b      	strb	r3, [r7, #5]
    L3GD20_InitStructure.Axes_Enable = L3GD20_AXES_ENABLE;
 8001d9c:	2307      	movs	r3, #7
 8001d9e:	71bb      	strb	r3, [r7, #6]
    L3GD20_InitStructure.Band_Width = L3GD20_BANDWIDTH_4;
 8001da0:	2330      	movs	r3, #48	; 0x30
 8001da2:	71fb      	strb	r3, [r7, #7]
    L3GD20_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 8001da4:	2300      	movs	r3, #0
 8001da6:	723b      	strb	r3, [r7, #8]
    L3GD20_InitStructure.Endianness = L3GD20_BLE_LSB;
 8001da8:	2300      	movs	r3, #0
 8001daa:	727b      	strb	r3, [r7, #9]
    L3GD20_InitStructure.Full_Scale = L3GD20_FULLSCALE_500;
 8001dac:	2310      	movs	r3, #16
 8001dae:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t)(L3GD20_InitStructure.Power_Mode | L3GD20_InitStructure.Output_DataRate | \
 8001db0:	793a      	ldrb	r2, [r7, #4]
 8001db2:	797b      	ldrb	r3, [r7, #5]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	b2da      	uxtb	r2, r3
                      L3GD20_InitStructure.Axes_Enable | L3GD20_InitStructure.Band_Width);
 8001db8:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t)(L3GD20_InitStructure.Power_Mode | L3GD20_InitStructure.Output_DataRate | \
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	b2da      	uxtb	r2, r3
                      L3GD20_InitStructure.Axes_Enable | L3GD20_InitStructure.Band_Width);
 8001dbe:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t)(L3GD20_InitStructure.Power_Mode | L3GD20_InitStructure.Output_DataRate | \
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t)((L3GD20_InitStructure.BlockData_Update | L3GD20_InitStructure.Endianness | \
 8001dc6:	7a3a      	ldrb	r2, [r7, #8]
 8001dc8:	7a7b      	ldrb	r3, [r7, #9]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	b2da      	uxtb	r2, r3
                        L3GD20_InitStructure.Full_Scale) << 8);
 8001dce:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t)((L3GD20_InitStructure.BlockData_Update | L3GD20_InitStructure.Endianness | \
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	021b      	lsls	r3, r3, #8
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	89bb      	ldrh	r3, [r7, #12]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 8001de0:	4b13      	ldr	r3, [pc, #76]	; (8001e30 <BSP_GYRO_Init+0xd0>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	89ba      	ldrh	r2, [r7, #12]
 8001de8:	4610      	mov	r0, r2
 8001dea:	4798      	blx	r3

    L3GD20_FilterStructure.HighPassFilter_Mode_Selection = L3GD20_HPM_NORMAL_MODE_RES;
 8001dec:	2300      	movs	r3, #0
 8001dee:	703b      	strb	r3, [r7, #0]
    L3GD20_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 8001df0:	2300      	movs	r3, #0
 8001df2:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t)((L3GD20_FilterStructure.HighPassFilter_Mode_Selection | \
 8001df4:	783a      	ldrb	r2, [r7, #0]
                      L3GD20_FilterStructure.HighPassFilter_CutOff_Frequency));
 8001df6:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t)((L3GD20_FilterStructure.HighPassFilter_Mode_Selection | \
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	81bb      	strh	r3, [r7, #12]

    /* Configure component filter */
    GyroscopeDrv->FilterConfig(ctrl) ;
 8001dfe:	4b0c      	ldr	r3, [pc, #48]	; (8001e30 <BSP_GYRO_Init+0xd0>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e04:	89ba      	ldrh	r2, [r7, #12]
 8001e06:	b2d2      	uxtb	r2, r2
 8001e08:	4610      	mov	r0, r2
 8001e0a:	4798      	blx	r3

    /* Enable component filter */
    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 8001e0c:	4b08      	ldr	r3, [pc, #32]	; (8001e30 <BSP_GYRO_Init+0xd0>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e12:	2010      	movs	r0, #16
 8001e14:	4798      	blx	r3

    ret = GYRO_OK;
 8001e16:	2300      	movs	r3, #0
 8001e18:	73fb      	strb	r3, [r7, #15]
 8001e1a:	e001      	b.n	8001e20 <BSP_GYRO_Init+0xc0>
  }
  else
  {
    ret = GYRO_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20000004 	.word	0x20000004
 8001e30:	20000488 	.word	0x20000488

08001e34 <BSP_GYRO_GetXYZ>:
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array
  * @retval None
  */
void BSP_GYRO_GetXYZ(float *pfData)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  if (GyroscopeDrv->GetXYZ != NULL)
 8001e3c:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <BSP_GYRO_GetXYZ+0x24>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d004      	beq.n	8001e50 <BSP_GYRO_GetXYZ+0x1c>
  {
    GyroscopeDrv->GetXYZ(pfData);
 8001e46:	4b04      	ldr	r3, [pc, #16]	; (8001e58 <BSP_GYRO_GetXYZ+0x24>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	4798      	blx	r3
  }
}
 8001e50:	bf00      	nop
 8001e52:	3708      	adds	r7, #8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	20000488 	.word	0x20000488

08001e5c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e62:	2300      	movs	r3, #0
 8001e64:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e66:	4b0c      	ldr	r3, [pc, #48]	; (8001e98 <HAL_Init+0x3c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a0b      	ldr	r2, [pc, #44]	; (8001e98 <HAL_Init+0x3c>)
 8001e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e70:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e72:	2003      	movs	r0, #3
 8001e74:	f000 f962 	bl	800213c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e78:	2000      	movs	r0, #0
 8001e7a:	f000 f80f 	bl	8001e9c <HAL_InitTick>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d002      	beq.n	8001e8a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	71fb      	strb	r3, [r7, #7]
 8001e88:	e001      	b.n	8001e8e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e8a:	f7ff f98d 	bl	80011a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e8e:	79fb      	ldrb	r3, [r7, #7]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3708      	adds	r7, #8
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	40022000 	.word	0x40022000

08001e9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001ea8:	4b17      	ldr	r3, [pc, #92]	; (8001f08 <HAL_InitTick+0x6c>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d023      	beq.n	8001ef8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001eb0:	4b16      	ldr	r3, [pc, #88]	; (8001f0c <HAL_InitTick+0x70>)
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	4b14      	ldr	r3, [pc, #80]	; (8001f08 <HAL_InitTick+0x6c>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	4619      	mov	r1, r3
 8001eba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ebe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f000 f96d 	bl	80021a6 <HAL_SYSTICK_Config>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d10f      	bne.n	8001ef2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2b0f      	cmp	r3, #15
 8001ed6:	d809      	bhi.n	8001eec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ed8:	2200      	movs	r2, #0
 8001eda:	6879      	ldr	r1, [r7, #4]
 8001edc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ee0:	f000 f937 	bl	8002152 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ee4:	4a0a      	ldr	r2, [pc, #40]	; (8001f10 <HAL_InitTick+0x74>)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6013      	str	r3, [r2, #0]
 8001eea:	e007      	b.n	8001efc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	73fb      	strb	r3, [r7, #15]
 8001ef0:	e004      	b.n	8001efc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	73fb      	strb	r3, [r7, #15]
 8001ef6:	e001      	b.n	8001efc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	2000003c 	.word	0x2000003c
 8001f0c:	20000000 	.word	0x20000000
 8001f10:	20000038 	.word	0x20000038

08001f14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f18:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <HAL_IncTick+0x20>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <HAL_IncTick+0x24>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4413      	add	r3, r2
 8001f24:	4a04      	ldr	r2, [pc, #16]	; (8001f38 <HAL_IncTick+0x24>)
 8001f26:	6013      	str	r3, [r2, #0]
}
 8001f28:	bf00      	nop
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	2000003c 	.word	0x2000003c
 8001f38:	2000048c 	.word	0x2000048c

08001f3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f40:	4b03      	ldr	r3, [pc, #12]	; (8001f50 <HAL_GetTick+0x14>)
 8001f42:	681b      	ldr	r3, [r3, #0]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	2000048c 	.word	0x2000048c

08001f54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f5c:	f7ff ffee 	bl	8001f3c <HAL_GetTick>
 8001f60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f6c:	d005      	beq.n	8001f7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001f6e:	4b0a      	ldr	r3, [pc, #40]	; (8001f98 <HAL_Delay+0x44>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	461a      	mov	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	4413      	add	r3, r2
 8001f78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f7a:	bf00      	nop
 8001f7c:	f7ff ffde 	bl	8001f3c <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d8f7      	bhi.n	8001f7c <HAL_Delay+0x28>
  {
  }
}
 8001f8c:	bf00      	nop
 8001f8e:	bf00      	nop
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	2000003c 	.word	0x2000003c

08001f9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fac:	4b0c      	ldr	r3, [pc, #48]	; (8001fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fb2:	68ba      	ldr	r2, [r7, #8]
 8001fb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fb8:	4013      	ands	r3, r2
 8001fba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fce:	4a04      	ldr	r2, [pc, #16]	; (8001fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	60d3      	str	r3, [r2, #12]
}
 8001fd4:	bf00      	nop
 8001fd6:	3714      	adds	r7, #20
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	e000ed00 	.word	0xe000ed00

08001fe4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fe8:	4b04      	ldr	r3, [pc, #16]	; (8001ffc <__NVIC_GetPriorityGrouping+0x18>)
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	0a1b      	lsrs	r3, r3, #8
 8001fee:	f003 0307 	and.w	r3, r3, #7
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	e000ed00 	.word	0xe000ed00

08002000 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	4603      	mov	r3, r0
 8002008:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800200a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200e:	2b00      	cmp	r3, #0
 8002010:	db0b      	blt.n	800202a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002012:	79fb      	ldrb	r3, [r7, #7]
 8002014:	f003 021f 	and.w	r2, r3, #31
 8002018:	4907      	ldr	r1, [pc, #28]	; (8002038 <__NVIC_EnableIRQ+0x38>)
 800201a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201e:	095b      	lsrs	r3, r3, #5
 8002020:	2001      	movs	r0, #1
 8002022:	fa00 f202 	lsl.w	r2, r0, r2
 8002026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800202a:	bf00      	nop
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	e000e100 	.word	0xe000e100

0800203c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	4603      	mov	r3, r0
 8002044:	6039      	str	r1, [r7, #0]
 8002046:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204c:	2b00      	cmp	r3, #0
 800204e:	db0a      	blt.n	8002066 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	b2da      	uxtb	r2, r3
 8002054:	490c      	ldr	r1, [pc, #48]	; (8002088 <__NVIC_SetPriority+0x4c>)
 8002056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205a:	0112      	lsls	r2, r2, #4
 800205c:	b2d2      	uxtb	r2, r2
 800205e:	440b      	add	r3, r1
 8002060:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002064:	e00a      	b.n	800207c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	b2da      	uxtb	r2, r3
 800206a:	4908      	ldr	r1, [pc, #32]	; (800208c <__NVIC_SetPriority+0x50>)
 800206c:	79fb      	ldrb	r3, [r7, #7]
 800206e:	f003 030f 	and.w	r3, r3, #15
 8002072:	3b04      	subs	r3, #4
 8002074:	0112      	lsls	r2, r2, #4
 8002076:	b2d2      	uxtb	r2, r2
 8002078:	440b      	add	r3, r1
 800207a:	761a      	strb	r2, [r3, #24]
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	e000e100 	.word	0xe000e100
 800208c:	e000ed00 	.word	0xe000ed00

08002090 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002090:	b480      	push	{r7}
 8002092:	b089      	sub	sp, #36	; 0x24
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f003 0307 	and.w	r3, r3, #7
 80020a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	f1c3 0307 	rsb	r3, r3, #7
 80020aa:	2b04      	cmp	r3, #4
 80020ac:	bf28      	it	cs
 80020ae:	2304      	movcs	r3, #4
 80020b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	3304      	adds	r3, #4
 80020b6:	2b06      	cmp	r3, #6
 80020b8:	d902      	bls.n	80020c0 <NVIC_EncodePriority+0x30>
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	3b03      	subs	r3, #3
 80020be:	e000      	b.n	80020c2 <NVIC_EncodePriority+0x32>
 80020c0:	2300      	movs	r3, #0
 80020c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c4:	f04f 32ff 	mov.w	r2, #4294967295
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	43da      	mvns	r2, r3
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	401a      	ands	r2, r3
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020d8:	f04f 31ff 	mov.w	r1, #4294967295
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	fa01 f303 	lsl.w	r3, r1, r3
 80020e2:	43d9      	mvns	r1, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e8:	4313      	orrs	r3, r2
         );
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3724      	adds	r7, #36	; 0x24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
	...

080020f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	3b01      	subs	r3, #1
 8002104:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002108:	d301      	bcc.n	800210e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800210a:	2301      	movs	r3, #1
 800210c:	e00f      	b.n	800212e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800210e:	4a0a      	ldr	r2, [pc, #40]	; (8002138 <SysTick_Config+0x40>)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	3b01      	subs	r3, #1
 8002114:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002116:	210f      	movs	r1, #15
 8002118:	f04f 30ff 	mov.w	r0, #4294967295
 800211c:	f7ff ff8e 	bl	800203c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002120:	4b05      	ldr	r3, [pc, #20]	; (8002138 <SysTick_Config+0x40>)
 8002122:	2200      	movs	r2, #0
 8002124:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002126:	4b04      	ldr	r3, [pc, #16]	; (8002138 <SysTick_Config+0x40>)
 8002128:	2207      	movs	r2, #7
 800212a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	e000e010 	.word	0xe000e010

0800213c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f7ff ff29 	bl	8001f9c <__NVIC_SetPriorityGrouping>
}
 800214a:	bf00      	nop
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	b086      	sub	sp, #24
 8002156:	af00      	add	r7, sp, #0
 8002158:	4603      	mov	r3, r0
 800215a:	60b9      	str	r1, [r7, #8]
 800215c:	607a      	str	r2, [r7, #4]
 800215e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002160:	2300      	movs	r3, #0
 8002162:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002164:	f7ff ff3e 	bl	8001fe4 <__NVIC_GetPriorityGrouping>
 8002168:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	68b9      	ldr	r1, [r7, #8]
 800216e:	6978      	ldr	r0, [r7, #20]
 8002170:	f7ff ff8e 	bl	8002090 <NVIC_EncodePriority>
 8002174:	4602      	mov	r2, r0
 8002176:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800217a:	4611      	mov	r1, r2
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff ff5d 	bl	800203c <__NVIC_SetPriority>
}
 8002182:	bf00      	nop
 8002184:	3718      	adds	r7, #24
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b082      	sub	sp, #8
 800218e:	af00      	add	r7, sp, #0
 8002190:	4603      	mov	r3, r0
 8002192:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff ff31 	bl	8002000 <__NVIC_EnableIRQ>
}
 800219e:	bf00      	nop
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b082      	sub	sp, #8
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7ff ffa2 	bl	80020f8 <SysTick_Config>
 80021b4:	4603      	mov	r3, r0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
	...

080021c0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d101      	bne.n	80021d2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e098      	b.n	8002304 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	461a      	mov	r2, r3
 80021d8:	4b4d      	ldr	r3, [pc, #308]	; (8002310 <HAL_DMA_Init+0x150>)
 80021da:	429a      	cmp	r2, r3
 80021dc:	d80f      	bhi.n	80021fe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	461a      	mov	r2, r3
 80021e4:	4b4b      	ldr	r3, [pc, #300]	; (8002314 <HAL_DMA_Init+0x154>)
 80021e6:	4413      	add	r3, r2
 80021e8:	4a4b      	ldr	r2, [pc, #300]	; (8002318 <HAL_DMA_Init+0x158>)
 80021ea:	fba2 2303 	umull	r2, r3, r2, r3
 80021ee:	091b      	lsrs	r3, r3, #4
 80021f0:	009a      	lsls	r2, r3, #2
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a48      	ldr	r2, [pc, #288]	; (800231c <HAL_DMA_Init+0x15c>)
 80021fa:	641a      	str	r2, [r3, #64]	; 0x40
 80021fc:	e00e      	b.n	800221c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	461a      	mov	r2, r3
 8002204:	4b46      	ldr	r3, [pc, #280]	; (8002320 <HAL_DMA_Init+0x160>)
 8002206:	4413      	add	r3, r2
 8002208:	4a43      	ldr	r2, [pc, #268]	; (8002318 <HAL_DMA_Init+0x158>)
 800220a:	fba2 2303 	umull	r2, r3, r2, r3
 800220e:	091b      	lsrs	r3, r3, #4
 8002210:	009a      	lsls	r2, r3, #2
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a42      	ldr	r2, [pc, #264]	; (8002324 <HAL_DMA_Init+0x164>)
 800221a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2202      	movs	r2, #2
 8002220:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002236:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002240:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800224c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002258:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a1b      	ldr	r3, [r3, #32]
 800225e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002260:	68fa      	ldr	r2, [r7, #12]
 8002262:	4313      	orrs	r3, r2
 8002264:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002276:	d039      	beq.n	80022ec <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227c:	4a27      	ldr	r2, [pc, #156]	; (800231c <HAL_DMA_Init+0x15c>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d11a      	bne.n	80022b8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002282:	4b29      	ldr	r3, [pc, #164]	; (8002328 <HAL_DMA_Init+0x168>)
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228a:	f003 031c 	and.w	r3, r3, #28
 800228e:	210f      	movs	r1, #15
 8002290:	fa01 f303 	lsl.w	r3, r1, r3
 8002294:	43db      	mvns	r3, r3
 8002296:	4924      	ldr	r1, [pc, #144]	; (8002328 <HAL_DMA_Init+0x168>)
 8002298:	4013      	ands	r3, r2
 800229a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800229c:	4b22      	ldr	r3, [pc, #136]	; (8002328 <HAL_DMA_Init+0x168>)
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6859      	ldr	r1, [r3, #4]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a8:	f003 031c 	and.w	r3, r3, #28
 80022ac:	fa01 f303 	lsl.w	r3, r1, r3
 80022b0:	491d      	ldr	r1, [pc, #116]	; (8002328 <HAL_DMA_Init+0x168>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	600b      	str	r3, [r1, #0]
 80022b6:	e019      	b.n	80022ec <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80022b8:	4b1c      	ldr	r3, [pc, #112]	; (800232c <HAL_DMA_Init+0x16c>)
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c0:	f003 031c 	and.w	r3, r3, #28
 80022c4:	210f      	movs	r1, #15
 80022c6:	fa01 f303 	lsl.w	r3, r1, r3
 80022ca:	43db      	mvns	r3, r3
 80022cc:	4917      	ldr	r1, [pc, #92]	; (800232c <HAL_DMA_Init+0x16c>)
 80022ce:	4013      	ands	r3, r2
 80022d0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80022d2:	4b16      	ldr	r3, [pc, #88]	; (800232c <HAL_DMA_Init+0x16c>)
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6859      	ldr	r1, [r3, #4]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022de:	f003 031c 	and.w	r3, r3, #28
 80022e2:	fa01 f303 	lsl.w	r3, r1, r3
 80022e6:	4911      	ldr	r1, [pc, #68]	; (800232c <HAL_DMA_Init+0x16c>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2201      	movs	r2, #1
 80022f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	3714      	adds	r7, #20
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	40020407 	.word	0x40020407
 8002314:	bffdfff8 	.word	0xbffdfff8
 8002318:	cccccccd 	.word	0xcccccccd
 800231c:	40020000 	.word	0x40020000
 8002320:	bffdfbf8 	.word	0xbffdfbf8
 8002324:	40020400 	.word	0x40020400
 8002328:	400200a8 	.word	0x400200a8
 800232c:	400204a8 	.word	0x400204a8

08002330 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234c:	f003 031c 	and.w	r3, r3, #28
 8002350:	2204      	movs	r2, #4
 8002352:	409a      	lsls	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	4013      	ands	r3, r2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d026      	beq.n	80023aa <HAL_DMA_IRQHandler+0x7a>
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	f003 0304 	and.w	r3, r3, #4
 8002362:	2b00      	cmp	r3, #0
 8002364:	d021      	beq.n	80023aa <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0320 	and.w	r3, r3, #32
 8002370:	2b00      	cmp	r3, #0
 8002372:	d107      	bne.n	8002384 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f022 0204 	bic.w	r2, r2, #4
 8002382:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002388:	f003 021c 	and.w	r2, r3, #28
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002390:	2104      	movs	r1, #4
 8002392:	fa01 f202 	lsl.w	r2, r1, r2
 8002396:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239c:	2b00      	cmp	r3, #0
 800239e:	d071      	beq.n	8002484 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80023a8:	e06c      	b.n	8002484 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ae:	f003 031c 	and.w	r3, r3, #28
 80023b2:	2202      	movs	r2, #2
 80023b4:	409a      	lsls	r2, r3
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	4013      	ands	r3, r2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d02e      	beq.n	800241c <HAL_DMA_IRQHandler+0xec>
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d029      	beq.n	800241c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0320 	and.w	r3, r3, #32
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d10b      	bne.n	80023ee <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 020a 	bic.w	r2, r2, #10
 80023e4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2201      	movs	r2, #1
 80023ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f2:	f003 021c 	and.w	r2, r3, #28
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fa:	2102      	movs	r1, #2
 80023fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002400:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240e:	2b00      	cmp	r3, #0
 8002410:	d038      	beq.n	8002484 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800241a:	e033      	b.n	8002484 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002420:	f003 031c 	and.w	r3, r3, #28
 8002424:	2208      	movs	r2, #8
 8002426:	409a      	lsls	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	4013      	ands	r3, r2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d02a      	beq.n	8002486 <HAL_DMA_IRQHandler+0x156>
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	f003 0308 	and.w	r3, r3, #8
 8002436:	2b00      	cmp	r3, #0
 8002438:	d025      	beq.n	8002486 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f022 020e 	bic.w	r2, r2, #14
 8002448:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244e:	f003 021c 	and.w	r2, r3, #28
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002456:	2101      	movs	r1, #1
 8002458:	fa01 f202 	lsl.w	r2, r1, r2
 800245c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2201      	movs	r2, #1
 8002462:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002478:	2b00      	cmp	r3, #0
 800247a:	d004      	beq.n	8002486 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002484:	bf00      	nop
 8002486:	bf00      	nop
}
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
	...

08002490 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002490:	b480      	push	{r7}
 8002492:	b087      	sub	sp, #28
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800249a:	2300      	movs	r3, #0
 800249c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800249e:	e17f      	b.n	80027a0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	2101      	movs	r1, #1
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	fa01 f303 	lsl.w	r3, r1, r3
 80024ac:	4013      	ands	r3, r2
 80024ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f000 8171 	beq.w	800279a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f003 0303 	and.w	r3, r3, #3
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d005      	beq.n	80024d0 <HAL_GPIO_Init+0x40>
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f003 0303 	and.w	r3, r3, #3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d130      	bne.n	8002532 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	2203      	movs	r2, #3
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	43db      	mvns	r3, r3
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	4013      	ands	r3, r2
 80024e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	68da      	ldr	r2, [r3, #12]
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002506:	2201      	movs	r2, #1
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	43db      	mvns	r3, r3
 8002510:	693a      	ldr	r2, [r7, #16]
 8002512:	4013      	ands	r3, r2
 8002514:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	091b      	lsrs	r3, r3, #4
 800251c:	f003 0201 	and.w	r2, r3, #1
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	fa02 f303 	lsl.w	r3, r2, r3
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	4313      	orrs	r3, r2
 800252a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f003 0303 	and.w	r3, r3, #3
 800253a:	2b03      	cmp	r3, #3
 800253c:	d118      	bne.n	8002570 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002542:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002544:	2201      	movs	r2, #1
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	43db      	mvns	r3, r3
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	4013      	ands	r3, r2
 8002552:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	08db      	lsrs	r3, r3, #3
 800255a:	f003 0201 	and.w	r2, r3, #1
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	693a      	ldr	r2, [r7, #16]
 8002566:	4313      	orrs	r3, r2
 8002568:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f003 0303 	and.w	r3, r3, #3
 8002578:	2b03      	cmp	r3, #3
 800257a:	d017      	beq.n	80025ac <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	2203      	movs	r2, #3
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	43db      	mvns	r3, r3
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	4013      	ands	r3, r2
 8002592:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	689a      	ldr	r2, [r3, #8]
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	693a      	ldr	r2, [r7, #16]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f003 0303 	and.w	r3, r3, #3
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d123      	bne.n	8002600 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	08da      	lsrs	r2, r3, #3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	3208      	adds	r2, #8
 80025c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	f003 0307 	and.w	r3, r3, #7
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	220f      	movs	r2, #15
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	43db      	mvns	r3, r3
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	4013      	ands	r3, r2
 80025da:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	691a      	ldr	r2, [r3, #16]
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	f003 0307 	and.w	r3, r3, #7
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	693a      	ldr	r2, [r7, #16]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	08da      	lsrs	r2, r3, #3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	3208      	adds	r2, #8
 80025fa:	6939      	ldr	r1, [r7, #16]
 80025fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	2203      	movs	r2, #3
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	43db      	mvns	r3, r3
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	4013      	ands	r3, r2
 8002616:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f003 0203 	and.w	r2, r3, #3
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	693a      	ldr	r2, [r7, #16]
 800262a:	4313      	orrs	r3, r2
 800262c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800263c:	2b00      	cmp	r3, #0
 800263e:	f000 80ac 	beq.w	800279a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002642:	4b5f      	ldr	r3, [pc, #380]	; (80027c0 <HAL_GPIO_Init+0x330>)
 8002644:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002646:	4a5e      	ldr	r2, [pc, #376]	; (80027c0 <HAL_GPIO_Init+0x330>)
 8002648:	f043 0301 	orr.w	r3, r3, #1
 800264c:	6613      	str	r3, [r2, #96]	; 0x60
 800264e:	4b5c      	ldr	r3, [pc, #368]	; (80027c0 <HAL_GPIO_Init+0x330>)
 8002650:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	60bb      	str	r3, [r7, #8]
 8002658:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800265a:	4a5a      	ldr	r2, [pc, #360]	; (80027c4 <HAL_GPIO_Init+0x334>)
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	089b      	lsrs	r3, r3, #2
 8002660:	3302      	adds	r3, #2
 8002662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002666:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	f003 0303 	and.w	r3, r3, #3
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	220f      	movs	r2, #15
 8002672:	fa02 f303 	lsl.w	r3, r2, r3
 8002676:	43db      	mvns	r3, r3
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	4013      	ands	r3, r2
 800267c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002684:	d025      	beq.n	80026d2 <HAL_GPIO_Init+0x242>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a4f      	ldr	r2, [pc, #316]	; (80027c8 <HAL_GPIO_Init+0x338>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d01f      	beq.n	80026ce <HAL_GPIO_Init+0x23e>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a4e      	ldr	r2, [pc, #312]	; (80027cc <HAL_GPIO_Init+0x33c>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d019      	beq.n	80026ca <HAL_GPIO_Init+0x23a>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a4d      	ldr	r2, [pc, #308]	; (80027d0 <HAL_GPIO_Init+0x340>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d013      	beq.n	80026c6 <HAL_GPIO_Init+0x236>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a4c      	ldr	r2, [pc, #304]	; (80027d4 <HAL_GPIO_Init+0x344>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d00d      	beq.n	80026c2 <HAL_GPIO_Init+0x232>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a4b      	ldr	r2, [pc, #300]	; (80027d8 <HAL_GPIO_Init+0x348>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d007      	beq.n	80026be <HAL_GPIO_Init+0x22e>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a4a      	ldr	r2, [pc, #296]	; (80027dc <HAL_GPIO_Init+0x34c>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d101      	bne.n	80026ba <HAL_GPIO_Init+0x22a>
 80026b6:	2306      	movs	r3, #6
 80026b8:	e00c      	b.n	80026d4 <HAL_GPIO_Init+0x244>
 80026ba:	2307      	movs	r3, #7
 80026bc:	e00a      	b.n	80026d4 <HAL_GPIO_Init+0x244>
 80026be:	2305      	movs	r3, #5
 80026c0:	e008      	b.n	80026d4 <HAL_GPIO_Init+0x244>
 80026c2:	2304      	movs	r3, #4
 80026c4:	e006      	b.n	80026d4 <HAL_GPIO_Init+0x244>
 80026c6:	2303      	movs	r3, #3
 80026c8:	e004      	b.n	80026d4 <HAL_GPIO_Init+0x244>
 80026ca:	2302      	movs	r3, #2
 80026cc:	e002      	b.n	80026d4 <HAL_GPIO_Init+0x244>
 80026ce:	2301      	movs	r3, #1
 80026d0:	e000      	b.n	80026d4 <HAL_GPIO_Init+0x244>
 80026d2:	2300      	movs	r3, #0
 80026d4:	697a      	ldr	r2, [r7, #20]
 80026d6:	f002 0203 	and.w	r2, r2, #3
 80026da:	0092      	lsls	r2, r2, #2
 80026dc:	4093      	lsls	r3, r2
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026e4:	4937      	ldr	r1, [pc, #220]	; (80027c4 <HAL_GPIO_Init+0x334>)
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	089b      	lsrs	r3, r3, #2
 80026ea:	3302      	adds	r3, #2
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026f2:	4b3b      	ldr	r3, [pc, #236]	; (80027e0 <HAL_GPIO_Init+0x350>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	43db      	mvns	r3, r3
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	4013      	ands	r3, r2
 8002700:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d003      	beq.n	8002716 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	4313      	orrs	r3, r2
 8002714:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002716:	4a32      	ldr	r2, [pc, #200]	; (80027e0 <HAL_GPIO_Init+0x350>)
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800271c:	4b30      	ldr	r3, [pc, #192]	; (80027e0 <HAL_GPIO_Init+0x350>)
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	43db      	mvns	r3, r3
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	4013      	ands	r3, r2
 800272a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d003      	beq.n	8002740 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	4313      	orrs	r3, r2
 800273e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002740:	4a27      	ldr	r2, [pc, #156]	; (80027e0 <HAL_GPIO_Init+0x350>)
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002746:	4b26      	ldr	r3, [pc, #152]	; (80027e0 <HAL_GPIO_Init+0x350>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	43db      	mvns	r3, r3
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	4013      	ands	r3, r2
 8002754:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d003      	beq.n	800276a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	4313      	orrs	r3, r2
 8002768:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800276a:	4a1d      	ldr	r2, [pc, #116]	; (80027e0 <HAL_GPIO_Init+0x350>)
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002770:	4b1b      	ldr	r3, [pc, #108]	; (80027e0 <HAL_GPIO_Init+0x350>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	43db      	mvns	r3, r3
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	4013      	ands	r3, r2
 800277e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d003      	beq.n	8002794 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	4313      	orrs	r3, r2
 8002792:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002794:	4a12      	ldr	r2, [pc, #72]	; (80027e0 <HAL_GPIO_Init+0x350>)
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	3301      	adds	r3, #1
 800279e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	fa22 f303 	lsr.w	r3, r2, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	f47f ae78 	bne.w	80024a0 <HAL_GPIO_Init+0x10>
  }
}
 80027b0:	bf00      	nop
 80027b2:	bf00      	nop
 80027b4:	371c      	adds	r7, #28
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	40021000 	.word	0x40021000
 80027c4:	40010000 	.word	0x40010000
 80027c8:	48000400 	.word	0x48000400
 80027cc:	48000800 	.word	0x48000800
 80027d0:	48000c00 	.word	0x48000c00
 80027d4:	48001000 	.word	0x48001000
 80027d8:	48001400 	.word	0x48001400
 80027dc:	48001800 	.word	0x48001800
 80027e0:	40010400 	.word	0x40010400

080027e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	460b      	mov	r3, r1
 80027ee:	807b      	strh	r3, [r7, #2]
 80027f0:	4613      	mov	r3, r2
 80027f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027f4:	787b      	ldrb	r3, [r7, #1]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027fa:	887a      	ldrh	r2, [r7, #2]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002800:	e002      	b.n	8002808 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002802:	887a      	ldrh	r2, [r7, #2]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002808:	bf00      	nop
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e08d      	b.n	8002942 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d106      	bne.n	8002840 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f7fe f85e 	bl	80008fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2224      	movs	r2, #36	; 0x24
 8002844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f022 0201 	bic.w	r2, r2, #1
 8002856:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685a      	ldr	r2, [r3, #4]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002864:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	689a      	ldr	r2, [r3, #8]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002874:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d107      	bne.n	800288e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	689a      	ldr	r2, [r3, #8]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800288a:	609a      	str	r2, [r3, #8]
 800288c:	e006      	b.n	800289c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	689a      	ldr	r2, [r3, #8]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800289a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d108      	bne.n	80028b6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	685a      	ldr	r2, [r3, #4]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028b2:	605a      	str	r2, [r3, #4]
 80028b4:	e007      	b.n	80028c6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	685a      	ldr	r2, [r3, #4]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	6812      	ldr	r2, [r2, #0]
 80028d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028d8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68da      	ldr	r2, [r3, #12]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	691a      	ldr	r2, [r3, #16]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	430a      	orrs	r2, r1
 8002902:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	69d9      	ldr	r1, [r3, #28]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a1a      	ldr	r2, [r3, #32]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	430a      	orrs	r2, r1
 8002912:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f042 0201 	orr.w	r2, r2, #1
 8002922:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2220      	movs	r2, #32
 800292e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800294a:	b480      	push	{r7}
 800294c:	b083      	sub	sp, #12
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
 8002952:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b20      	cmp	r3, #32
 800295e:	d138      	bne.n	80029d2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002966:	2b01      	cmp	r3, #1
 8002968:	d101      	bne.n	800296e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800296a:	2302      	movs	r3, #2
 800296c:	e032      	b.n	80029d4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2201      	movs	r2, #1
 8002972:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2224      	movs	r2, #36	; 0x24
 800297a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f022 0201 	bic.w	r2, r2, #1
 800298c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800299c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	6819      	ldr	r1, [r3, #0]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	683a      	ldr	r2, [r7, #0]
 80029aa:	430a      	orrs	r2, r1
 80029ac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f042 0201 	orr.w	r2, r2, #1
 80029bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2220      	movs	r2, #32
 80029c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029ce:	2300      	movs	r3, #0
 80029d0:	e000      	b.n	80029d4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80029d2:	2302      	movs	r3, #2
  }
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b20      	cmp	r3, #32
 80029f4:	d139      	bne.n	8002a6a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d101      	bne.n	8002a04 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002a00:	2302      	movs	r3, #2
 8002a02:	e033      	b.n	8002a6c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2224      	movs	r2, #36	; 0x24
 8002a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f022 0201 	bic.w	r2, r2, #1
 8002a22:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a32:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	021b      	lsls	r3, r3, #8
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f042 0201 	orr.w	r2, r2, #1
 8002a54:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2220      	movs	r2, #32
 8002a5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a66:	2300      	movs	r3, #0
 8002a68:	e000      	b.n	8002a6c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a6a:	2302      	movs	r3, #2
  }
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3714      	adds	r7, #20
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <HAL_LCD_Init>:
  * @note   This function can be used only when the LCD is disabled.
  * @param hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Init(LCD_HandleTypeDef *hlcd)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t counter;
  HAL_StatusTypeDef status;

  /* Check the LCD handle allocation */
  if (hlcd == NULL)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d101      	bne.n	8002a8a <HAL_LCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e0af      	b.n	8002bea <HAL_LCD_Init+0x172>
  assert_param(IS_LCD_CONTRAST(hlcd->Init.Contrast));
  assert_param(IS_LCD_BLINK_FREQUENCY(hlcd->Init.BlinkFrequency));
  assert_param(IS_LCD_BLINK_MODE(hlcd->Init.BlinkMode));
  assert_param(IS_LCD_MUX_SEGMENT(hlcd->Init.MuxSegment));

  if (hlcd->State == HAL_LCD_STATE_RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d106      	bne.n	8002aa4 <HAL_LCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hlcd->Lock = HAL_UNLOCKED;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize the low level hardware (MSP) */
    HAL_LCD_MspInit(hlcd);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f7fd ffc2 	bl	8000a28 <HAL_LCD_MspInit>
  }

  hlcd->State = HAL_LCD_STATE_BUSY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable the peripheral */
  __HAL_LCD_DISABLE(hlcd);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f022 0201 	bic.w	r2, r2, #1
 8002aba:	601a      	str	r2, [r3, #0]

  /* Clear the LCD_RAM registers and enable the display request by setting the UDR bit
     in the LCD_SR register */
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8002abc:	2300      	movs	r3, #0
 8002abe:	617b      	str	r3, [r7, #20]
 8002ac0:	e00a      	b.n	8002ad8 <HAL_LCD_Init+0x60>
  {
    hlcd->Instance->RAM[counter] = 0;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	3304      	adds	r3, #4
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	4413      	add	r3, r2
 8002ace:	2200      	movs	r2, #0
 8002ad0:	605a      	str	r2, [r3, #4]
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	617b      	str	r3, [r7, #20]
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	2b0f      	cmp	r3, #15
 8002adc:	d9f1      	bls.n	8002ac2 <HAL_LCD_Init+0x4a>
  }
  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f042 0204 	orr.w	r2, r2, #4
 8002aec:	609a      	str	r2, [r3, #8]
     Set BLINKF[2:0] bits according to hlcd->Init.BlinkFrequency value
     Set DEAD[2:0] bits according to hlcd->Init.DeadTime value
     Set PON[2:0] bits according to hlcd->Init.PulseOnDuration value
     Set CC[2:0] bits according to hlcd->Init.Contrast value
     Set HD bit according to hlcd->Init.HighDrive value */
  MODIFY_REG(hlcd->Instance->FCR, \
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	685a      	ldr	r2, [r3, #4]
 8002af4:	4b3f      	ldr	r3, [pc, #252]	; (8002bf4 <HAL_LCD_Init+0x17c>)
 8002af6:	4013      	ands	r3, r2
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6851      	ldr	r1, [r2, #4]
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	6892      	ldr	r2, [r2, #8]
 8002b00:	4311      	orrs	r1, r2
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002b06:	4311      	orrs	r1, r2
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002b0c:	4311      	orrs	r1, r2
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	69d2      	ldr	r2, [r2, #28]
 8002b12:	4311      	orrs	r1, r2
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	6a12      	ldr	r2, [r2, #32]
 8002b18:	4311      	orrs	r1, r2
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	6992      	ldr	r2, [r2, #24]
 8002b1e:	4311      	orrs	r1, r2
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b24:	4311      	orrs	r1, r2
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	6812      	ldr	r2, [r2, #0]
 8002b2a:	430b      	orrs	r3, r1
 8002b2c:	6053      	str	r3, [r2, #4]
              hlcd->Init.DeadTime | hlcd->Init.PulseOnDuration | hlcd->Init.Contrast | hlcd->Init.HighDrive));

  /* Wait until LCD Frame Control Register Synchronization flag (FCRSF) is set in the LCD_SR register
     This bit is set by hardware each time the LCD_FCR register is updated in the LCDCLK
     domain. It is cleared by hardware when writing to the LCD_FCR register.*/
  status = LCD_WaitForSynchro(hlcd);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 f862 	bl	8002bf8 <LCD_WaitForSynchro>
 8002b34:	4603      	mov	r3, r0
 8002b36:	74fb      	strb	r3, [r7, #19]
  if (status != HAL_OK)
 8002b38:	7cfb      	ldrb	r3, [r7, #19]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <HAL_LCD_Init+0xca>
  {
    return status;
 8002b3e:	7cfb      	ldrb	r3, [r7, #19]
 8002b40:	e053      	b.n	8002bea <HAL_LCD_Init+0x172>
  /* Configure the LCD Duty, Bias, Voltage Source, Dead Time, Pulse On Duration and Contrast:
     Set DUTY[2:0] bits according to hlcd->Init.Duty value
     Set BIAS[1:0] bits according to hlcd->Init.Bias value
     Set VSEL bit according to hlcd->Init.VoltageSource value
     Set MUX_SEG bit according to hlcd->Init.MuxSegment value */
  MODIFY_REG(hlcd->Instance->CR, \
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f023 01fe 	bic.w	r1, r3, #254	; 0xfe
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	68da      	ldr	r2, [r3, #12]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	431a      	orrs	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b60:	431a      	orrs	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	430a      	orrs	r2, r1
 8002b68:	601a      	str	r2, [r3, #0]
             (LCD_CR_DUTY | LCD_CR_BIAS | LCD_CR_VSEL | LCD_CR_MUX_SEG), \
             (hlcd->Init.Duty | hlcd->Init.Bias | hlcd->Init.VoltageSource | hlcd->Init.MuxSegment));

  /* Enable the peripheral */
  __HAL_LCD_ENABLE(hlcd);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f042 0201 	orr.w	r2, r2, #1
 8002b78:	601a      	str	r2, [r3, #0]

  /* Get timeout */
  tickstart = HAL_GetTick();
 8002b7a:	f7ff f9df 	bl	8001f3c <HAL_GetTick>
 8002b7e:	60f8      	str	r0, [r7, #12]

  /* Wait Until the LCD is enabled */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8002b80:	e00c      	b.n	8002b9c <HAL_LCD_Init+0x124>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8002b82:	f7ff f9db 	bl	8001f3c <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b90:	d904      	bls.n	8002b9c <HAL_LCD_Init+0x124>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_ENS;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2208      	movs	r2, #8
 8002b96:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e026      	b.n	8002bea <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d1eb      	bne.n	8002b82 <HAL_LCD_Init+0x10a>
    }
  }

  /* Get timeout */
  tickstart = HAL_GetTick();
 8002baa:	f7ff f9c7 	bl	8001f3c <HAL_GetTick>
 8002bae:	60f8      	str	r0, [r7, #12]

  /*!< Wait Until the LCD Booster is ready */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8002bb0:	e00c      	b.n	8002bcc <HAL_LCD_Init+0x154>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8002bb2:	f7ff f9c3 	bl	8001f3c <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bc0:	d904      	bls.n	8002bcc <HAL_LCD_Init+0x154>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2210      	movs	r2, #16
 8002bc6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e00e      	b.n	8002bea <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f003 0310 	and.w	r3, r3, #16
 8002bd6:	2b10      	cmp	r3, #16
 8002bd8:	d1eb      	bne.n	8002bb2 <HAL_LCD_Init+0x13a>
    }
  }

  /* Initialize the LCD state */
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	639a      	str	r2, [r3, #56]	; 0x38
  hlcd->State = HAL_LCD_STATE_READY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return status;
 8002be8:	7cfb      	ldrb	r3, [r7, #19]
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3718      	adds	r7, #24
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	fc00000e 	.word	0xfc00000e

08002bf8 <LCD_WaitForSynchro>:
  * @brief  Wait until the LCD FCR register is synchronized in the LCDCLK domain.
  *   This function must be called after any write operation to LCD_FCR register.
  * @retval None
  */
HAL_StatusTypeDef LCD_WaitForSynchro(LCD_HandleTypeDef *hlcd)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 8002c00:	f7ff f99c 	bl	8001f3c <HAL_GetTick>
 8002c04:	60f8      	str	r0, [r7, #12]

  /* Loop until FCRSF flag is set */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8002c06:	e00c      	b.n	8002c22 <LCD_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8002c08:	f7ff f998 	bl	8001f3c <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c16:	d904      	bls.n	8002c22 <LCD_WaitForSynchro+0x2a>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e007      	b.n	8002c32 <LCD_WaitForSynchro+0x3a>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f003 0320 	and.w	r3, r3, #32
 8002c2c:	2b20      	cmp	r3, #32
 8002c2e:	d1eb      	bne.n	8002c08 <LCD_WaitForSynchro+0x10>
    }
  }

  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3710      	adds	r7, #16
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
	...

08002c3c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c40:	4b05      	ldr	r3, [pc, #20]	; (8002c58 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a04      	ldr	r2, [pc, #16]	; (8002c58 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c4a:	6013      	str	r3, [r2, #0]
}
 8002c4c:	bf00      	nop
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	40007000 	.word	0x40007000

08002c5c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002c60:	4b04      	ldr	r3, [pc, #16]	; (8002c74 <HAL_PWREx_GetVoltageRange+0x18>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	40007000 	.word	0x40007000

08002c78 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b085      	sub	sp, #20
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c86:	d130      	bne.n	8002cea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c88:	4b23      	ldr	r3, [pc, #140]	; (8002d18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c94:	d038      	beq.n	8002d08 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c96:	4b20      	ldr	r3, [pc, #128]	; (8002d18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c9e:	4a1e      	ldr	r2, [pc, #120]	; (8002d18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ca0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ca4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ca6:	4b1d      	ldr	r3, [pc, #116]	; (8002d1c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2232      	movs	r2, #50	; 0x32
 8002cac:	fb02 f303 	mul.w	r3, r2, r3
 8002cb0:	4a1b      	ldr	r2, [pc, #108]	; (8002d20 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb6:	0c9b      	lsrs	r3, r3, #18
 8002cb8:	3301      	adds	r3, #1
 8002cba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cbc:	e002      	b.n	8002cc4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cc4:	4b14      	ldr	r3, [pc, #80]	; (8002d18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cc6:	695b      	ldr	r3, [r3, #20]
 8002cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ccc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cd0:	d102      	bne.n	8002cd8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d1f2      	bne.n	8002cbe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002cd8:	4b0f      	ldr	r3, [pc, #60]	; (8002d18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cda:	695b      	ldr	r3, [r3, #20]
 8002cdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ce0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ce4:	d110      	bne.n	8002d08 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e00f      	b.n	8002d0a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002cea:	4b0b      	ldr	r3, [pc, #44]	; (8002d18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002cf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cf6:	d007      	beq.n	8002d08 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002cf8:	4b07      	ldr	r3, [pc, #28]	; (8002d18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d00:	4a05      	ldr	r2, [pc, #20]	; (8002d18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d06:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3714      	adds	r7, #20
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	40007000 	.word	0x40007000
 8002d1c:	20000000 	.word	0x20000000
 8002d20:	431bde83 	.word	0x431bde83

08002d24 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af02      	add	r7, sp, #8
 8002d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002d2c:	f7ff f906 	bl	8001f3c <HAL_GetTick>
 8002d30:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d101      	bne.n	8002d3c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e063      	b.n	8002e04 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d10b      	bne.n	8002d60 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f7fe f843 	bl	8000ddc <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002d56:	f241 3188 	movw	r1, #5000	; 0x1388
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 f858 	bl	8002e10 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	021a      	lsls	r2, r3, #8
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	430a      	orrs	r2, r1
 8002d78:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7e:	9300      	str	r3, [sp, #0]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	2120      	movs	r1, #32
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 f850 	bl	8002e2c <QSPI_WaitFlagStateUntilTimeout>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002d90:	7afb      	ldrb	r3, [r7, #11]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d131      	bne.n	8002dfa <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002da0:	f023 0310 	bic.w	r3, r3, #16
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	6852      	ldr	r2, [r2, #4]
 8002da8:	0611      	lsls	r1, r2, #24
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	68d2      	ldr	r2, [r2, #12]
 8002dae:	4311      	orrs	r1, r2
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	6812      	ldr	r2, [r2, #0]
 8002db4:	430b      	orrs	r3, r1
 8002db6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	685a      	ldr	r2, [r3, #4]
 8002dbe:	4b13      	ldr	r3, [pc, #76]	; (8002e0c <HAL_QSPI_Init+0xe8>)
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	6912      	ldr	r2, [r2, #16]
 8002dc6:	0411      	lsls	r1, r2, #16
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	6952      	ldr	r2, [r2, #20]
 8002dcc:	4311      	orrs	r1, r2
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	6992      	ldr	r2, [r2, #24]
 8002dd2:	4311      	orrs	r1, r2
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	6812      	ldr	r2, [r2, #0]
 8002dd8:	430b      	orrs	r3, r1
 8002dda:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f042 0201 	orr.w	r2, r2, #1
 8002dea:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2201      	movs	r2, #1
 8002df6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8002e02:	7afb      	ldrb	r3, [r7, #11]
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3710      	adds	r7, #16
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	ffe0f8fe 	.word	0xffe0f8fe

08002e10 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	603b      	str	r3, [r7, #0]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002e3c:	e01a      	b.n	8002e74 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e44:	d016      	beq.n	8002e74 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e46:	f7ff f879 	bl	8001f3c <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d302      	bcc.n	8002e5c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d10b      	bne.n	8002e74 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2204      	movs	r2, #4
 8002e60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e68:	f043 0201 	orr.w	r2, r3, #1
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e00e      	b.n	8002e92 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	689a      	ldr	r2, [r3, #8]
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	bf14      	ite	ne
 8002e82:	2301      	movne	r3, #1
 8002e84:	2300      	moveq	r3, #0
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	461a      	mov	r2, r3
 8002e8a:	79fb      	ldrb	r3, [r7, #7]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d1d6      	bne.n	8002e3e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3710      	adds	r7, #16
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
	...

08002e9c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b088      	sub	sp, #32
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d101      	bne.n	8002eae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e3ca      	b.n	8003644 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002eae:	4b97      	ldr	r3, [pc, #604]	; (800310c <HAL_RCC_OscConfig+0x270>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f003 030c 	and.w	r3, r3, #12
 8002eb6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002eb8:	4b94      	ldr	r3, [pc, #592]	; (800310c <HAL_RCC_OscConfig+0x270>)
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	f003 0303 	and.w	r3, r3, #3
 8002ec0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0310 	and.w	r3, r3, #16
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f000 80e4 	beq.w	8003098 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d007      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x4a>
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	2b0c      	cmp	r3, #12
 8002eda:	f040 808b 	bne.w	8002ff4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	f040 8087 	bne.w	8002ff4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ee6:	4b89      	ldr	r3, [pc, #548]	; (800310c <HAL_RCC_OscConfig+0x270>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d005      	beq.n	8002efe <HAL_RCC_OscConfig+0x62>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	699b      	ldr	r3, [r3, #24]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d101      	bne.n	8002efe <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e3a2      	b.n	8003644 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a1a      	ldr	r2, [r3, #32]
 8002f02:	4b82      	ldr	r3, [pc, #520]	; (800310c <HAL_RCC_OscConfig+0x270>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0308 	and.w	r3, r3, #8
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d004      	beq.n	8002f18 <HAL_RCC_OscConfig+0x7c>
 8002f0e:	4b7f      	ldr	r3, [pc, #508]	; (800310c <HAL_RCC_OscConfig+0x270>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f16:	e005      	b.n	8002f24 <HAL_RCC_OscConfig+0x88>
 8002f18:	4b7c      	ldr	r3, [pc, #496]	; (800310c <HAL_RCC_OscConfig+0x270>)
 8002f1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f1e:	091b      	lsrs	r3, r3, #4
 8002f20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d223      	bcs.n	8002f70 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a1b      	ldr	r3, [r3, #32]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f000 fd55 	bl	80039dc <RCC_SetFlashLatencyFromMSIRange>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d001      	beq.n	8002f3c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e383      	b.n	8003644 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f3c:	4b73      	ldr	r3, [pc, #460]	; (800310c <HAL_RCC_OscConfig+0x270>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a72      	ldr	r2, [pc, #456]	; (800310c <HAL_RCC_OscConfig+0x270>)
 8002f42:	f043 0308 	orr.w	r3, r3, #8
 8002f46:	6013      	str	r3, [r2, #0]
 8002f48:	4b70      	ldr	r3, [pc, #448]	; (800310c <HAL_RCC_OscConfig+0x270>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a1b      	ldr	r3, [r3, #32]
 8002f54:	496d      	ldr	r1, [pc, #436]	; (800310c <HAL_RCC_OscConfig+0x270>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f5a:	4b6c      	ldr	r3, [pc, #432]	; (800310c <HAL_RCC_OscConfig+0x270>)
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	69db      	ldr	r3, [r3, #28]
 8002f66:	021b      	lsls	r3, r3, #8
 8002f68:	4968      	ldr	r1, [pc, #416]	; (800310c <HAL_RCC_OscConfig+0x270>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	604b      	str	r3, [r1, #4]
 8002f6e:	e025      	b.n	8002fbc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f70:	4b66      	ldr	r3, [pc, #408]	; (800310c <HAL_RCC_OscConfig+0x270>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a65      	ldr	r2, [pc, #404]	; (800310c <HAL_RCC_OscConfig+0x270>)
 8002f76:	f043 0308 	orr.w	r3, r3, #8
 8002f7a:	6013      	str	r3, [r2, #0]
 8002f7c:	4b63      	ldr	r3, [pc, #396]	; (800310c <HAL_RCC_OscConfig+0x270>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a1b      	ldr	r3, [r3, #32]
 8002f88:	4960      	ldr	r1, [pc, #384]	; (800310c <HAL_RCC_OscConfig+0x270>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f8e:	4b5f      	ldr	r3, [pc, #380]	; (800310c <HAL_RCC_OscConfig+0x270>)
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	69db      	ldr	r3, [r3, #28]
 8002f9a:	021b      	lsls	r3, r3, #8
 8002f9c:	495b      	ldr	r1, [pc, #364]	; (800310c <HAL_RCC_OscConfig+0x270>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d109      	bne.n	8002fbc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f000 fd15 	bl	80039dc <RCC_SetFlashLatencyFromMSIRange>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d001      	beq.n	8002fbc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e343      	b.n	8003644 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fbc:	f000 fc4a 	bl	8003854 <HAL_RCC_GetSysClockFreq>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	4b52      	ldr	r3, [pc, #328]	; (800310c <HAL_RCC_OscConfig+0x270>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	091b      	lsrs	r3, r3, #4
 8002fc8:	f003 030f 	and.w	r3, r3, #15
 8002fcc:	4950      	ldr	r1, [pc, #320]	; (8003110 <HAL_RCC_OscConfig+0x274>)
 8002fce:	5ccb      	ldrb	r3, [r1, r3]
 8002fd0:	f003 031f 	and.w	r3, r3, #31
 8002fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8002fd8:	4a4e      	ldr	r2, [pc, #312]	; (8003114 <HAL_RCC_OscConfig+0x278>)
 8002fda:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002fdc:	4b4e      	ldr	r3, [pc, #312]	; (8003118 <HAL_RCC_OscConfig+0x27c>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7fe ff5b 	bl	8001e9c <HAL_InitTick>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002fea:	7bfb      	ldrb	r3, [r7, #15]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d052      	beq.n	8003096 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002ff0:	7bfb      	ldrb	r3, [r7, #15]
 8002ff2:	e327      	b.n	8003644 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	699b      	ldr	r3, [r3, #24]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d032      	beq.n	8003062 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ffc:	4b43      	ldr	r3, [pc, #268]	; (800310c <HAL_RCC_OscConfig+0x270>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a42      	ldr	r2, [pc, #264]	; (800310c <HAL_RCC_OscConfig+0x270>)
 8003002:	f043 0301 	orr.w	r3, r3, #1
 8003006:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003008:	f7fe ff98 	bl	8001f3c <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003010:	f7fe ff94 	bl	8001f3c <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e310      	b.n	8003644 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003022:	4b3a      	ldr	r3, [pc, #232]	; (800310c <HAL_RCC_OscConfig+0x270>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d0f0      	beq.n	8003010 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800302e:	4b37      	ldr	r3, [pc, #220]	; (800310c <HAL_RCC_OscConfig+0x270>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a36      	ldr	r2, [pc, #216]	; (800310c <HAL_RCC_OscConfig+0x270>)
 8003034:	f043 0308 	orr.w	r3, r3, #8
 8003038:	6013      	str	r3, [r2, #0]
 800303a:	4b34      	ldr	r3, [pc, #208]	; (800310c <HAL_RCC_OscConfig+0x270>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a1b      	ldr	r3, [r3, #32]
 8003046:	4931      	ldr	r1, [pc, #196]	; (800310c <HAL_RCC_OscConfig+0x270>)
 8003048:	4313      	orrs	r3, r2
 800304a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800304c:	4b2f      	ldr	r3, [pc, #188]	; (800310c <HAL_RCC_OscConfig+0x270>)
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	69db      	ldr	r3, [r3, #28]
 8003058:	021b      	lsls	r3, r3, #8
 800305a:	492c      	ldr	r1, [pc, #176]	; (800310c <HAL_RCC_OscConfig+0x270>)
 800305c:	4313      	orrs	r3, r2
 800305e:	604b      	str	r3, [r1, #4]
 8003060:	e01a      	b.n	8003098 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003062:	4b2a      	ldr	r3, [pc, #168]	; (800310c <HAL_RCC_OscConfig+0x270>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a29      	ldr	r2, [pc, #164]	; (800310c <HAL_RCC_OscConfig+0x270>)
 8003068:	f023 0301 	bic.w	r3, r3, #1
 800306c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800306e:	f7fe ff65 	bl	8001f3c <HAL_GetTick>
 8003072:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003074:	e008      	b.n	8003088 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003076:	f7fe ff61 	bl	8001f3c <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	2b02      	cmp	r3, #2
 8003082:	d901      	bls.n	8003088 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e2dd      	b.n	8003644 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003088:	4b20      	ldr	r3, [pc, #128]	; (800310c <HAL_RCC_OscConfig+0x270>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d1f0      	bne.n	8003076 <HAL_RCC_OscConfig+0x1da>
 8003094:	e000      	b.n	8003098 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003096:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0301 	and.w	r3, r3, #1
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d074      	beq.n	800318e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	2b08      	cmp	r3, #8
 80030a8:	d005      	beq.n	80030b6 <HAL_RCC_OscConfig+0x21a>
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	2b0c      	cmp	r3, #12
 80030ae:	d10e      	bne.n	80030ce <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	2b03      	cmp	r3, #3
 80030b4:	d10b      	bne.n	80030ce <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030b6:	4b15      	ldr	r3, [pc, #84]	; (800310c <HAL_RCC_OscConfig+0x270>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d064      	beq.n	800318c <HAL_RCC_OscConfig+0x2f0>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d160      	bne.n	800318c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e2ba      	b.n	8003644 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030d6:	d106      	bne.n	80030e6 <HAL_RCC_OscConfig+0x24a>
 80030d8:	4b0c      	ldr	r3, [pc, #48]	; (800310c <HAL_RCC_OscConfig+0x270>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a0b      	ldr	r2, [pc, #44]	; (800310c <HAL_RCC_OscConfig+0x270>)
 80030de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030e2:	6013      	str	r3, [r2, #0]
 80030e4:	e026      	b.n	8003134 <HAL_RCC_OscConfig+0x298>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030ee:	d115      	bne.n	800311c <HAL_RCC_OscConfig+0x280>
 80030f0:	4b06      	ldr	r3, [pc, #24]	; (800310c <HAL_RCC_OscConfig+0x270>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a05      	ldr	r2, [pc, #20]	; (800310c <HAL_RCC_OscConfig+0x270>)
 80030f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030fa:	6013      	str	r3, [r2, #0]
 80030fc:	4b03      	ldr	r3, [pc, #12]	; (800310c <HAL_RCC_OscConfig+0x270>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a02      	ldr	r2, [pc, #8]	; (800310c <HAL_RCC_OscConfig+0x270>)
 8003102:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003106:	6013      	str	r3, [r2, #0]
 8003108:	e014      	b.n	8003134 <HAL_RCC_OscConfig+0x298>
 800310a:	bf00      	nop
 800310c:	40021000 	.word	0x40021000
 8003110:	08006f98 	.word	0x08006f98
 8003114:	20000000 	.word	0x20000000
 8003118:	20000038 	.word	0x20000038
 800311c:	4ba0      	ldr	r3, [pc, #640]	; (80033a0 <HAL_RCC_OscConfig+0x504>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a9f      	ldr	r2, [pc, #636]	; (80033a0 <HAL_RCC_OscConfig+0x504>)
 8003122:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003126:	6013      	str	r3, [r2, #0]
 8003128:	4b9d      	ldr	r3, [pc, #628]	; (80033a0 <HAL_RCC_OscConfig+0x504>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a9c      	ldr	r2, [pc, #624]	; (80033a0 <HAL_RCC_OscConfig+0x504>)
 800312e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003132:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d013      	beq.n	8003164 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800313c:	f7fe fefe 	bl	8001f3c <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003144:	f7fe fefa 	bl	8001f3c <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b64      	cmp	r3, #100	; 0x64
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e276      	b.n	8003644 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003156:	4b92      	ldr	r3, [pc, #584]	; (80033a0 <HAL_RCC_OscConfig+0x504>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d0f0      	beq.n	8003144 <HAL_RCC_OscConfig+0x2a8>
 8003162:	e014      	b.n	800318e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003164:	f7fe feea 	bl	8001f3c <HAL_GetTick>
 8003168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800316a:	e008      	b.n	800317e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800316c:	f7fe fee6 	bl	8001f3c <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b64      	cmp	r3, #100	; 0x64
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e262      	b.n	8003644 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800317e:	4b88      	ldr	r3, [pc, #544]	; (80033a0 <HAL_RCC_OscConfig+0x504>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1f0      	bne.n	800316c <HAL_RCC_OscConfig+0x2d0>
 800318a:	e000      	b.n	800318e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800318c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d060      	beq.n	800325c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	2b04      	cmp	r3, #4
 800319e:	d005      	beq.n	80031ac <HAL_RCC_OscConfig+0x310>
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	2b0c      	cmp	r3, #12
 80031a4:	d119      	bne.n	80031da <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d116      	bne.n	80031da <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031ac:	4b7c      	ldr	r3, [pc, #496]	; (80033a0 <HAL_RCC_OscConfig+0x504>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d005      	beq.n	80031c4 <HAL_RCC_OscConfig+0x328>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d101      	bne.n	80031c4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e23f      	b.n	8003644 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031c4:	4b76      	ldr	r3, [pc, #472]	; (80033a0 <HAL_RCC_OscConfig+0x504>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	061b      	lsls	r3, r3, #24
 80031d2:	4973      	ldr	r1, [pc, #460]	; (80033a0 <HAL_RCC_OscConfig+0x504>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031d8:	e040      	b.n	800325c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d023      	beq.n	800322a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031e2:	4b6f      	ldr	r3, [pc, #444]	; (80033a0 <HAL_RCC_OscConfig+0x504>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a6e      	ldr	r2, [pc, #440]	; (80033a0 <HAL_RCC_OscConfig+0x504>)
 80031e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ee:	f7fe fea5 	bl	8001f3c <HAL_GetTick>
 80031f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031f4:	e008      	b.n	8003208 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031f6:	f7fe fea1 	bl	8001f3c <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	2b02      	cmp	r3, #2
 8003202:	d901      	bls.n	8003208 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e21d      	b.n	8003644 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003208:	4b65      	ldr	r3, [pc, #404]	; (80033a0 <HAL_RCC_OscConfig+0x504>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003210:	2b00      	cmp	r3, #0
 8003212:	d0f0      	beq.n	80031f6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003214:	4b62      	ldr	r3, [pc, #392]	; (80033a0 <HAL_RCC_OscConfig+0x504>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	061b      	lsls	r3, r3, #24
 8003222:	495f      	ldr	r1, [pc, #380]	; (80033a0 <HAL_RCC_OscConfig+0x504>)
 8003224:	4313      	orrs	r3, r2
 8003226:	604b      	str	r3, [r1, #4]
 8003228:	e018      	b.n	800325c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800322a:	4b5d      	ldr	r3, [pc, #372]	; (80033a0 <HAL_RCC_OscConfig+0x504>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a5c      	ldr	r2, [pc, #368]	; (80033a0 <HAL_RCC_OscConfig+0x504>)
 8003230:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003234:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003236:	f7fe fe81 	bl	8001f3c <HAL_GetTick>
 800323a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800323c:	e008      	b.n	8003250 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800323e:	f7fe fe7d 	bl	8001f3c <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	2b02      	cmp	r3, #2
 800324a:	d901      	bls.n	8003250 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e1f9      	b.n	8003644 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003250:	4b53      	ldr	r3, [pc, #332]	; (80033a0 <HAL_RCC_OscConfig+0x504>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003258:	2b00      	cmp	r3, #0
 800325a:	d1f0      	bne.n	800323e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0308 	and.w	r3, r3, #8
 8003264:	2b00      	cmp	r3, #0
 8003266:	d03c      	beq.n	80032e2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	695b      	ldr	r3, [r3, #20]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d01c      	beq.n	80032aa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003270:	4b4b      	ldr	r3, [pc, #300]	; (80033a0 <HAL_RCC_OscConfig+0x504>)
 8003272:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003276:	4a4a      	ldr	r2, [pc, #296]	; (80033a0 <HAL_RCC_OscConfig+0x504>)
 8003278:	f043 0301 	orr.w	r3, r3, #1
 800327c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003280:	f7fe fe5c 	bl	8001f3c <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003286:	e008      	b.n	800329a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003288:	f7fe fe58 	bl	8001f3c <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b02      	cmp	r3, #2
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e1d4      	b.n	8003644 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800329a:	4b41      	ldr	r3, [pc, #260]	; (80033a0 <HAL_RCC_OscConfig+0x504>)
 800329c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d0ef      	beq.n	8003288 <HAL_RCC_OscConfig+0x3ec>
 80032a8:	e01b      	b.n	80032e2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032aa:	4b3d      	ldr	r3, [pc, #244]	; (80033a0 <HAL_RCC_OscConfig+0x504>)
 80032ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032b0:	4a3b      	ldr	r2, [pc, #236]	; (80033a0 <HAL_RCC_OscConfig+0x504>)
 80032b2:	f023 0301 	bic.w	r3, r3, #1
 80032b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ba:	f7fe fe3f 	bl	8001f3c <HAL_GetTick>
 80032be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032c0:	e008      	b.n	80032d4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032c2:	f7fe fe3b 	bl	8001f3c <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e1b7      	b.n	8003644 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032d4:	4b32      	ldr	r3, [pc, #200]	; (80033a0 <HAL_RCC_OscConfig+0x504>)
 80032d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1ef      	bne.n	80032c2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0304 	and.w	r3, r3, #4
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f000 80a6 	beq.w	800343c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032f0:	2300      	movs	r3, #0
 80032f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80032f4:	4b2a      	ldr	r3, [pc, #168]	; (80033a0 <HAL_RCC_OscConfig+0x504>)
 80032f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d10d      	bne.n	800331c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003300:	4b27      	ldr	r3, [pc, #156]	; (80033a0 <HAL_RCC_OscConfig+0x504>)
 8003302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003304:	4a26      	ldr	r2, [pc, #152]	; (80033a0 <HAL_RCC_OscConfig+0x504>)
 8003306:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800330a:	6593      	str	r3, [r2, #88]	; 0x58
 800330c:	4b24      	ldr	r3, [pc, #144]	; (80033a0 <HAL_RCC_OscConfig+0x504>)
 800330e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003310:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003314:	60bb      	str	r3, [r7, #8]
 8003316:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003318:	2301      	movs	r3, #1
 800331a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800331c:	4b21      	ldr	r3, [pc, #132]	; (80033a4 <HAL_RCC_OscConfig+0x508>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003324:	2b00      	cmp	r3, #0
 8003326:	d118      	bne.n	800335a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003328:	4b1e      	ldr	r3, [pc, #120]	; (80033a4 <HAL_RCC_OscConfig+0x508>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a1d      	ldr	r2, [pc, #116]	; (80033a4 <HAL_RCC_OscConfig+0x508>)
 800332e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003332:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003334:	f7fe fe02 	bl	8001f3c <HAL_GetTick>
 8003338:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800333a:	e008      	b.n	800334e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800333c:	f7fe fdfe 	bl	8001f3c <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d901      	bls.n	800334e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e17a      	b.n	8003644 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800334e:	4b15      	ldr	r3, [pc, #84]	; (80033a4 <HAL_RCC_OscConfig+0x508>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003356:	2b00      	cmp	r3, #0
 8003358:	d0f0      	beq.n	800333c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	2b01      	cmp	r3, #1
 8003360:	d108      	bne.n	8003374 <HAL_RCC_OscConfig+0x4d8>
 8003362:	4b0f      	ldr	r3, [pc, #60]	; (80033a0 <HAL_RCC_OscConfig+0x504>)
 8003364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003368:	4a0d      	ldr	r2, [pc, #52]	; (80033a0 <HAL_RCC_OscConfig+0x504>)
 800336a:	f043 0301 	orr.w	r3, r3, #1
 800336e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003372:	e029      	b.n	80033c8 <HAL_RCC_OscConfig+0x52c>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	2b05      	cmp	r3, #5
 800337a:	d115      	bne.n	80033a8 <HAL_RCC_OscConfig+0x50c>
 800337c:	4b08      	ldr	r3, [pc, #32]	; (80033a0 <HAL_RCC_OscConfig+0x504>)
 800337e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003382:	4a07      	ldr	r2, [pc, #28]	; (80033a0 <HAL_RCC_OscConfig+0x504>)
 8003384:	f043 0304 	orr.w	r3, r3, #4
 8003388:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800338c:	4b04      	ldr	r3, [pc, #16]	; (80033a0 <HAL_RCC_OscConfig+0x504>)
 800338e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003392:	4a03      	ldr	r2, [pc, #12]	; (80033a0 <HAL_RCC_OscConfig+0x504>)
 8003394:	f043 0301 	orr.w	r3, r3, #1
 8003398:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800339c:	e014      	b.n	80033c8 <HAL_RCC_OscConfig+0x52c>
 800339e:	bf00      	nop
 80033a0:	40021000 	.word	0x40021000
 80033a4:	40007000 	.word	0x40007000
 80033a8:	4b9c      	ldr	r3, [pc, #624]	; (800361c <HAL_RCC_OscConfig+0x780>)
 80033aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ae:	4a9b      	ldr	r2, [pc, #620]	; (800361c <HAL_RCC_OscConfig+0x780>)
 80033b0:	f023 0301 	bic.w	r3, r3, #1
 80033b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033b8:	4b98      	ldr	r3, [pc, #608]	; (800361c <HAL_RCC_OscConfig+0x780>)
 80033ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033be:	4a97      	ldr	r2, [pc, #604]	; (800361c <HAL_RCC_OscConfig+0x780>)
 80033c0:	f023 0304 	bic.w	r3, r3, #4
 80033c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d016      	beq.n	80033fe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d0:	f7fe fdb4 	bl	8001f3c <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033d6:	e00a      	b.n	80033ee <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033d8:	f7fe fdb0 	bl	8001f3c <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d901      	bls.n	80033ee <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e12a      	b.n	8003644 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033ee:	4b8b      	ldr	r3, [pc, #556]	; (800361c <HAL_RCC_OscConfig+0x780>)
 80033f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f4:	f003 0302 	and.w	r3, r3, #2
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d0ed      	beq.n	80033d8 <HAL_RCC_OscConfig+0x53c>
 80033fc:	e015      	b.n	800342a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033fe:	f7fe fd9d 	bl	8001f3c <HAL_GetTick>
 8003402:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003404:	e00a      	b.n	800341c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003406:	f7fe fd99 	bl	8001f3c <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	f241 3288 	movw	r2, #5000	; 0x1388
 8003414:	4293      	cmp	r3, r2
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e113      	b.n	8003644 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800341c:	4b7f      	ldr	r3, [pc, #508]	; (800361c <HAL_RCC_OscConfig+0x780>)
 800341e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1ed      	bne.n	8003406 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800342a:	7ffb      	ldrb	r3, [r7, #31]
 800342c:	2b01      	cmp	r3, #1
 800342e:	d105      	bne.n	800343c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003430:	4b7a      	ldr	r3, [pc, #488]	; (800361c <HAL_RCC_OscConfig+0x780>)
 8003432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003434:	4a79      	ldr	r2, [pc, #484]	; (800361c <HAL_RCC_OscConfig+0x780>)
 8003436:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800343a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003440:	2b00      	cmp	r3, #0
 8003442:	f000 80fe 	beq.w	8003642 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344a:	2b02      	cmp	r3, #2
 800344c:	f040 80d0 	bne.w	80035f0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003450:	4b72      	ldr	r3, [pc, #456]	; (800361c <HAL_RCC_OscConfig+0x780>)
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	f003 0203 	and.w	r2, r3, #3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003460:	429a      	cmp	r2, r3
 8003462:	d130      	bne.n	80034c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346e:	3b01      	subs	r3, #1
 8003470:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003472:	429a      	cmp	r2, r3
 8003474:	d127      	bne.n	80034c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003480:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003482:	429a      	cmp	r2, r3
 8003484:	d11f      	bne.n	80034c6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003490:	2a07      	cmp	r2, #7
 8003492:	bf14      	ite	ne
 8003494:	2201      	movne	r2, #1
 8003496:	2200      	moveq	r2, #0
 8003498:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800349a:	4293      	cmp	r3, r2
 800349c:	d113      	bne.n	80034c6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a8:	085b      	lsrs	r3, r3, #1
 80034aa:	3b01      	subs	r3, #1
 80034ac:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d109      	bne.n	80034c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034bc:	085b      	lsrs	r3, r3, #1
 80034be:	3b01      	subs	r3, #1
 80034c0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d06e      	beq.n	80035a4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	2b0c      	cmp	r3, #12
 80034ca:	d069      	beq.n	80035a0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80034cc:	4b53      	ldr	r3, [pc, #332]	; (800361c <HAL_RCC_OscConfig+0x780>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d105      	bne.n	80034e4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80034d8:	4b50      	ldr	r3, [pc, #320]	; (800361c <HAL_RCC_OscConfig+0x780>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d001      	beq.n	80034e8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e0ad      	b.n	8003644 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80034e8:	4b4c      	ldr	r3, [pc, #304]	; (800361c <HAL_RCC_OscConfig+0x780>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a4b      	ldr	r2, [pc, #300]	; (800361c <HAL_RCC_OscConfig+0x780>)
 80034ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034f2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80034f4:	f7fe fd22 	bl	8001f3c <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034fa:	e008      	b.n	800350e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034fc:	f7fe fd1e 	bl	8001f3c <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e09a      	b.n	8003644 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800350e:	4b43      	ldr	r3, [pc, #268]	; (800361c <HAL_RCC_OscConfig+0x780>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1f0      	bne.n	80034fc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800351a:	4b40      	ldr	r3, [pc, #256]	; (800361c <HAL_RCC_OscConfig+0x780>)
 800351c:	68da      	ldr	r2, [r3, #12]
 800351e:	4b40      	ldr	r3, [pc, #256]	; (8003620 <HAL_RCC_OscConfig+0x784>)
 8003520:	4013      	ands	r3, r2
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800352a:	3a01      	subs	r2, #1
 800352c:	0112      	lsls	r2, r2, #4
 800352e:	4311      	orrs	r1, r2
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003534:	0212      	lsls	r2, r2, #8
 8003536:	4311      	orrs	r1, r2
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800353c:	0852      	lsrs	r2, r2, #1
 800353e:	3a01      	subs	r2, #1
 8003540:	0552      	lsls	r2, r2, #21
 8003542:	4311      	orrs	r1, r2
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003548:	0852      	lsrs	r2, r2, #1
 800354a:	3a01      	subs	r2, #1
 800354c:	0652      	lsls	r2, r2, #25
 800354e:	4311      	orrs	r1, r2
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003554:	0912      	lsrs	r2, r2, #4
 8003556:	0452      	lsls	r2, r2, #17
 8003558:	430a      	orrs	r2, r1
 800355a:	4930      	ldr	r1, [pc, #192]	; (800361c <HAL_RCC_OscConfig+0x780>)
 800355c:	4313      	orrs	r3, r2
 800355e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003560:	4b2e      	ldr	r3, [pc, #184]	; (800361c <HAL_RCC_OscConfig+0x780>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a2d      	ldr	r2, [pc, #180]	; (800361c <HAL_RCC_OscConfig+0x780>)
 8003566:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800356a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800356c:	4b2b      	ldr	r3, [pc, #172]	; (800361c <HAL_RCC_OscConfig+0x780>)
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	4a2a      	ldr	r2, [pc, #168]	; (800361c <HAL_RCC_OscConfig+0x780>)
 8003572:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003576:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003578:	f7fe fce0 	bl	8001f3c <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003580:	f7fe fcdc 	bl	8001f3c <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b02      	cmp	r3, #2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e058      	b.n	8003644 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003592:	4b22      	ldr	r3, [pc, #136]	; (800361c <HAL_RCC_OscConfig+0x780>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d0f0      	beq.n	8003580 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800359e:	e050      	b.n	8003642 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e04f      	b.n	8003644 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035a4:	4b1d      	ldr	r3, [pc, #116]	; (800361c <HAL_RCC_OscConfig+0x780>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d148      	bne.n	8003642 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80035b0:	4b1a      	ldr	r3, [pc, #104]	; (800361c <HAL_RCC_OscConfig+0x780>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a19      	ldr	r2, [pc, #100]	; (800361c <HAL_RCC_OscConfig+0x780>)
 80035b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035ba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035bc:	4b17      	ldr	r3, [pc, #92]	; (800361c <HAL_RCC_OscConfig+0x780>)
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	4a16      	ldr	r2, [pc, #88]	; (800361c <HAL_RCC_OscConfig+0x780>)
 80035c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035c6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80035c8:	f7fe fcb8 	bl	8001f3c <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ce:	e008      	b.n	80035e2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035d0:	f7fe fcb4 	bl	8001f3c <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e030      	b.n	8003644 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035e2:	4b0e      	ldr	r3, [pc, #56]	; (800361c <HAL_RCC_OscConfig+0x780>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d0f0      	beq.n	80035d0 <HAL_RCC_OscConfig+0x734>
 80035ee:	e028      	b.n	8003642 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	2b0c      	cmp	r3, #12
 80035f4:	d023      	beq.n	800363e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035f6:	4b09      	ldr	r3, [pc, #36]	; (800361c <HAL_RCC_OscConfig+0x780>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a08      	ldr	r2, [pc, #32]	; (800361c <HAL_RCC_OscConfig+0x780>)
 80035fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003600:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003602:	f7fe fc9b 	bl	8001f3c <HAL_GetTick>
 8003606:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003608:	e00c      	b.n	8003624 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800360a:	f7fe fc97 	bl	8001f3c <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	2b02      	cmp	r3, #2
 8003616:	d905      	bls.n	8003624 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e013      	b.n	8003644 <HAL_RCC_OscConfig+0x7a8>
 800361c:	40021000 	.word	0x40021000
 8003620:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003624:	4b09      	ldr	r3, [pc, #36]	; (800364c <HAL_RCC_OscConfig+0x7b0>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d1ec      	bne.n	800360a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003630:	4b06      	ldr	r3, [pc, #24]	; (800364c <HAL_RCC_OscConfig+0x7b0>)
 8003632:	68da      	ldr	r2, [r3, #12]
 8003634:	4905      	ldr	r1, [pc, #20]	; (800364c <HAL_RCC_OscConfig+0x7b0>)
 8003636:	4b06      	ldr	r3, [pc, #24]	; (8003650 <HAL_RCC_OscConfig+0x7b4>)
 8003638:	4013      	ands	r3, r2
 800363a:	60cb      	str	r3, [r1, #12]
 800363c:	e001      	b.n	8003642 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e000      	b.n	8003644 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	3720      	adds	r7, #32
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	40021000 	.word	0x40021000
 8003650:	feeefffc 	.word	0xfeeefffc

08003654 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d101      	bne.n	8003668 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e0e7      	b.n	8003838 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003668:	4b75      	ldr	r3, [pc, #468]	; (8003840 <HAL_RCC_ClockConfig+0x1ec>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0307 	and.w	r3, r3, #7
 8003670:	683a      	ldr	r2, [r7, #0]
 8003672:	429a      	cmp	r2, r3
 8003674:	d910      	bls.n	8003698 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003676:	4b72      	ldr	r3, [pc, #456]	; (8003840 <HAL_RCC_ClockConfig+0x1ec>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f023 0207 	bic.w	r2, r3, #7
 800367e:	4970      	ldr	r1, [pc, #448]	; (8003840 <HAL_RCC_ClockConfig+0x1ec>)
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	4313      	orrs	r3, r2
 8003684:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003686:	4b6e      	ldr	r3, [pc, #440]	; (8003840 <HAL_RCC_ClockConfig+0x1ec>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0307 	and.w	r3, r3, #7
 800368e:	683a      	ldr	r2, [r7, #0]
 8003690:	429a      	cmp	r2, r3
 8003692:	d001      	beq.n	8003698 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e0cf      	b.n	8003838 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0302 	and.w	r3, r3, #2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d010      	beq.n	80036c6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	689a      	ldr	r2, [r3, #8]
 80036a8:	4b66      	ldr	r3, [pc, #408]	; (8003844 <HAL_RCC_ClockConfig+0x1f0>)
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d908      	bls.n	80036c6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036b4:	4b63      	ldr	r3, [pc, #396]	; (8003844 <HAL_RCC_ClockConfig+0x1f0>)
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	4960      	ldr	r1, [pc, #384]	; (8003844 <HAL_RCC_ClockConfig+0x1f0>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d04c      	beq.n	800376c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	2b03      	cmp	r3, #3
 80036d8:	d107      	bne.n	80036ea <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036da:	4b5a      	ldr	r3, [pc, #360]	; (8003844 <HAL_RCC_ClockConfig+0x1f0>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d121      	bne.n	800372a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e0a6      	b.n	8003838 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d107      	bne.n	8003702 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036f2:	4b54      	ldr	r3, [pc, #336]	; (8003844 <HAL_RCC_ClockConfig+0x1f0>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d115      	bne.n	800372a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e09a      	b.n	8003838 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d107      	bne.n	800371a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800370a:	4b4e      	ldr	r3, [pc, #312]	; (8003844 <HAL_RCC_ClockConfig+0x1f0>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	2b00      	cmp	r3, #0
 8003714:	d109      	bne.n	800372a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e08e      	b.n	8003838 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800371a:	4b4a      	ldr	r3, [pc, #296]	; (8003844 <HAL_RCC_ClockConfig+0x1f0>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e086      	b.n	8003838 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800372a:	4b46      	ldr	r3, [pc, #280]	; (8003844 <HAL_RCC_ClockConfig+0x1f0>)
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f023 0203 	bic.w	r2, r3, #3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	4943      	ldr	r1, [pc, #268]	; (8003844 <HAL_RCC_ClockConfig+0x1f0>)
 8003738:	4313      	orrs	r3, r2
 800373a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800373c:	f7fe fbfe 	bl	8001f3c <HAL_GetTick>
 8003740:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003742:	e00a      	b.n	800375a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003744:	f7fe fbfa 	bl	8001f3c <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003752:	4293      	cmp	r3, r2
 8003754:	d901      	bls.n	800375a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e06e      	b.n	8003838 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800375a:	4b3a      	ldr	r3, [pc, #232]	; (8003844 <HAL_RCC_ClockConfig+0x1f0>)
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f003 020c 	and.w	r2, r3, #12
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	429a      	cmp	r2, r3
 800376a:	d1eb      	bne.n	8003744 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0302 	and.w	r3, r3, #2
 8003774:	2b00      	cmp	r3, #0
 8003776:	d010      	beq.n	800379a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	689a      	ldr	r2, [r3, #8]
 800377c:	4b31      	ldr	r3, [pc, #196]	; (8003844 <HAL_RCC_ClockConfig+0x1f0>)
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003784:	429a      	cmp	r2, r3
 8003786:	d208      	bcs.n	800379a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003788:	4b2e      	ldr	r3, [pc, #184]	; (8003844 <HAL_RCC_ClockConfig+0x1f0>)
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	492b      	ldr	r1, [pc, #172]	; (8003844 <HAL_RCC_ClockConfig+0x1f0>)
 8003796:	4313      	orrs	r3, r2
 8003798:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800379a:	4b29      	ldr	r3, [pc, #164]	; (8003840 <HAL_RCC_ClockConfig+0x1ec>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0307 	and.w	r3, r3, #7
 80037a2:	683a      	ldr	r2, [r7, #0]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d210      	bcs.n	80037ca <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037a8:	4b25      	ldr	r3, [pc, #148]	; (8003840 <HAL_RCC_ClockConfig+0x1ec>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f023 0207 	bic.w	r2, r3, #7
 80037b0:	4923      	ldr	r1, [pc, #140]	; (8003840 <HAL_RCC_ClockConfig+0x1ec>)
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037b8:	4b21      	ldr	r3, [pc, #132]	; (8003840 <HAL_RCC_ClockConfig+0x1ec>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0307 	and.w	r3, r3, #7
 80037c0:	683a      	ldr	r2, [r7, #0]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d001      	beq.n	80037ca <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e036      	b.n	8003838 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0304 	and.w	r3, r3, #4
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d008      	beq.n	80037e8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037d6:	4b1b      	ldr	r3, [pc, #108]	; (8003844 <HAL_RCC_ClockConfig+0x1f0>)
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	4918      	ldr	r1, [pc, #96]	; (8003844 <HAL_RCC_ClockConfig+0x1f0>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0308 	and.w	r3, r3, #8
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d009      	beq.n	8003808 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037f4:	4b13      	ldr	r3, [pc, #76]	; (8003844 <HAL_RCC_ClockConfig+0x1f0>)
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	00db      	lsls	r3, r3, #3
 8003802:	4910      	ldr	r1, [pc, #64]	; (8003844 <HAL_RCC_ClockConfig+0x1f0>)
 8003804:	4313      	orrs	r3, r2
 8003806:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003808:	f000 f824 	bl	8003854 <HAL_RCC_GetSysClockFreq>
 800380c:	4602      	mov	r2, r0
 800380e:	4b0d      	ldr	r3, [pc, #52]	; (8003844 <HAL_RCC_ClockConfig+0x1f0>)
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	091b      	lsrs	r3, r3, #4
 8003814:	f003 030f 	and.w	r3, r3, #15
 8003818:	490b      	ldr	r1, [pc, #44]	; (8003848 <HAL_RCC_ClockConfig+0x1f4>)
 800381a:	5ccb      	ldrb	r3, [r1, r3]
 800381c:	f003 031f 	and.w	r3, r3, #31
 8003820:	fa22 f303 	lsr.w	r3, r2, r3
 8003824:	4a09      	ldr	r2, [pc, #36]	; (800384c <HAL_RCC_ClockConfig+0x1f8>)
 8003826:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003828:	4b09      	ldr	r3, [pc, #36]	; (8003850 <HAL_RCC_ClockConfig+0x1fc>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4618      	mov	r0, r3
 800382e:	f7fe fb35 	bl	8001e9c <HAL_InitTick>
 8003832:	4603      	mov	r3, r0
 8003834:	72fb      	strb	r3, [r7, #11]

  return status;
 8003836:	7afb      	ldrb	r3, [r7, #11]
}
 8003838:	4618      	mov	r0, r3
 800383a:	3710      	adds	r7, #16
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	40022000 	.word	0x40022000
 8003844:	40021000 	.word	0x40021000
 8003848:	08006f98 	.word	0x08006f98
 800384c:	20000000 	.word	0x20000000
 8003850:	20000038 	.word	0x20000038

08003854 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003854:	b480      	push	{r7}
 8003856:	b089      	sub	sp, #36	; 0x24
 8003858:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800385a:	2300      	movs	r3, #0
 800385c:	61fb      	str	r3, [r7, #28]
 800385e:	2300      	movs	r3, #0
 8003860:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003862:	4b3e      	ldr	r3, [pc, #248]	; (800395c <HAL_RCC_GetSysClockFreq+0x108>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f003 030c 	and.w	r3, r3, #12
 800386a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800386c:	4b3b      	ldr	r3, [pc, #236]	; (800395c <HAL_RCC_GetSysClockFreq+0x108>)
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	f003 0303 	and.w	r3, r3, #3
 8003874:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d005      	beq.n	8003888 <HAL_RCC_GetSysClockFreq+0x34>
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	2b0c      	cmp	r3, #12
 8003880:	d121      	bne.n	80038c6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2b01      	cmp	r3, #1
 8003886:	d11e      	bne.n	80038c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003888:	4b34      	ldr	r3, [pc, #208]	; (800395c <HAL_RCC_GetSysClockFreq+0x108>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0308 	and.w	r3, r3, #8
 8003890:	2b00      	cmp	r3, #0
 8003892:	d107      	bne.n	80038a4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003894:	4b31      	ldr	r3, [pc, #196]	; (800395c <HAL_RCC_GetSysClockFreq+0x108>)
 8003896:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800389a:	0a1b      	lsrs	r3, r3, #8
 800389c:	f003 030f 	and.w	r3, r3, #15
 80038a0:	61fb      	str	r3, [r7, #28]
 80038a2:	e005      	b.n	80038b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80038a4:	4b2d      	ldr	r3, [pc, #180]	; (800395c <HAL_RCC_GetSysClockFreq+0x108>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	091b      	lsrs	r3, r3, #4
 80038aa:	f003 030f 	and.w	r3, r3, #15
 80038ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80038b0:	4a2b      	ldr	r2, [pc, #172]	; (8003960 <HAL_RCC_GetSysClockFreq+0x10c>)
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038b8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d10d      	bne.n	80038dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038c4:	e00a      	b.n	80038dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	2b04      	cmp	r3, #4
 80038ca:	d102      	bne.n	80038d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80038cc:	4b25      	ldr	r3, [pc, #148]	; (8003964 <HAL_RCC_GetSysClockFreq+0x110>)
 80038ce:	61bb      	str	r3, [r7, #24]
 80038d0:	e004      	b.n	80038dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	2b08      	cmp	r3, #8
 80038d6:	d101      	bne.n	80038dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80038d8:	4b23      	ldr	r3, [pc, #140]	; (8003968 <HAL_RCC_GetSysClockFreq+0x114>)
 80038da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	2b0c      	cmp	r3, #12
 80038e0:	d134      	bne.n	800394c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80038e2:	4b1e      	ldr	r3, [pc, #120]	; (800395c <HAL_RCC_GetSysClockFreq+0x108>)
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	f003 0303 	and.w	r3, r3, #3
 80038ea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d003      	beq.n	80038fa <HAL_RCC_GetSysClockFreq+0xa6>
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	2b03      	cmp	r3, #3
 80038f6:	d003      	beq.n	8003900 <HAL_RCC_GetSysClockFreq+0xac>
 80038f8:	e005      	b.n	8003906 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80038fa:	4b1a      	ldr	r3, [pc, #104]	; (8003964 <HAL_RCC_GetSysClockFreq+0x110>)
 80038fc:	617b      	str	r3, [r7, #20]
      break;
 80038fe:	e005      	b.n	800390c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003900:	4b19      	ldr	r3, [pc, #100]	; (8003968 <HAL_RCC_GetSysClockFreq+0x114>)
 8003902:	617b      	str	r3, [r7, #20]
      break;
 8003904:	e002      	b.n	800390c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	617b      	str	r3, [r7, #20]
      break;
 800390a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800390c:	4b13      	ldr	r3, [pc, #76]	; (800395c <HAL_RCC_GetSysClockFreq+0x108>)
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	091b      	lsrs	r3, r3, #4
 8003912:	f003 0307 	and.w	r3, r3, #7
 8003916:	3301      	adds	r3, #1
 8003918:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800391a:	4b10      	ldr	r3, [pc, #64]	; (800395c <HAL_RCC_GetSysClockFreq+0x108>)
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	0a1b      	lsrs	r3, r3, #8
 8003920:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003924:	697a      	ldr	r2, [r7, #20]
 8003926:	fb03 f202 	mul.w	r2, r3, r2
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003930:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003932:	4b0a      	ldr	r3, [pc, #40]	; (800395c <HAL_RCC_GetSysClockFreq+0x108>)
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	0e5b      	lsrs	r3, r3, #25
 8003938:	f003 0303 	and.w	r3, r3, #3
 800393c:	3301      	adds	r3, #1
 800393e:	005b      	lsls	r3, r3, #1
 8003940:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	fbb2 f3f3 	udiv	r3, r2, r3
 800394a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800394c:	69bb      	ldr	r3, [r7, #24]
}
 800394e:	4618      	mov	r0, r3
 8003950:	3724      	adds	r7, #36	; 0x24
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	40021000 	.word	0x40021000
 8003960:	08006fb0 	.word	0x08006fb0
 8003964:	00f42400 	.word	0x00f42400
 8003968:	007a1200 	.word	0x007a1200

0800396c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800396c:	b480      	push	{r7}
 800396e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003970:	4b03      	ldr	r3, [pc, #12]	; (8003980 <HAL_RCC_GetHCLKFreq+0x14>)
 8003972:	681b      	ldr	r3, [r3, #0]
}
 8003974:	4618      	mov	r0, r3
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	20000000 	.word	0x20000000

08003984 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003988:	f7ff fff0 	bl	800396c <HAL_RCC_GetHCLKFreq>
 800398c:	4602      	mov	r2, r0
 800398e:	4b06      	ldr	r3, [pc, #24]	; (80039a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	0a1b      	lsrs	r3, r3, #8
 8003994:	f003 0307 	and.w	r3, r3, #7
 8003998:	4904      	ldr	r1, [pc, #16]	; (80039ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800399a:	5ccb      	ldrb	r3, [r1, r3]
 800399c:	f003 031f 	and.w	r3, r3, #31
 80039a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	40021000 	.word	0x40021000
 80039ac:	08006fa8 	.word	0x08006fa8

080039b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80039b4:	f7ff ffda 	bl	800396c <HAL_RCC_GetHCLKFreq>
 80039b8:	4602      	mov	r2, r0
 80039ba:	4b06      	ldr	r3, [pc, #24]	; (80039d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	0adb      	lsrs	r3, r3, #11
 80039c0:	f003 0307 	and.w	r3, r3, #7
 80039c4:	4904      	ldr	r1, [pc, #16]	; (80039d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80039c6:	5ccb      	ldrb	r3, [r1, r3]
 80039c8:	f003 031f 	and.w	r3, r3, #31
 80039cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	40021000 	.word	0x40021000
 80039d8:	08006fa8 	.word	0x08006fa8

080039dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b086      	sub	sp, #24
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80039e4:	2300      	movs	r3, #0
 80039e6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80039e8:	4b2a      	ldr	r3, [pc, #168]	; (8003a94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d003      	beq.n	80039fc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80039f4:	f7ff f932 	bl	8002c5c <HAL_PWREx_GetVoltageRange>
 80039f8:	6178      	str	r0, [r7, #20]
 80039fa:	e014      	b.n	8003a26 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80039fc:	4b25      	ldr	r3, [pc, #148]	; (8003a94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a00:	4a24      	ldr	r2, [pc, #144]	; (8003a94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a06:	6593      	str	r3, [r2, #88]	; 0x58
 8003a08:	4b22      	ldr	r3, [pc, #136]	; (8003a94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a10:	60fb      	str	r3, [r7, #12]
 8003a12:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003a14:	f7ff f922 	bl	8002c5c <HAL_PWREx_GetVoltageRange>
 8003a18:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003a1a:	4b1e      	ldr	r3, [pc, #120]	; (8003a94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a1e:	4a1d      	ldr	r2, [pc, #116]	; (8003a94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a24:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a2c:	d10b      	bne.n	8003a46 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2b80      	cmp	r3, #128	; 0x80
 8003a32:	d919      	bls.n	8003a68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2ba0      	cmp	r3, #160	; 0xa0
 8003a38:	d902      	bls.n	8003a40 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	613b      	str	r3, [r7, #16]
 8003a3e:	e013      	b.n	8003a68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a40:	2301      	movs	r3, #1
 8003a42:	613b      	str	r3, [r7, #16]
 8003a44:	e010      	b.n	8003a68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2b80      	cmp	r3, #128	; 0x80
 8003a4a:	d902      	bls.n	8003a52 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	613b      	str	r3, [r7, #16]
 8003a50:	e00a      	b.n	8003a68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2b80      	cmp	r3, #128	; 0x80
 8003a56:	d102      	bne.n	8003a5e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a58:	2302      	movs	r3, #2
 8003a5a:	613b      	str	r3, [r7, #16]
 8003a5c:	e004      	b.n	8003a68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2b70      	cmp	r3, #112	; 0x70
 8003a62:	d101      	bne.n	8003a68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a64:	2301      	movs	r3, #1
 8003a66:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003a68:	4b0b      	ldr	r3, [pc, #44]	; (8003a98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f023 0207 	bic.w	r2, r3, #7
 8003a70:	4909      	ldr	r1, [pc, #36]	; (8003a98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003a78:	4b07      	ldr	r3, [pc, #28]	; (8003a98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0307 	and.w	r3, r3, #7
 8003a80:	693a      	ldr	r2, [r7, #16]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d001      	beq.n	8003a8a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e000      	b.n	8003a8c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3718      	adds	r7, #24
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	40021000 	.word	0x40021000
 8003a98:	40022000 	.word	0x40022000

08003a9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b086      	sub	sp, #24
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d041      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003abc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ac0:	d02a      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003ac2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ac6:	d824      	bhi.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ac8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003acc:	d008      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003ace:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ad2:	d81e      	bhi.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00a      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003ad8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003adc:	d010      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003ade:	e018      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ae0:	4b86      	ldr	r3, [pc, #536]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	4a85      	ldr	r2, [pc, #532]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ae6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aea:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003aec:	e015      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	3304      	adds	r3, #4
 8003af2:	2100      	movs	r1, #0
 8003af4:	4618      	mov	r0, r3
 8003af6:	f001 f839 	bl	8004b6c <RCCEx_PLLSAI1_Config>
 8003afa:	4603      	mov	r3, r0
 8003afc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003afe:	e00c      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	3320      	adds	r3, #32
 8003b04:	2100      	movs	r1, #0
 8003b06:	4618      	mov	r0, r3
 8003b08:	f001 f924 	bl	8004d54 <RCCEx_PLLSAI2_Config>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b10:	e003      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	74fb      	strb	r3, [r7, #19]
      break;
 8003b16:	e000      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003b18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b1a:	7cfb      	ldrb	r3, [r7, #19]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d10b      	bne.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b20:	4b76      	ldr	r3, [pc, #472]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b26:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b2e:	4973      	ldr	r1, [pc, #460]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003b36:	e001      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b38:	7cfb      	ldrb	r3, [r7, #19]
 8003b3a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d041      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b4c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b50:	d02a      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003b52:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b56:	d824      	bhi.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003b58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b5c:	d008      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003b5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b62:	d81e      	bhi.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00a      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003b68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b6c:	d010      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003b6e:	e018      	b.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b70:	4b62      	ldr	r3, [pc, #392]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	4a61      	ldr	r2, [pc, #388]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b7a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b7c:	e015      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	3304      	adds	r3, #4
 8003b82:	2100      	movs	r1, #0
 8003b84:	4618      	mov	r0, r3
 8003b86:	f000 fff1 	bl	8004b6c <RCCEx_PLLSAI1_Config>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b8e:	e00c      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	3320      	adds	r3, #32
 8003b94:	2100      	movs	r1, #0
 8003b96:	4618      	mov	r0, r3
 8003b98:	f001 f8dc 	bl	8004d54 <RCCEx_PLLSAI2_Config>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ba0:	e003      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	74fb      	strb	r3, [r7, #19]
      break;
 8003ba6:	e000      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003ba8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003baa:	7cfb      	ldrb	r3, [r7, #19]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d10b      	bne.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003bb0:	4b52      	ldr	r3, [pc, #328]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bbe:	494f      	ldr	r1, [pc, #316]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003bc6:	e001      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bc8:	7cfb      	ldrb	r3, [r7, #19]
 8003bca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	f000 80a0 	beq.w	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003bde:	4b47      	ldr	r3, [pc, #284]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003bea:	2301      	movs	r3, #1
 8003bec:	e000      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003bee:	2300      	movs	r3, #0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00d      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bf4:	4b41      	ldr	r3, [pc, #260]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf8:	4a40      	ldr	r2, [pc, #256]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bfe:	6593      	str	r3, [r2, #88]	; 0x58
 8003c00:	4b3e      	ldr	r3, [pc, #248]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c08:	60bb      	str	r3, [r7, #8]
 8003c0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c10:	4b3b      	ldr	r3, [pc, #236]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a3a      	ldr	r2, [pc, #232]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c1a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c1c:	f7fe f98e 	bl	8001f3c <HAL_GetTick>
 8003c20:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c22:	e009      	b.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c24:	f7fe f98a 	bl	8001f3c <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d902      	bls.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	74fb      	strb	r3, [r7, #19]
        break;
 8003c36:	e005      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c38:	4b31      	ldr	r3, [pc, #196]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d0ef      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003c44:	7cfb      	ldrb	r3, [r7, #19]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d15c      	bne.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c4a:	4b2c      	ldr	r3, [pc, #176]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c54:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d01f      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c62:	697a      	ldr	r2, [r7, #20]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d019      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c68:	4b24      	ldr	r3, [pc, #144]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c72:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c74:	4b21      	ldr	r3, [pc, #132]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c7a:	4a20      	ldr	r2, [pc, #128]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c84:	4b1d      	ldr	r3, [pc, #116]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c8a:	4a1c      	ldr	r2, [pc, #112]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c94:	4a19      	ldr	r2, [pc, #100]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d016      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca6:	f7fe f949 	bl	8001f3c <HAL_GetTick>
 8003caa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cac:	e00b      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cae:	f7fe f945 	bl	8001f3c <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d902      	bls.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	74fb      	strb	r3, [r7, #19]
            break;
 8003cc4:	e006      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cc6:	4b0d      	ldr	r3, [pc, #52]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d0ec      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003cd4:	7cfb      	ldrb	r3, [r7, #19]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d10c      	bne.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cda:	4b08      	ldr	r3, [pc, #32]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cea:	4904      	ldr	r1, [pc, #16]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003cf2:	e009      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003cf4:	7cfb      	ldrb	r3, [r7, #19]
 8003cf6:	74bb      	strb	r3, [r7, #18]
 8003cf8:	e006      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003cfa:	bf00      	nop
 8003cfc:	40021000 	.word	0x40021000
 8003d00:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d04:	7cfb      	ldrb	r3, [r7, #19]
 8003d06:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d08:	7c7b      	ldrb	r3, [r7, #17]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d105      	bne.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d0e:	4b9e      	ldr	r3, [pc, #632]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d12:	4a9d      	ldr	r2, [pc, #628]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d18:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0301 	and.w	r3, r3, #1
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d00a      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d26:	4b98      	ldr	r3, [pc, #608]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d2c:	f023 0203 	bic.w	r2, r3, #3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d34:	4994      	ldr	r1, [pc, #592]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0302 	and.w	r3, r3, #2
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00a      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d48:	4b8f      	ldr	r3, [pc, #572]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d4e:	f023 020c 	bic.w	r2, r3, #12
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d56:	498c      	ldr	r1, [pc, #560]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0304 	and.w	r3, r3, #4
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00a      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d6a:	4b87      	ldr	r3, [pc, #540]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d70:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d78:	4983      	ldr	r1, [pc, #524]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0308 	and.w	r3, r3, #8
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d00a      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d8c:	4b7e      	ldr	r3, [pc, #504]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d92:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d9a:	497b      	ldr	r1, [pc, #492]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0310 	and.w	r3, r3, #16
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00a      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003dae:	4b76      	ldr	r3, [pc, #472]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dbc:	4972      	ldr	r1, [pc, #456]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0320 	and.w	r3, r3, #32
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d00a      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003dd0:	4b6d      	ldr	r3, [pc, #436]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dd6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dde:	496a      	ldr	r1, [pc, #424]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00a      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003df2:	4b65      	ldr	r3, [pc, #404]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e00:	4961      	ldr	r1, [pc, #388]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00a      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e14:	4b5c      	ldr	r3, [pc, #368]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e1a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e22:	4959      	ldr	r1, [pc, #356]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e24:	4313      	orrs	r3, r2
 8003e26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00a      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e36:	4b54      	ldr	r3, [pc, #336]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e3c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e44:	4950      	ldr	r1, [pc, #320]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00a      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e58:	4b4b      	ldr	r3, [pc, #300]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e5e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e66:	4948      	ldr	r1, [pc, #288]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00a      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e7a:	4b43      	ldr	r3, [pc, #268]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e88:	493f      	ldr	r1, [pc, #252]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d028      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e9c:	4b3a      	ldr	r3, [pc, #232]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003eaa:	4937      	ldr	r1, [pc, #220]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003eb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003eba:	d106      	bne.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ebc:	4b32      	ldr	r3, [pc, #200]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	4a31      	ldr	r2, [pc, #196]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ec2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ec6:	60d3      	str	r3, [r2, #12]
 8003ec8:	e011      	b.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ece:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ed2:	d10c      	bne.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	3304      	adds	r3, #4
 8003ed8:	2101      	movs	r1, #1
 8003eda:	4618      	mov	r0, r3
 8003edc:	f000 fe46 	bl	8004b6c <RCCEx_PLLSAI1_Config>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003ee4:	7cfb      	ldrb	r3, [r7, #19]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d001      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003eea:	7cfb      	ldrb	r3, [r7, #19]
 8003eec:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d028      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003efa:	4b23      	ldr	r3, [pc, #140]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f00:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f08:	491f      	ldr	r1, [pc, #124]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f18:	d106      	bne.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f1a:	4b1b      	ldr	r3, [pc, #108]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	4a1a      	ldr	r2, [pc, #104]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f24:	60d3      	str	r3, [r2, #12]
 8003f26:	e011      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f30:	d10c      	bne.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	3304      	adds	r3, #4
 8003f36:	2101      	movs	r1, #1
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f000 fe17 	bl	8004b6c <RCCEx_PLLSAI1_Config>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f42:	7cfb      	ldrb	r3, [r7, #19]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d001      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003f48:	7cfb      	ldrb	r3, [r7, #19]
 8003f4a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d02b      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f58:	4b0b      	ldr	r3, [pc, #44]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f5e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f66:	4908      	ldr	r1, [pc, #32]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f76:	d109      	bne.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f78:	4b03      	ldr	r3, [pc, #12]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	4a02      	ldr	r2, [pc, #8]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f82:	60d3      	str	r3, [r2, #12]
 8003f84:	e014      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003f86:	bf00      	nop
 8003f88:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f94:	d10c      	bne.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	3304      	adds	r3, #4
 8003f9a:	2101      	movs	r1, #1
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f000 fde5 	bl	8004b6c <RCCEx_PLLSAI1_Config>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fa6:	7cfb      	ldrb	r3, [r7, #19]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d001      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003fac:	7cfb      	ldrb	r3, [r7, #19]
 8003fae:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d02f      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003fbc:	4b2b      	ldr	r3, [pc, #172]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fca:	4928      	ldr	r1, [pc, #160]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003fda:	d10d      	bne.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	3304      	adds	r3, #4
 8003fe0:	2102      	movs	r1, #2
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f000 fdc2 	bl	8004b6c <RCCEx_PLLSAI1_Config>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fec:	7cfb      	ldrb	r3, [r7, #19]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d014      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003ff2:	7cfb      	ldrb	r3, [r7, #19]
 8003ff4:	74bb      	strb	r3, [r7, #18]
 8003ff6:	e011      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ffc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004000:	d10c      	bne.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	3320      	adds	r3, #32
 8004006:	2102      	movs	r1, #2
 8004008:	4618      	mov	r0, r3
 800400a:	f000 fea3 	bl	8004d54 <RCCEx_PLLSAI2_Config>
 800400e:	4603      	mov	r3, r0
 8004010:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004012:	7cfb      	ldrb	r3, [r7, #19]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d001      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004018:	7cfb      	ldrb	r3, [r7, #19]
 800401a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00a      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004028:	4b10      	ldr	r3, [pc, #64]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800402a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800402e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004036:	490d      	ldr	r1, [pc, #52]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004038:	4313      	orrs	r3, r2
 800403a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00b      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800404a:	4b08      	ldr	r3, [pc, #32]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800404c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004050:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800405a:	4904      	ldr	r1, [pc, #16]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800405c:	4313      	orrs	r3, r2
 800405e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004062:	7cbb      	ldrb	r3, [r7, #18]
}
 8004064:	4618      	mov	r0, r3
 8004066:	3718      	adds	r7, #24
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	40021000 	.word	0x40021000

08004070 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b088      	sub	sp, #32
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8004078:	2300      	movs	r3, #0
 800407a:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004082:	d13e      	bne.n	8004102 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004084:	4bb2      	ldr	r3, [pc, #712]	; (8004350 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800408a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800408e:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004096:	d028      	beq.n	80040ea <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800409e:	f200 8542 	bhi.w	8004b26 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040a8:	d005      	beq.n	80040b6 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040b0:	d00e      	beq.n	80040d0 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 80040b2:	f000 bd38 	b.w	8004b26 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80040b6:	4ba6      	ldr	r3, [pc, #664]	; (8004350 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80040b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040bc:	f003 0302 	and.w	r3, r3, #2
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	f040 8532 	bne.w	8004b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 80040c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040ca:	61fb      	str	r3, [r7, #28]
      break;
 80040cc:	f000 bd2d 	b.w	8004b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80040d0:	4b9f      	ldr	r3, [pc, #636]	; (8004350 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80040d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040d6:	f003 0302 	and.w	r3, r3, #2
 80040da:	2b02      	cmp	r3, #2
 80040dc:	f040 8527 	bne.w	8004b2e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 80040e0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80040e4:	61fb      	str	r3, [r7, #28]
      break;
 80040e6:	f000 bd22 	b.w	8004b2e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80040ea:	4b99      	ldr	r3, [pc, #612]	; (8004350 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040f6:	f040 851c 	bne.w	8004b32 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 80040fa:	4b96      	ldr	r3, [pc, #600]	; (8004354 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 80040fc:	61fb      	str	r3, [r7, #28]
      break;
 80040fe:	f000 bd18 	b.w	8004b32 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004102:	4b93      	ldr	r3, [pc, #588]	; (8004350 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	f003 0303 	and.w	r3, r3, #3
 800410a:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	2b03      	cmp	r3, #3
 8004110:	d036      	beq.n	8004180 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	2b03      	cmp	r3, #3
 8004116:	d840      	bhi.n	800419a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d003      	beq.n	8004126 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	2b02      	cmp	r3, #2
 8004122:	d020      	beq.n	8004166 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8004124:	e039      	b.n	800419a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004126:	4b8a      	ldr	r3, [pc, #552]	; (8004350 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0302 	and.w	r3, r3, #2
 800412e:	2b02      	cmp	r3, #2
 8004130:	d116      	bne.n	8004160 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004132:	4b87      	ldr	r3, [pc, #540]	; (8004350 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0308 	and.w	r3, r3, #8
 800413a:	2b00      	cmp	r3, #0
 800413c:	d005      	beq.n	800414a <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800413e:	4b84      	ldr	r3, [pc, #528]	; (8004350 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	091b      	lsrs	r3, r3, #4
 8004144:	f003 030f 	and.w	r3, r3, #15
 8004148:	e005      	b.n	8004156 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800414a:	4b81      	ldr	r3, [pc, #516]	; (8004350 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800414c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004150:	0a1b      	lsrs	r3, r3, #8
 8004152:	f003 030f 	and.w	r3, r3, #15
 8004156:	4a80      	ldr	r2, [pc, #512]	; (8004358 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8004158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800415c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800415e:	e01f      	b.n	80041a0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004160:	2300      	movs	r3, #0
 8004162:	61bb      	str	r3, [r7, #24]
      break;
 8004164:	e01c      	b.n	80041a0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004166:	4b7a      	ldr	r3, [pc, #488]	; (8004350 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800416e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004172:	d102      	bne.n	800417a <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8004174:	4b79      	ldr	r3, [pc, #484]	; (800435c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8004176:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004178:	e012      	b.n	80041a0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800417a:	2300      	movs	r3, #0
 800417c:	61bb      	str	r3, [r7, #24]
      break;
 800417e:	e00f      	b.n	80041a0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004180:	4b73      	ldr	r3, [pc, #460]	; (8004350 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004188:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800418c:	d102      	bne.n	8004194 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 800418e:	4b74      	ldr	r3, [pc, #464]	; (8004360 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004190:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004192:	e005      	b.n	80041a0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004194:	2300      	movs	r3, #0
 8004196:	61bb      	str	r3, [r7, #24]
      break;
 8004198:	e002      	b.n	80041a0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 800419a:	2300      	movs	r3, #0
 800419c:	61bb      	str	r3, [r7, #24]
      break;
 800419e:	bf00      	nop
    }

    switch(PeriphClk)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80041a6:	f000 80dd 	beq.w	8004364 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80041b0:	f200 84c1 	bhi.w	8004b36 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80041ba:	f000 80d3 	beq.w	8004364 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80041c4:	f200 84b7 	bhi.w	8004b36 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041ce:	f000 835f 	beq.w	8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041d8:	f200 84ad 	bhi.w	8004b36 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041e2:	f000 847e 	beq.w	8004ae2 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041ec:	f200 84a3 	bhi.w	8004b36 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041f6:	f000 82cd 	beq.w	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004200:	f200 8499 	bhi.w	8004b36 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800420a:	f000 80ab 	beq.w	8004364 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004214:	f200 848f 	bhi.w	8004b36 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800421e:	f000 8090 	beq.w	8004342 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004228:	f200 8485 	bhi.w	8004b36 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004232:	d07f      	beq.n	8004334 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800423a:	f200 847c 	bhi.w	8004b36 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004244:	f000 8403 	beq.w	8004a4e <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800424e:	f200 8472 	bhi.w	8004b36 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004258:	f000 83af 	beq.w	80049ba <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004262:	f200 8468 	bhi.w	8004b36 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800426c:	f000 8379 	beq.w	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004276:	f200 845e 	bhi.w	8004b36 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2b80      	cmp	r3, #128	; 0x80
 800427e:	f000 8344 	beq.w	800490a <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2b80      	cmp	r3, #128	; 0x80
 8004286:	f200 8456 	bhi.w	8004b36 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2b20      	cmp	r3, #32
 800428e:	d84b      	bhi.n	8004328 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	f000 844f 	beq.w	8004b36 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	3b01      	subs	r3, #1
 800429c:	2b1f      	cmp	r3, #31
 800429e:	f200 844a 	bhi.w	8004b36 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80042a2:	a201      	add	r2, pc, #4	; (adr r2, 80042a8 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 80042a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a8:	08004491 	.word	0x08004491
 80042ac:	080044ff 	.word	0x080044ff
 80042b0:	08004b37 	.word	0x08004b37
 80042b4:	08004593 	.word	0x08004593
 80042b8:	08004b37 	.word	0x08004b37
 80042bc:	08004b37 	.word	0x08004b37
 80042c0:	08004b37 	.word	0x08004b37
 80042c4:	08004619 	.word	0x08004619
 80042c8:	08004b37 	.word	0x08004b37
 80042cc:	08004b37 	.word	0x08004b37
 80042d0:	08004b37 	.word	0x08004b37
 80042d4:	08004b37 	.word	0x08004b37
 80042d8:	08004b37 	.word	0x08004b37
 80042dc:	08004b37 	.word	0x08004b37
 80042e0:	08004b37 	.word	0x08004b37
 80042e4:	08004691 	.word	0x08004691
 80042e8:	08004b37 	.word	0x08004b37
 80042ec:	08004b37 	.word	0x08004b37
 80042f0:	08004b37 	.word	0x08004b37
 80042f4:	08004b37 	.word	0x08004b37
 80042f8:	08004b37 	.word	0x08004b37
 80042fc:	08004b37 	.word	0x08004b37
 8004300:	08004b37 	.word	0x08004b37
 8004304:	08004b37 	.word	0x08004b37
 8004308:	08004b37 	.word	0x08004b37
 800430c:	08004b37 	.word	0x08004b37
 8004310:	08004b37 	.word	0x08004b37
 8004314:	08004b37 	.word	0x08004b37
 8004318:	08004b37 	.word	0x08004b37
 800431c:	08004b37 	.word	0x08004b37
 8004320:	08004b37 	.word	0x08004b37
 8004324:	08004713 	.word	0x08004713
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2b40      	cmp	r3, #64	; 0x40
 800432c:	f000 82c1 	beq.w	80048b2 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8004330:	f000 bc01 	b.w	8004b36 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8004334:	69b9      	ldr	r1, [r7, #24]
 8004336:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800433a:	f000 fde9 	bl	8004f10 <RCCEx_GetSAIxPeriphCLKFreq>
 800433e:	61f8      	str	r0, [r7, #28]
      break;
 8004340:	e3fa      	b.n	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8004342:	69b9      	ldr	r1, [r7, #24]
 8004344:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004348:	f000 fde2 	bl	8004f10 <RCCEx_GetSAIxPeriphCLKFreq>
 800434c:	61f8      	str	r0, [r7, #28]
      break;
 800434e:	e3f3      	b.n	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8004350:	40021000 	.word	0x40021000
 8004354:	0003d090 	.word	0x0003d090
 8004358:	08006fb0 	.word	0x08006fb0
 800435c:	00f42400 	.word	0x00f42400
 8004360:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8004364:	4ba9      	ldr	r3, [pc, #676]	; (800460c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800436a:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800436e:	613b      	str	r3, [r7, #16]
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004376:	d00c      	beq.n	8004392 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800437e:	d87f      	bhi.n	8004480 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004386:	d04e      	beq.n	8004426 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800438e:	d01d      	beq.n	80043cc <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 8004390:	e076      	b.n	8004480 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004392:	4b9e      	ldr	r3, [pc, #632]	; (800460c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	2b02      	cmp	r3, #2
 800439c:	d172      	bne.n	8004484 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800439e:	4b9b      	ldr	r3, [pc, #620]	; (800460c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0308 	and.w	r3, r3, #8
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d005      	beq.n	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 80043aa:	4b98      	ldr	r3, [pc, #608]	; (800460c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	091b      	lsrs	r3, r3, #4
 80043b0:	f003 030f 	and.w	r3, r3, #15
 80043b4:	e005      	b.n	80043c2 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 80043b6:	4b95      	ldr	r3, [pc, #596]	; (800460c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80043b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043bc:	0a1b      	lsrs	r3, r3, #8
 80043be:	f003 030f 	and.w	r3, r3, #15
 80043c2:	4a93      	ldr	r2, [pc, #588]	; (8004610 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 80043c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043c8:	61fb      	str	r3, [r7, #28]
          break;
 80043ca:	e05b      	b.n	8004484 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80043cc:	4b8f      	ldr	r3, [pc, #572]	; (800460c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043d8:	d156      	bne.n	8004488 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80043da:	4b8c      	ldr	r3, [pc, #560]	; (800460c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043e6:	d14f      	bne.n	8004488 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80043e8:	4b88      	ldr	r3, [pc, #544]	; (800460c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	0a1b      	lsrs	r3, r3, #8
 80043ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043f2:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	fb03 f202 	mul.w	r2, r3, r2
 80043fc:	4b83      	ldr	r3, [pc, #524]	; (800460c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	091b      	lsrs	r3, r3, #4
 8004402:	f003 0307 	and.w	r3, r3, #7
 8004406:	3301      	adds	r3, #1
 8004408:	fbb2 f3f3 	udiv	r3, r2, r3
 800440c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800440e:	4b7f      	ldr	r3, [pc, #508]	; (800460c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	0d5b      	lsrs	r3, r3, #21
 8004414:	f003 0303 	and.w	r3, r3, #3
 8004418:	3301      	adds	r3, #1
 800441a:	005b      	lsls	r3, r3, #1
 800441c:	69ba      	ldr	r2, [r7, #24]
 800441e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004422:	61fb      	str	r3, [r7, #28]
          break;
 8004424:	e030      	b.n	8004488 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8004426:	4b79      	ldr	r3, [pc, #484]	; (800460c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800442e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004432:	d12b      	bne.n	800448c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8004434:	4b75      	ldr	r3, [pc, #468]	; (800460c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800443c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004440:	d124      	bne.n	800448c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004442:	4b72      	ldr	r3, [pc, #456]	; (800460c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	0a1b      	lsrs	r3, r3, #8
 8004448:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800444c:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	68fa      	ldr	r2, [r7, #12]
 8004452:	fb03 f202 	mul.w	r2, r3, r2
 8004456:	4b6d      	ldr	r3, [pc, #436]	; (800460c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	091b      	lsrs	r3, r3, #4
 800445c:	f003 0307 	and.w	r3, r3, #7
 8004460:	3301      	adds	r3, #1
 8004462:	fbb2 f3f3 	udiv	r3, r2, r3
 8004466:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8004468:	4b68      	ldr	r3, [pc, #416]	; (800460c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	0d5b      	lsrs	r3, r3, #21
 800446e:	f003 0303 	and.w	r3, r3, #3
 8004472:	3301      	adds	r3, #1
 8004474:	005b      	lsls	r3, r3, #1
 8004476:	69ba      	ldr	r2, [r7, #24]
 8004478:	fbb2 f3f3 	udiv	r3, r2, r3
 800447c:	61fb      	str	r3, [r7, #28]
          break;
 800447e:	e005      	b.n	800448c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 8004480:	bf00      	nop
 8004482:	e359      	b.n	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004484:	bf00      	nop
 8004486:	e357      	b.n	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004488:	bf00      	nop
 800448a:	e355      	b.n	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800448c:	bf00      	nop
        break;
 800448e:	e353      	b.n	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004490:	4b5e      	ldr	r3, [pc, #376]	; (800460c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004496:	f003 0303 	and.w	r3, r3, #3
 800449a:	613b      	str	r3, [r7, #16]
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	2b03      	cmp	r3, #3
 80044a0:	d827      	bhi.n	80044f2 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 80044a2:	a201      	add	r2, pc, #4	; (adr r2, 80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 80044a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a8:	080044b9 	.word	0x080044b9
 80044ac:	080044c1 	.word	0x080044c1
 80044b0:	080044c9 	.word	0x080044c9
 80044b4:	080044dd 	.word	0x080044dd
          frequency = HAL_RCC_GetPCLK2Freq();
 80044b8:	f7ff fa7a 	bl	80039b0 <HAL_RCC_GetPCLK2Freq>
 80044bc:	61f8      	str	r0, [r7, #28]
          break;
 80044be:	e01d      	b.n	80044fc <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 80044c0:	f7ff f9c8 	bl	8003854 <HAL_RCC_GetSysClockFreq>
 80044c4:	61f8      	str	r0, [r7, #28]
          break;
 80044c6:	e019      	b.n	80044fc <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80044c8:	4b50      	ldr	r3, [pc, #320]	; (800460c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044d4:	d10f      	bne.n	80044f6 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 80044d6:	4b4f      	ldr	r3, [pc, #316]	; (8004614 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80044d8:	61fb      	str	r3, [r7, #28]
          break;
 80044da:	e00c      	b.n	80044f6 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80044dc:	4b4b      	ldr	r3, [pc, #300]	; (800460c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80044de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d107      	bne.n	80044fa <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 80044ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044ee:	61fb      	str	r3, [r7, #28]
          break;
 80044f0:	e003      	b.n	80044fa <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 80044f2:	bf00      	nop
 80044f4:	e320      	b.n	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80044f6:	bf00      	nop
 80044f8:	e31e      	b.n	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80044fa:	bf00      	nop
        break;
 80044fc:	e31c      	b.n	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80044fe:	4b43      	ldr	r3, [pc, #268]	; (800460c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004504:	f003 030c 	and.w	r3, r3, #12
 8004508:	613b      	str	r3, [r7, #16]
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	2b0c      	cmp	r3, #12
 800450e:	d83a      	bhi.n	8004586 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8004510:	a201      	add	r2, pc, #4	; (adr r2, 8004518 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8004512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004516:	bf00      	nop
 8004518:	0800454d 	.word	0x0800454d
 800451c:	08004587 	.word	0x08004587
 8004520:	08004587 	.word	0x08004587
 8004524:	08004587 	.word	0x08004587
 8004528:	08004555 	.word	0x08004555
 800452c:	08004587 	.word	0x08004587
 8004530:	08004587 	.word	0x08004587
 8004534:	08004587 	.word	0x08004587
 8004538:	0800455d 	.word	0x0800455d
 800453c:	08004587 	.word	0x08004587
 8004540:	08004587 	.word	0x08004587
 8004544:	08004587 	.word	0x08004587
 8004548:	08004571 	.word	0x08004571
          frequency = HAL_RCC_GetPCLK1Freq();
 800454c:	f7ff fa1a 	bl	8003984 <HAL_RCC_GetPCLK1Freq>
 8004550:	61f8      	str	r0, [r7, #28]
          break;
 8004552:	e01d      	b.n	8004590 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 8004554:	f7ff f97e 	bl	8003854 <HAL_RCC_GetSysClockFreq>
 8004558:	61f8      	str	r0, [r7, #28]
          break;
 800455a:	e019      	b.n	8004590 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800455c:	4b2b      	ldr	r3, [pc, #172]	; (800460c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004564:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004568:	d10f      	bne.n	800458a <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 800456a:	4b2a      	ldr	r3, [pc, #168]	; (8004614 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800456c:	61fb      	str	r3, [r7, #28]
          break;
 800456e:	e00c      	b.n	800458a <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004570:	4b26      	ldr	r3, [pc, #152]	; (800460c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	2b02      	cmp	r3, #2
 800457c:	d107      	bne.n	800458e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 800457e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004582:	61fb      	str	r3, [r7, #28]
          break;
 8004584:	e003      	b.n	800458e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 8004586:	bf00      	nop
 8004588:	e2d6      	b.n	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800458a:	bf00      	nop
 800458c:	e2d4      	b.n	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800458e:	bf00      	nop
        break;
 8004590:	e2d2      	b.n	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8004592:	4b1e      	ldr	r3, [pc, #120]	; (800460c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004598:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800459c:	613b      	str	r3, [r7, #16]
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	2b30      	cmp	r3, #48	; 0x30
 80045a2:	d021      	beq.n	80045e8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	2b30      	cmp	r3, #48	; 0x30
 80045a8:	d829      	bhi.n	80045fe <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	2b20      	cmp	r3, #32
 80045ae:	d011      	beq.n	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	2b20      	cmp	r3, #32
 80045b4:	d823      	bhi.n	80045fe <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d003      	beq.n	80045c4 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	2b10      	cmp	r3, #16
 80045c0:	d004      	beq.n	80045cc <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 80045c2:	e01c      	b.n	80045fe <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80045c4:	f7ff f9de 	bl	8003984 <HAL_RCC_GetPCLK1Freq>
 80045c8:	61f8      	str	r0, [r7, #28]
          break;
 80045ca:	e01d      	b.n	8004608 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 80045cc:	f7ff f942 	bl	8003854 <HAL_RCC_GetSysClockFreq>
 80045d0:	61f8      	str	r0, [r7, #28]
          break;
 80045d2:	e019      	b.n	8004608 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80045d4:	4b0d      	ldr	r3, [pc, #52]	; (800460c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045e0:	d10f      	bne.n	8004602 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 80045e2:	4b0c      	ldr	r3, [pc, #48]	; (8004614 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80045e4:	61fb      	str	r3, [r7, #28]
          break;
 80045e6:	e00c      	b.n	8004602 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80045e8:	4b08      	ldr	r3, [pc, #32]	; (800460c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80045ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ee:	f003 0302 	and.w	r3, r3, #2
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d107      	bne.n	8004606 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 80045f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045fa:	61fb      	str	r3, [r7, #28]
          break;
 80045fc:	e003      	b.n	8004606 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 80045fe:	bf00      	nop
 8004600:	e29a      	b.n	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004602:	bf00      	nop
 8004604:	e298      	b.n	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004606:	bf00      	nop
        break;
 8004608:	e296      	b.n	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 800460a:	bf00      	nop
 800460c:	40021000 	.word	0x40021000
 8004610:	08006fb0 	.word	0x08006fb0
 8004614:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8004618:	4b9b      	ldr	r3, [pc, #620]	; (8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800461a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800461e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004622:	613b      	str	r3, [r7, #16]
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	2bc0      	cmp	r3, #192	; 0xc0
 8004628:	d021      	beq.n	800466e <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	2bc0      	cmp	r3, #192	; 0xc0
 800462e:	d829      	bhi.n	8004684 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	2b80      	cmp	r3, #128	; 0x80
 8004634:	d011      	beq.n	800465a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	2b80      	cmp	r3, #128	; 0x80
 800463a:	d823      	bhi.n	8004684 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d003      	beq.n	800464a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	2b40      	cmp	r3, #64	; 0x40
 8004646:	d004      	beq.n	8004652 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 8004648:	e01c      	b.n	8004684 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 800464a:	f7ff f99b 	bl	8003984 <HAL_RCC_GetPCLK1Freq>
 800464e:	61f8      	str	r0, [r7, #28]
          break;
 8004650:	e01d      	b.n	800468e <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 8004652:	f7ff f8ff 	bl	8003854 <HAL_RCC_GetSysClockFreq>
 8004656:	61f8      	str	r0, [r7, #28]
          break;
 8004658:	e019      	b.n	800468e <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800465a:	4b8b      	ldr	r3, [pc, #556]	; (8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004662:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004666:	d10f      	bne.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 8004668:	4b88      	ldr	r3, [pc, #544]	; (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 800466a:	61fb      	str	r3, [r7, #28]
          break;
 800466c:	e00c      	b.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800466e:	4b86      	ldr	r3, [pc, #536]	; (8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004674:	f003 0302 	and.w	r3, r3, #2
 8004678:	2b02      	cmp	r3, #2
 800467a:	d107      	bne.n	800468c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 800467c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004680:	61fb      	str	r3, [r7, #28]
          break;
 8004682:	e003      	b.n	800468c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 8004684:	bf00      	nop
 8004686:	e257      	b.n	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004688:	bf00      	nop
 800468a:	e255      	b.n	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800468c:	bf00      	nop
        break;
 800468e:	e253      	b.n	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8004690:	4b7d      	ldr	r3, [pc, #500]	; (8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004696:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800469a:	613b      	str	r3, [r7, #16]
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046a2:	d025      	beq.n	80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046aa:	d82c      	bhi.n	8004706 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046b2:	d013      	beq.n	80046dc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046ba:	d824      	bhi.n	8004706 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d004      	beq.n	80046cc <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046c8:	d004      	beq.n	80046d4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 80046ca:	e01c      	b.n	8004706 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 80046cc:	f7ff f95a 	bl	8003984 <HAL_RCC_GetPCLK1Freq>
 80046d0:	61f8      	str	r0, [r7, #28]
          break;
 80046d2:	e01d      	b.n	8004710 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 80046d4:	f7ff f8be 	bl	8003854 <HAL_RCC_GetSysClockFreq>
 80046d8:	61f8      	str	r0, [r7, #28]
          break;
 80046da:	e019      	b.n	8004710 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80046dc:	4b6a      	ldr	r3, [pc, #424]	; (8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046e8:	d10f      	bne.n	800470a <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 80046ea:	4b68      	ldr	r3, [pc, #416]	; (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80046ec:	61fb      	str	r3, [r7, #28]
          break;
 80046ee:	e00c      	b.n	800470a <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80046f0:	4b65      	ldr	r3, [pc, #404]	; (8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80046f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046f6:	f003 0302 	and.w	r3, r3, #2
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d107      	bne.n	800470e <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 80046fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004702:	61fb      	str	r3, [r7, #28]
          break;
 8004704:	e003      	b.n	800470e <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 8004706:	bf00      	nop
 8004708:	e216      	b.n	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800470a:	bf00      	nop
 800470c:	e214      	b.n	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800470e:	bf00      	nop
        break;
 8004710:	e212      	b.n	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004712:	4b5d      	ldr	r3, [pc, #372]	; (8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004718:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800471c:	613b      	str	r3, [r7, #16]
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004724:	d025      	beq.n	8004772 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800472c:	d82c      	bhi.n	8004788 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004734:	d013      	beq.n	800475e <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800473c:	d824      	bhi.n	8004788 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d004      	beq.n	800474e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800474a:	d004      	beq.n	8004756 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 800474c:	e01c      	b.n	8004788 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 800474e:	f7ff f919 	bl	8003984 <HAL_RCC_GetPCLK1Freq>
 8004752:	61f8      	str	r0, [r7, #28]
          break;
 8004754:	e01d      	b.n	8004792 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 8004756:	f7ff f87d 	bl	8003854 <HAL_RCC_GetSysClockFreq>
 800475a:	61f8      	str	r0, [r7, #28]
          break;
 800475c:	e019      	b.n	8004792 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800475e:	4b4a      	ldr	r3, [pc, #296]	; (8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004766:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800476a:	d10f      	bne.n	800478c <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 800476c:	4b47      	ldr	r3, [pc, #284]	; (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 800476e:	61fb      	str	r3, [r7, #28]
          break;
 8004770:	e00c      	b.n	800478c <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004772:	4b45      	ldr	r3, [pc, #276]	; (8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004778:	f003 0302 	and.w	r3, r3, #2
 800477c:	2b02      	cmp	r3, #2
 800477e:	d107      	bne.n	8004790 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 8004780:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004784:	61fb      	str	r3, [r7, #28]
          break;
 8004786:	e003      	b.n	8004790 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 8004788:	bf00      	nop
 800478a:	e1d5      	b.n	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800478c:	bf00      	nop
 800478e:	e1d3      	b.n	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004790:	bf00      	nop
        break;
 8004792:	e1d1      	b.n	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8004794:	4b3c      	ldr	r3, [pc, #240]	; (8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800479a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800479e:	613b      	str	r3, [r7, #16]
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80047a6:	d00c      	beq.n	80047c2 <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80047ae:	d864      	bhi.n	800487a <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047b6:	d008      	beq.n	80047ca <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047be:	d030      	beq.n	8004822 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 80047c0:	e05b      	b.n	800487a <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 80047c2:	f7ff f847 	bl	8003854 <HAL_RCC_GetSysClockFreq>
 80047c6:	61f8      	str	r0, [r7, #28]
          break;
 80047c8:	e05c      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 80047ca:	4b2f      	ldr	r3, [pc, #188]	; (8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047d6:	d152      	bne.n	800487e <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 80047d8:	4b2b      	ldr	r3, [pc, #172]	; (8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d04c      	beq.n	800487e <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80047e4:	4b28      	ldr	r3, [pc, #160]	; (8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	0a1b      	lsrs	r3, r3, #8
 80047ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047ee:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	fb03 f202 	mul.w	r2, r3, r2
 80047f8:	4b23      	ldr	r3, [pc, #140]	; (8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	091b      	lsrs	r3, r3, #4
 80047fe:	f003 0307 	and.w	r3, r3, #7
 8004802:	3301      	adds	r3, #1
 8004804:	fbb2 f3f3 	udiv	r3, r2, r3
 8004808:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800480a:	4b1f      	ldr	r3, [pc, #124]	; (8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	0e5b      	lsrs	r3, r3, #25
 8004810:	f003 0303 	and.w	r3, r3, #3
 8004814:	3301      	adds	r3, #1
 8004816:	005b      	lsls	r3, r3, #1
 8004818:	69ba      	ldr	r2, [r7, #24]
 800481a:	fbb2 f3f3 	udiv	r3, r2, r3
 800481e:	61fb      	str	r3, [r7, #28]
          break;
 8004820:	e02d      	b.n	800487e <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8004822:	4b19      	ldr	r3, [pc, #100]	; (8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800482a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800482e:	d128      	bne.n	8004882 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8004830:	4b15      	ldr	r3, [pc, #84]	; (8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004832:	695b      	ldr	r3, [r3, #20]
 8004834:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004838:	2b00      	cmp	r3, #0
 800483a:	d022      	beq.n	8004882 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800483c:	4b12      	ldr	r3, [pc, #72]	; (8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800483e:	695b      	ldr	r3, [r3, #20]
 8004840:	0a1b      	lsrs	r3, r3, #8
 8004842:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004846:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	fb03 f202 	mul.w	r2, r3, r2
 8004850:	4b0d      	ldr	r3, [pc, #52]	; (8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	091b      	lsrs	r3, r3, #4
 8004856:	f003 0307 	and.w	r3, r3, #7
 800485a:	3301      	adds	r3, #1
 800485c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004860:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8004862:	4b09      	ldr	r3, [pc, #36]	; (8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004864:	695b      	ldr	r3, [r3, #20]
 8004866:	0e5b      	lsrs	r3, r3, #25
 8004868:	f003 0303 	and.w	r3, r3, #3
 800486c:	3301      	adds	r3, #1
 800486e:	005b      	lsls	r3, r3, #1
 8004870:	69ba      	ldr	r2, [r7, #24]
 8004872:	fbb2 f3f3 	udiv	r3, r2, r3
 8004876:	61fb      	str	r3, [r7, #28]
          break;
 8004878:	e003      	b.n	8004882 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 800487a:	bf00      	nop
 800487c:	e15c      	b.n	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800487e:	bf00      	nop
 8004880:	e15a      	b.n	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004882:	bf00      	nop
        break;
 8004884:	e158      	b.n	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8004886:	bf00      	nop
 8004888:	40021000 	.word	0x40021000
 800488c:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8004890:	4b9d      	ldr	r3, [pc, #628]	; (8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004896:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800489a:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d103      	bne.n	80048aa <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 80048a2:	f7ff f885 	bl	80039b0 <HAL_RCC_GetPCLK2Freq>
 80048a6:	61f8      	str	r0, [r7, #28]
        break;
 80048a8:	e146      	b.n	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 80048aa:	f7fe ffd3 	bl	8003854 <HAL_RCC_GetSysClockFreq>
 80048ae:	61f8      	str	r0, [r7, #28]
        break;
 80048b0:	e142      	b.n	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80048b2:	4b95      	ldr	r3, [pc, #596]	; (8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80048b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80048bc:	613b      	str	r3, [r7, #16]
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048c4:	d013      	beq.n	80048ee <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048cc:	d819      	bhi.n	8004902 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d004      	beq.n	80048de <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048da:	d004      	beq.n	80048e6 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 80048dc:	e011      	b.n	8004902 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 80048de:	f7ff f851 	bl	8003984 <HAL_RCC_GetPCLK1Freq>
 80048e2:	61f8      	str	r0, [r7, #28]
          break;
 80048e4:	e010      	b.n	8004908 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 80048e6:	f7fe ffb5 	bl	8003854 <HAL_RCC_GetSysClockFreq>
 80048ea:	61f8      	str	r0, [r7, #28]
          break;
 80048ec:	e00c      	b.n	8004908 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80048ee:	4b86      	ldr	r3, [pc, #536]	; (8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048fa:	d104      	bne.n	8004906 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 80048fc:	4b83      	ldr	r3, [pc, #524]	; (8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80048fe:	61fb      	str	r3, [r7, #28]
          break;
 8004900:	e001      	b.n	8004906 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 8004902:	bf00      	nop
 8004904:	e118      	b.n	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004906:	bf00      	nop
        break;
 8004908:	e116      	b.n	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800490a:	4b7f      	ldr	r3, [pc, #508]	; (8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800490c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004910:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004914:	613b      	str	r3, [r7, #16]
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800491c:	d013      	beq.n	8004946 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004924:	d819      	bhi.n	800495a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d004      	beq.n	8004936 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004932:	d004      	beq.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 8004934:	e011      	b.n	800495a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004936:	f7ff f825 	bl	8003984 <HAL_RCC_GetPCLK1Freq>
 800493a:	61f8      	str	r0, [r7, #28]
          break;
 800493c:	e010      	b.n	8004960 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 800493e:	f7fe ff89 	bl	8003854 <HAL_RCC_GetSysClockFreq>
 8004942:	61f8      	str	r0, [r7, #28]
          break;
 8004944:	e00c      	b.n	8004960 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004946:	4b70      	ldr	r3, [pc, #448]	; (8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800494e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004952:	d104      	bne.n	800495e <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 8004954:	4b6d      	ldr	r3, [pc, #436]	; (8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004956:	61fb      	str	r3, [r7, #28]
          break;
 8004958:	e001      	b.n	800495e <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 800495a:	bf00      	nop
 800495c:	e0ec      	b.n	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800495e:	bf00      	nop
        break;
 8004960:	e0ea      	b.n	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004962:	4b69      	ldr	r3, [pc, #420]	; (8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004968:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800496c:	613b      	str	r3, [r7, #16]
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004974:	d013      	beq.n	800499e <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800497c:	d819      	bhi.n	80049b2 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d004      	beq.n	800498e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800498a:	d004      	beq.n	8004996 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 800498c:	e011      	b.n	80049b2 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 800498e:	f7fe fff9 	bl	8003984 <HAL_RCC_GetPCLK1Freq>
 8004992:	61f8      	str	r0, [r7, #28]
          break;
 8004994:	e010      	b.n	80049b8 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 8004996:	f7fe ff5d 	bl	8003854 <HAL_RCC_GetSysClockFreq>
 800499a:	61f8      	str	r0, [r7, #28]
          break;
 800499c:	e00c      	b.n	80049b8 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800499e:	4b5a      	ldr	r3, [pc, #360]	; (8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049aa:	d104      	bne.n	80049b6 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 80049ac:	4b57      	ldr	r3, [pc, #348]	; (8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80049ae:	61fb      	str	r3, [r7, #28]
          break;
 80049b0:	e001      	b.n	80049b6 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 80049b2:	bf00      	nop
 80049b4:	e0c0      	b.n	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80049b6:	bf00      	nop
        break;
 80049b8:	e0be      	b.n	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80049ba:	4b53      	ldr	r3, [pc, #332]	; (8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80049bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80049c4:	613b      	str	r3, [r7, #16]
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80049cc:	d02c      	beq.n	8004a28 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80049d4:	d833      	bhi.n	8004a3e <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80049dc:	d01a      	beq.n	8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80049e4:	d82b      	bhi.n	8004a3e <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d004      	beq.n	80049f6 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80049f2:	d004      	beq.n	80049fe <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 80049f4:	e023      	b.n	8004a3e <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 80049f6:	f7fe ffc5 	bl	8003984 <HAL_RCC_GetPCLK1Freq>
 80049fa:	61f8      	str	r0, [r7, #28]
          break;
 80049fc:	e026      	b.n	8004a4c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80049fe:	4b42      	ldr	r3, [pc, #264]	; (8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004a00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a04:	f003 0302 	and.w	r3, r3, #2
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d11a      	bne.n	8004a42 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 8004a0c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004a10:	61fb      	str	r3, [r7, #28]
          break;
 8004a12:	e016      	b.n	8004a42 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004a14:	4b3c      	ldr	r3, [pc, #240]	; (8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a20:	d111      	bne.n	8004a46 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 8004a22:	4b3a      	ldr	r3, [pc, #232]	; (8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004a24:	61fb      	str	r3, [r7, #28]
          break;
 8004a26:	e00e      	b.n	8004a46 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004a28:	4b37      	ldr	r3, [pc, #220]	; (8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a2e:	f003 0302 	and.w	r3, r3, #2
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d109      	bne.n	8004a4a <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 8004a36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a3a:	61fb      	str	r3, [r7, #28]
          break;
 8004a3c:	e005      	b.n	8004a4a <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 8004a3e:	bf00      	nop
 8004a40:	e07a      	b.n	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004a42:	bf00      	nop
 8004a44:	e078      	b.n	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004a46:	bf00      	nop
 8004a48:	e076      	b.n	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004a4a:	bf00      	nop
        break;
 8004a4c:	e074      	b.n	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004a4e:	4b2e      	ldr	r3, [pc, #184]	; (8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a54:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004a58:	613b      	str	r3, [r7, #16]
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004a60:	d02c      	beq.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004a68:	d833      	bhi.n	8004ad2 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a70:	d01a      	beq.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a78:	d82b      	bhi.n	8004ad2 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d004      	beq.n	8004a8a <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a86:	d004      	beq.n	8004a92 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 8004a88:	e023      	b.n	8004ad2 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004a8a:	f7fe ff7b 	bl	8003984 <HAL_RCC_GetPCLK1Freq>
 8004a8e:	61f8      	str	r0, [r7, #28]
          break;
 8004a90:	e026      	b.n	8004ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004a92:	4b1d      	ldr	r3, [pc, #116]	; (8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004a94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a98:	f003 0302 	and.w	r3, r3, #2
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d11a      	bne.n	8004ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 8004aa0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004aa4:	61fb      	str	r3, [r7, #28]
          break;
 8004aa6:	e016      	b.n	8004ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004aa8:	4b17      	ldr	r3, [pc, #92]	; (8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ab0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ab4:	d111      	bne.n	8004ada <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 8004ab6:	4b15      	ldr	r3, [pc, #84]	; (8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004ab8:	61fb      	str	r3, [r7, #28]
          break;
 8004aba:	e00e      	b.n	8004ada <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004abc:	4b12      	ldr	r3, [pc, #72]	; (8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ac2:	f003 0302 	and.w	r3, r3, #2
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d109      	bne.n	8004ade <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 8004aca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ace:	61fb      	str	r3, [r7, #28]
          break;
 8004ad0:	e005      	b.n	8004ade <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 8004ad2:	bf00      	nop
 8004ad4:	e030      	b.n	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004ad6:	bf00      	nop
 8004ad8:	e02e      	b.n	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004ada:	bf00      	nop
 8004adc:	e02c      	b.n	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004ade:	bf00      	nop
        break;
 8004ae0:	e02a      	b.n	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8004ae2:	4b09      	ldr	r3, [pc, #36]	; (8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004aec:	613b      	str	r3, [r7, #16]
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d004      	beq.n	8004afe <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004afa:	d009      	beq.n	8004b10 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 8004afc:	e012      	b.n	8004b24 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004afe:	f7fe ff41 	bl	8003984 <HAL_RCC_GetPCLK1Freq>
 8004b02:	61f8      	str	r0, [r7, #28]
          break;
 8004b04:	e00e      	b.n	8004b24 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 8004b06:	bf00      	nop
 8004b08:	40021000 	.word	0x40021000
 8004b0c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004b10:	4b0c      	ldr	r3, [pc, #48]	; (8004b44 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b1c:	d101      	bne.n	8004b22 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 8004b1e:	4b0a      	ldr	r3, [pc, #40]	; (8004b48 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8004b20:	61fb      	str	r3, [r7, #28]
          break;
 8004b22:	bf00      	nop
        break;
 8004b24:	e008      	b.n	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004b26:	bf00      	nop
 8004b28:	e006      	b.n	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004b2a:	bf00      	nop
 8004b2c:	e004      	b.n	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004b2e:	bf00      	nop
 8004b30:	e002      	b.n	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004b32:	bf00      	nop
 8004b34:	e000      	b.n	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004b36:	bf00      	nop
    }
  }

  return(frequency);
 8004b38:	69fb      	ldr	r3, [r7, #28]
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3720      	adds	r7, #32
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	40021000 	.word	0x40021000
 8004b48:	00f42400 	.word	0x00f42400

08004b4c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004b50:	4b05      	ldr	r3, [pc, #20]	; (8004b68 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a04      	ldr	r2, [pc, #16]	; (8004b68 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004b56:	f043 0304 	orr.w	r3, r3, #4
 8004b5a:	6013      	str	r3, [r2, #0]
}
 8004b5c:	bf00      	nop
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	40021000 	.word	0x40021000

08004b6c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b76:	2300      	movs	r3, #0
 8004b78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004b7a:	4b75      	ldr	r3, [pc, #468]	; (8004d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	f003 0303 	and.w	r3, r3, #3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d018      	beq.n	8004bb8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004b86:	4b72      	ldr	r3, [pc, #456]	; (8004d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	f003 0203 	and.w	r2, r3, #3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d10d      	bne.n	8004bb2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
       ||
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d009      	beq.n	8004bb2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004b9e:	4b6c      	ldr	r3, [pc, #432]	; (8004d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	091b      	lsrs	r3, r3, #4
 8004ba4:	f003 0307 	and.w	r3, r3, #7
 8004ba8:	1c5a      	adds	r2, r3, #1
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
       ||
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d047      	beq.n	8004c42 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	73fb      	strb	r3, [r7, #15]
 8004bb6:	e044      	b.n	8004c42 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2b03      	cmp	r3, #3
 8004bbe:	d018      	beq.n	8004bf2 <RCCEx_PLLSAI1_Config+0x86>
 8004bc0:	2b03      	cmp	r3, #3
 8004bc2:	d825      	bhi.n	8004c10 <RCCEx_PLLSAI1_Config+0xa4>
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d002      	beq.n	8004bce <RCCEx_PLLSAI1_Config+0x62>
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d009      	beq.n	8004be0 <RCCEx_PLLSAI1_Config+0x74>
 8004bcc:	e020      	b.n	8004c10 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004bce:	4b60      	ldr	r3, [pc, #384]	; (8004d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0302 	and.w	r3, r3, #2
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d11d      	bne.n	8004c16 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bde:	e01a      	b.n	8004c16 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004be0:	4b5b      	ldr	r3, [pc, #364]	; (8004d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d116      	bne.n	8004c1a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bf0:	e013      	b.n	8004c1a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004bf2:	4b57      	ldr	r3, [pc, #348]	; (8004d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d10f      	bne.n	8004c1e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004bfe:	4b54      	ldr	r3, [pc, #336]	; (8004d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d109      	bne.n	8004c1e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c0e:	e006      	b.n	8004c1e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	73fb      	strb	r3, [r7, #15]
      break;
 8004c14:	e004      	b.n	8004c20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c16:	bf00      	nop
 8004c18:	e002      	b.n	8004c20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c1a:	bf00      	nop
 8004c1c:	e000      	b.n	8004c20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c1e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c20:	7bfb      	ldrb	r3, [r7, #15]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d10d      	bne.n	8004c42 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004c26:	4b4a      	ldr	r3, [pc, #296]	; (8004d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6819      	ldr	r1, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	3b01      	subs	r3, #1
 8004c38:	011b      	lsls	r3, r3, #4
 8004c3a:	430b      	orrs	r3, r1
 8004c3c:	4944      	ldr	r1, [pc, #272]	; (8004d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004c42:	7bfb      	ldrb	r3, [r7, #15]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d17d      	bne.n	8004d44 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004c48:	4b41      	ldr	r3, [pc, #260]	; (8004d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a40      	ldr	r2, [pc, #256]	; (8004d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c4e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c54:	f7fd f972 	bl	8001f3c <HAL_GetTick>
 8004c58:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c5a:	e009      	b.n	8004c70 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c5c:	f7fd f96e 	bl	8001f3c <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d902      	bls.n	8004c70 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	73fb      	strb	r3, [r7, #15]
        break;
 8004c6e:	e005      	b.n	8004c7c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c70:	4b37      	ldr	r3, [pc, #220]	; (8004d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d1ef      	bne.n	8004c5c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004c7c:	7bfb      	ldrb	r3, [r7, #15]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d160      	bne.n	8004d44 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d111      	bne.n	8004cac <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c88:	4b31      	ldr	r3, [pc, #196]	; (8004d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004c90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	6892      	ldr	r2, [r2, #8]
 8004c98:	0211      	lsls	r1, r2, #8
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	68d2      	ldr	r2, [r2, #12]
 8004c9e:	0912      	lsrs	r2, r2, #4
 8004ca0:	0452      	lsls	r2, r2, #17
 8004ca2:	430a      	orrs	r2, r1
 8004ca4:	492a      	ldr	r1, [pc, #168]	; (8004d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	610b      	str	r3, [r1, #16]
 8004caa:	e027      	b.n	8004cfc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d112      	bne.n	8004cd8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004cb2:	4b27      	ldr	r3, [pc, #156]	; (8004d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004cba:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	6892      	ldr	r2, [r2, #8]
 8004cc2:	0211      	lsls	r1, r2, #8
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	6912      	ldr	r2, [r2, #16]
 8004cc8:	0852      	lsrs	r2, r2, #1
 8004cca:	3a01      	subs	r2, #1
 8004ccc:	0552      	lsls	r2, r2, #21
 8004cce:	430a      	orrs	r2, r1
 8004cd0:	491f      	ldr	r1, [pc, #124]	; (8004d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	610b      	str	r3, [r1, #16]
 8004cd6:	e011      	b.n	8004cfc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004cd8:	4b1d      	ldr	r3, [pc, #116]	; (8004d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004ce0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	6892      	ldr	r2, [r2, #8]
 8004ce8:	0211      	lsls	r1, r2, #8
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	6952      	ldr	r2, [r2, #20]
 8004cee:	0852      	lsrs	r2, r2, #1
 8004cf0:	3a01      	subs	r2, #1
 8004cf2:	0652      	lsls	r2, r2, #25
 8004cf4:	430a      	orrs	r2, r1
 8004cf6:	4916      	ldr	r1, [pc, #88]	; (8004d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004cfc:	4b14      	ldr	r3, [pc, #80]	; (8004d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a13      	ldr	r2, [pc, #76]	; (8004d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d02:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d06:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d08:	f7fd f918 	bl	8001f3c <HAL_GetTick>
 8004d0c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d0e:	e009      	b.n	8004d24 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d10:	f7fd f914 	bl	8001f3c <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d902      	bls.n	8004d24 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	73fb      	strb	r3, [r7, #15]
          break;
 8004d22:	e005      	b.n	8004d30 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d24:	4b0a      	ldr	r3, [pc, #40]	; (8004d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d0ef      	beq.n	8004d10 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004d30:	7bfb      	ldrb	r3, [r7, #15]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d106      	bne.n	8004d44 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004d36:	4b06      	ldr	r3, [pc, #24]	; (8004d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d38:	691a      	ldr	r2, [r3, #16]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	699b      	ldr	r3, [r3, #24]
 8004d3e:	4904      	ldr	r1, [pc, #16]	; (8004d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d40:	4313      	orrs	r3, r2
 8004d42:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3710      	adds	r7, #16
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	40021000 	.word	0x40021000

08004d54 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004d62:	4b6a      	ldr	r3, [pc, #424]	; (8004f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	f003 0303 	and.w	r3, r3, #3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d018      	beq.n	8004da0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004d6e:	4b67      	ldr	r3, [pc, #412]	; (8004f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	f003 0203 	and.w	r2, r3, #3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d10d      	bne.n	8004d9a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
       ||
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d009      	beq.n	8004d9a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004d86:	4b61      	ldr	r3, [pc, #388]	; (8004f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	091b      	lsrs	r3, r3, #4
 8004d8c:	f003 0307 	and.w	r3, r3, #7
 8004d90:	1c5a      	adds	r2, r3, #1
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
       ||
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d047      	beq.n	8004e2a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	73fb      	strb	r3, [r7, #15]
 8004d9e:	e044      	b.n	8004e2a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2b03      	cmp	r3, #3
 8004da6:	d018      	beq.n	8004dda <RCCEx_PLLSAI2_Config+0x86>
 8004da8:	2b03      	cmp	r3, #3
 8004daa:	d825      	bhi.n	8004df8 <RCCEx_PLLSAI2_Config+0xa4>
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d002      	beq.n	8004db6 <RCCEx_PLLSAI2_Config+0x62>
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d009      	beq.n	8004dc8 <RCCEx_PLLSAI2_Config+0x74>
 8004db4:	e020      	b.n	8004df8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004db6:	4b55      	ldr	r3, [pc, #340]	; (8004f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0302 	and.w	r3, r3, #2
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d11d      	bne.n	8004dfe <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dc6:	e01a      	b.n	8004dfe <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004dc8:	4b50      	ldr	r3, [pc, #320]	; (8004f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d116      	bne.n	8004e02 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dd8:	e013      	b.n	8004e02 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004dda:	4b4c      	ldr	r3, [pc, #304]	; (8004f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d10f      	bne.n	8004e06 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004de6:	4b49      	ldr	r3, [pc, #292]	; (8004f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d109      	bne.n	8004e06 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004df6:	e006      	b.n	8004e06 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	73fb      	strb	r3, [r7, #15]
      break;
 8004dfc:	e004      	b.n	8004e08 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004dfe:	bf00      	nop
 8004e00:	e002      	b.n	8004e08 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e02:	bf00      	nop
 8004e04:	e000      	b.n	8004e08 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e06:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e08:	7bfb      	ldrb	r3, [r7, #15]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d10d      	bne.n	8004e2a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e0e:	4b3f      	ldr	r3, [pc, #252]	; (8004f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6819      	ldr	r1, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	3b01      	subs	r3, #1
 8004e20:	011b      	lsls	r3, r3, #4
 8004e22:	430b      	orrs	r3, r1
 8004e24:	4939      	ldr	r1, [pc, #228]	; (8004f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004e2a:	7bfb      	ldrb	r3, [r7, #15]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d167      	bne.n	8004f00 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004e30:	4b36      	ldr	r3, [pc, #216]	; (8004f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a35      	ldr	r2, [pc, #212]	; (8004f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e3c:	f7fd f87e 	bl	8001f3c <HAL_GetTick>
 8004e40:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e42:	e009      	b.n	8004e58 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e44:	f7fd f87a 	bl	8001f3c <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d902      	bls.n	8004e58 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	73fb      	strb	r3, [r7, #15]
        break;
 8004e56:	e005      	b.n	8004e64 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e58:	4b2c      	ldr	r3, [pc, #176]	; (8004f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d1ef      	bne.n	8004e44 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004e64:	7bfb      	ldrb	r3, [r7, #15]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d14a      	bne.n	8004f00 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d111      	bne.n	8004e94 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004e70:	4b26      	ldr	r3, [pc, #152]	; (8004f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e72:	695b      	ldr	r3, [r3, #20]
 8004e74:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004e78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	6892      	ldr	r2, [r2, #8]
 8004e80:	0211      	lsls	r1, r2, #8
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	68d2      	ldr	r2, [r2, #12]
 8004e86:	0912      	lsrs	r2, r2, #4
 8004e88:	0452      	lsls	r2, r2, #17
 8004e8a:	430a      	orrs	r2, r1
 8004e8c:	491f      	ldr	r1, [pc, #124]	; (8004f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	614b      	str	r3, [r1, #20]
 8004e92:	e011      	b.n	8004eb8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004e94:	4b1d      	ldr	r3, [pc, #116]	; (8004f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e96:	695b      	ldr	r3, [r3, #20]
 8004e98:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004e9c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	6892      	ldr	r2, [r2, #8]
 8004ea4:	0211      	lsls	r1, r2, #8
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	6912      	ldr	r2, [r2, #16]
 8004eaa:	0852      	lsrs	r2, r2, #1
 8004eac:	3a01      	subs	r2, #1
 8004eae:	0652      	lsls	r2, r2, #25
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	4916      	ldr	r1, [pc, #88]	; (8004f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004eb8:	4b14      	ldr	r3, [pc, #80]	; (8004f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a13      	ldr	r2, [pc, #76]	; (8004f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ebe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ec2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ec4:	f7fd f83a 	bl	8001f3c <HAL_GetTick>
 8004ec8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004eca:	e009      	b.n	8004ee0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004ecc:	f7fd f836 	bl	8001f3c <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d902      	bls.n	8004ee0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	73fb      	strb	r3, [r7, #15]
          break;
 8004ede:	e005      	b.n	8004eec <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004ee0:	4b0a      	ldr	r3, [pc, #40]	; (8004f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d0ef      	beq.n	8004ecc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004eec:	7bfb      	ldrb	r3, [r7, #15]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d106      	bne.n	8004f00 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004ef2:	4b06      	ldr	r3, [pc, #24]	; (8004f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ef4:	695a      	ldr	r2, [r3, #20]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	4904      	ldr	r1, [pc, #16]	; (8004f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3710      	adds	r7, #16
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	40021000 	.word	0x40021000

08004f10 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b089      	sub	sp, #36	; 0x24
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8004f22:	2300      	movs	r3, #0
 8004f24:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f2c:	d10c      	bne.n	8004f48 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8004f2e:	4b6e      	ldr	r3, [pc, #440]	; (80050e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f34:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004f38:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004f40:	d112      	bne.n	8004f68 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004f42:	4b6a      	ldr	r3, [pc, #424]	; (80050ec <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8004f44:	61fb      	str	r3, [r7, #28]
 8004f46:	e00f      	b.n	8004f68 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f4e:	d10b      	bne.n	8004f68 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8004f50:	4b65      	ldr	r3, [pc, #404]	; (80050e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f56:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8004f5a:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004f62:	d101      	bne.n	8004f68 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8004f64:	4b61      	ldr	r3, [pc, #388]	; (80050ec <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8004f66:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	f040 80b4 	bne.w	80050d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8004f74:	69bb      	ldr	r3, [r7, #24]
 8004f76:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f7a:	d003      	beq.n	8004f84 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f82:	d135      	bne.n	8004ff0 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004f84:	4b58      	ldr	r3, [pc, #352]	; (80050e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f90:	f040 80a1 	bne.w	80050d6 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 8004f94:	4b54      	ldr	r3, [pc, #336]	; (80050e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f000 809a 	beq.w	80050d6 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004fa2:	4b51      	ldr	r3, [pc, #324]	; (80050e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	091b      	lsrs	r3, r3, #4
 8004fa8:	f003 0307 	and.w	r3, r3, #7
 8004fac:	3301      	adds	r3, #1
 8004fae:	693a      	ldr	r2, [r7, #16]
 8004fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fb4:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004fb6:	4b4c      	ldr	r3, [pc, #304]	; (80050e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	0a1b      	lsrs	r3, r3, #8
 8004fbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fc0:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d10a      	bne.n	8004fde <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8004fc8:	4b47      	ldr	r3, [pc, #284]	; (80050e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d002      	beq.n	8004fda <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 8004fd4:	2311      	movs	r3, #17
 8004fd6:	617b      	str	r3, [r7, #20]
 8004fd8:	e001      	b.n	8004fde <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 8004fda:	2307      	movs	r3, #7
 8004fdc:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	68fa      	ldr	r2, [r7, #12]
 8004fe2:	fb03 f202 	mul.w	r2, r3, r2
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fec:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004fee:	e072      	b.n	80050d6 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d133      	bne.n	800505e <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8004ff6:	4b3c      	ldr	r3, [pc, #240]	; (80050e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ffe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005002:	d169      	bne.n	80050d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8005004:	4b38      	ldr	r3, [pc, #224]	; (80050e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d063      	beq.n	80050d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005010:	4b35      	ldr	r3, [pc, #212]	; (80050e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	091b      	lsrs	r3, r3, #4
 8005016:	f003 0307 	and.w	r3, r3, #7
 800501a:	3301      	adds	r3, #1
 800501c:	693a      	ldr	r2, [r7, #16]
 800501e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005022:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005024:	4b30      	ldr	r3, [pc, #192]	; (80050e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	0a1b      	lsrs	r3, r3, #8
 800502a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800502e:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d10a      	bne.n	800504c <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8005036:	4b2c      	ldr	r3, [pc, #176]	; (80050e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d002      	beq.n	8005048 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 8005042:	2311      	movs	r3, #17
 8005044:	617b      	str	r3, [r7, #20]
 8005046:	e001      	b.n	800504c <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8005048:	2307      	movs	r3, #7
 800504a:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	68fa      	ldr	r2, [r7, #12]
 8005050:	fb03 f202 	mul.w	r2, r3, r2
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	fbb2 f3f3 	udiv	r3, r2, r3
 800505a:	61fb      	str	r3, [r7, #28]
 800505c:	e03c      	b.n	80050d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005064:	d003      	beq.n	800506e <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800506c:	d134      	bne.n	80050d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800506e:	4b1e      	ldr	r3, [pc, #120]	; (80050e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005076:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800507a:	d12d      	bne.n	80050d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 800507c:	4b1a      	ldr	r3, [pc, #104]	; (80050e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800507e:	695b      	ldr	r3, [r3, #20]
 8005080:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d027      	beq.n	80050d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005088:	4b17      	ldr	r3, [pc, #92]	; (80050e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	091b      	lsrs	r3, r3, #4
 800508e:	f003 0307 	and.w	r3, r3, #7
 8005092:	3301      	adds	r3, #1
 8005094:	693a      	ldr	r2, [r7, #16]
 8005096:	fbb2 f3f3 	udiv	r3, r2, r3
 800509a:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800509c:	4b12      	ldr	r3, [pc, #72]	; (80050e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800509e:	695b      	ldr	r3, [r3, #20]
 80050a0:	0a1b      	lsrs	r3, r3, #8
 80050a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050a6:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d10a      	bne.n	80050c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80050ae:	4b0e      	ldr	r3, [pc, #56]	; (80050e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d002      	beq.n	80050c0 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 80050ba:	2311      	movs	r3, #17
 80050bc:	617b      	str	r3, [r7, #20]
 80050be:	e001      	b.n	80050c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 80050c0:	2307      	movs	r3, #7
 80050c2:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	fb03 f202 	mul.w	r2, r3, r2
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80050d2:	61fb      	str	r3, [r7, #28]
 80050d4:	e000      	b.n	80050d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80050d6:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80050d8:	69fb      	ldr	r3, [r7, #28]
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3724      	adds	r7, #36	; 0x24
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	40021000 	.word	0x40021000
 80050ec:	001fff68 	.word	0x001fff68

080050f0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b088      	sub	sp, #32
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d101      	bne.n	8005102 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e155      	b.n	80053ae <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8005108:	b2db      	uxtb	r3, r3
 800510a:	2b00      	cmp	r3, #0
 800510c:	d106      	bne.n	800511c <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f7fb ff4c 	bl	8000fb4 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 f959 	bl	80053d4 <SAI_Disable>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d001      	beq.n	800512c <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e140      	b.n	80053ae <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2202      	movs	r2, #2
 8005130:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	2b02      	cmp	r3, #2
 800513a:	d00c      	beq.n	8005156 <HAL_SAI_Init+0x66>
 800513c:	2b02      	cmp	r3, #2
 800513e:	d80d      	bhi.n	800515c <HAL_SAI_Init+0x6c>
 8005140:	2b00      	cmp	r3, #0
 8005142:	d002      	beq.n	800514a <HAL_SAI_Init+0x5a>
 8005144:	2b01      	cmp	r3, #1
 8005146:	d003      	beq.n	8005150 <HAL_SAI_Init+0x60>
 8005148:	e008      	b.n	800515c <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800514a:	2300      	movs	r3, #0
 800514c:	61fb      	str	r3, [r7, #28]
      break;
 800514e:	e008      	b.n	8005162 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8005150:	2310      	movs	r3, #16
 8005152:	61fb      	str	r3, [r7, #28]
      break;
 8005154:	e005      	b.n	8005162 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8005156:	2320      	movs	r3, #32
 8005158:	61fb      	str	r3, [r7, #28]
      break;
 800515a:	e002      	b.n	8005162 <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 800515c:	2300      	movs	r3, #0
 800515e:	61fb      	str	r3, [r7, #28]
      break;
 8005160:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	2b03      	cmp	r3, #3
 8005168:	d81d      	bhi.n	80051a6 <HAL_SAI_Init+0xb6>
 800516a:	a201      	add	r2, pc, #4	; (adr r2, 8005170 <HAL_SAI_Init+0x80>)
 800516c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005170:	08005181 	.word	0x08005181
 8005174:	08005187 	.word	0x08005187
 8005178:	0800518f 	.word	0x0800518f
 800517c:	08005197 	.word	0x08005197
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8005180:	2300      	movs	r3, #0
 8005182:	617b      	str	r3, [r7, #20]
      break;
 8005184:	e012      	b.n	80051ac <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8005186:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800518a:	617b      	str	r3, [r7, #20]
      break;
 800518c:	e00e      	b.n	80051ac <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800518e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005192:	617b      	str	r3, [r7, #20]
      break;
 8005194:	e00a      	b.n	80051ac <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005196:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800519a:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	f043 0301 	orr.w	r3, r3, #1
 80051a2:	61fb      	str	r3, [r7, #28]
      break;
 80051a4:	e002      	b.n	80051ac <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 80051a6:	2300      	movs	r3, #0
 80051a8:	617b      	str	r3, [r7, #20]
      break;
 80051aa:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a81      	ldr	r2, [pc, #516]	; (80053b8 <HAL_SAI_Init+0x2c8>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d004      	beq.n	80051c0 <HAL_SAI_Init+0xd0>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a80      	ldr	r2, [pc, #512]	; (80053bc <HAL_SAI_Init+0x2cc>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d103      	bne.n	80051c8 <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 80051c0:	4a7f      	ldr	r2, [pc, #508]	; (80053c0 <HAL_SAI_Init+0x2d0>)
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	6013      	str	r3, [r2, #0]
 80051c6:	e002      	b.n	80051ce <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80051c8:	4a7e      	ldr	r2, [pc, #504]	; (80053c4 <HAL_SAI_Init+0x2d4>)
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	69db      	ldr	r3, [r3, #28]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d041      	beq.n	800525a <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a77      	ldr	r2, [pc, #476]	; (80053b8 <HAL_SAI_Init+0x2c8>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d004      	beq.n	80051ea <HAL_SAI_Init+0xfa>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a75      	ldr	r2, [pc, #468]	; (80053bc <HAL_SAI_Init+0x2cc>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d105      	bne.n	80051f6 <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80051ea:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80051ee:	f7fe ff3f 	bl	8004070 <HAL_RCCEx_GetPeriphCLKFreq>
 80051f2:	6138      	str	r0, [r7, #16]
 80051f4:	e004      	b.n	8005200 <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80051f6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80051fa:	f7fe ff39 	bl	8004070 <HAL_RCCEx_GetPeriphCLKFreq>
 80051fe:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8005200:	693a      	ldr	r2, [r7, #16]
 8005202:	4613      	mov	r3, r2
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	4413      	add	r3, r2
 8005208:	005b      	lsls	r3, r3, #1
 800520a:	461a      	mov	r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	69db      	ldr	r3, [r3, #28]
 8005210:	025b      	lsls	r3, r3, #9
 8005212:	fbb2 f3f3 	udiv	r3, r2, r3
 8005216:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	4a6b      	ldr	r2, [pc, #428]	; (80053c8 <HAL_SAI_Init+0x2d8>)
 800521c:	fba2 2303 	umull	r2, r3, r2, r3
 8005220:	08da      	lsrs	r2, r3, #3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8005226:	68f9      	ldr	r1, [r7, #12]
 8005228:	4b67      	ldr	r3, [pc, #412]	; (80053c8 <HAL_SAI_Init+0x2d8>)
 800522a:	fba3 2301 	umull	r2, r3, r3, r1
 800522e:	08da      	lsrs	r2, r3, #3
 8005230:	4613      	mov	r3, r2
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	4413      	add	r3, r2
 8005236:	005b      	lsls	r3, r3, #1
 8005238:	1aca      	subs	r2, r1, r3
 800523a:	2a08      	cmp	r2, #8
 800523c:	d904      	bls.n	8005248 <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a1b      	ldr	r3, [r3, #32]
 8005242:	1c5a      	adds	r2, r3, #1
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800524c:	2b04      	cmp	r3, #4
 800524e:	d104      	bne.n	800525a <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a1b      	ldr	r3, [r3, #32]
 8005254:	085a      	lsrs	r2, r3, #1
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d003      	beq.n	800526a <HAL_SAI_Init+0x17a>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	2b02      	cmp	r3, #2
 8005268:	d109      	bne.n	800527e <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800526e:	2b01      	cmp	r3, #1
 8005270:	d101      	bne.n	8005276 <HAL_SAI_Init+0x186>
 8005272:	2300      	movs	r3, #0
 8005274:	e001      	b.n	800527a <HAL_SAI_Init+0x18a>
 8005276:	f44f 7300 	mov.w	r3, #512	; 0x200
 800527a:	61bb      	str	r3, [r7, #24]
 800527c:	e008      	b.n	8005290 <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005282:	2b01      	cmp	r3, #1
 8005284:	d102      	bne.n	800528c <HAL_SAI_Init+0x19c>
 8005286:	f44f 7300 	mov.w	r3, #512	; 0x200
 800528a:	e000      	b.n	800528e <HAL_SAI_Init+0x19e>
 800528c:	2300      	movs	r3, #0
 800528e:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	6819      	ldr	r1, [r3, #0]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	4b4c      	ldr	r3, [pc, #304]	; (80053cc <HAL_SAI_Init+0x2dc>)
 800529c:	400b      	ands	r3, r1
 800529e:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	6819      	ldr	r1, [r3, #0]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685a      	ldr	r2, [r3, #4]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ae:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80052b4:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ba:	431a      	orrs	r2, r3
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 80052c8:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80052d4:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a1b      	ldr	r3, [r3, #32]
 80052da:	051b      	lsls	r3, r3, #20
 80052dc:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	430a      	orrs	r2, r1
 80052e4:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	6812      	ldr	r2, [r2, #0]
 80052f0:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80052f4:	f023 030f 	bic.w	r3, r3, #15
 80052f8:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	6859      	ldr	r1, [r3, #4]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	699a      	ldr	r2, [r3, #24]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005308:	431a      	orrs	r2, r3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530e:	431a      	orrs	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	430a      	orrs	r2, r1
 8005316:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	6899      	ldr	r1, [r3, #8]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	4b2b      	ldr	r3, [pc, #172]	; (80053d0 <HAL_SAI_Init+0x2e0>)
 8005324:	400b      	ands	r3, r1
 8005326:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	6899      	ldr	r1, [r3, #8]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005332:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005338:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800533e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8005344:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800534a:	3b01      	subs	r3, #1
 800534c:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800534e:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	430a      	orrs	r2, r1
 8005356:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68d9      	ldr	r1, [r3, #12]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	f24f 0320 	movw	r3, #61472	; 0xf020
 8005366:	400b      	ands	r3, r1
 8005368:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68d9      	ldr	r1, [r3, #12]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005378:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800537e:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005380:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005386:	3b01      	subs	r3, #1
 8005388:	021b      	lsls	r3, r3, #8
 800538a:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	430a      	orrs	r2, r1
 8005392:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3720      	adds	r7, #32
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	40015404 	.word	0x40015404
 80053bc:	40015424 	.word	0x40015424
 80053c0:	40015400 	.word	0x40015400
 80053c4:	40015800 	.word	0x40015800
 80053c8:	cccccccd 	.word	0xcccccccd
 80053cc:	ff05c010 	.word	0xff05c010
 80053d0:	fff88000 	.word	0xfff88000

080053d4 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b085      	sub	sp, #20
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80053dc:	4b18      	ldr	r3, [pc, #96]	; (8005440 <SAI_Disable+0x6c>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a18      	ldr	r2, [pc, #96]	; (8005444 <SAI_Disable+0x70>)
 80053e2:	fba2 2303 	umull	r2, r3, r2, r3
 80053e6:	0b1b      	lsrs	r3, r3, #12
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80053ec:	2300      	movs	r3, #0
 80053ee:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80053fe:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d10a      	bne.n	800541c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800540c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	72fb      	strb	r3, [r7, #11]
      break;
 800541a:	e009      	b.n	8005430 <SAI_Disable+0x5c>
    }
    count--;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	3b01      	subs	r3, #1
 8005420:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800542c:	2b00      	cmp	r3, #0
 800542e:	d1e7      	bne.n	8005400 <SAI_Disable+0x2c>

  return status;
 8005430:	7afb      	ldrb	r3, [r7, #11]
}
 8005432:	4618      	mov	r0, r3
 8005434:	3714      	adds	r7, #20
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	20000000 	.word	0x20000000
 8005444:	95cbec1b 	.word	0x95cbec1b

08005448 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d101      	bne.n	800545a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e095      	b.n	8005586 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545e:	2b00      	cmp	r3, #0
 8005460:	d108      	bne.n	8005474 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800546a:	d009      	beq.n	8005480 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	61da      	str	r2, [r3, #28]
 8005472:	e005      	b.n	8005480 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800548c:	b2db      	uxtb	r3, r3
 800548e:	2b00      	cmp	r3, #0
 8005490:	d106      	bne.n	80054a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f7fb fe40 	bl	8001120 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2202      	movs	r2, #2
 80054a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054b6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80054c0:	d902      	bls.n	80054c8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80054c2:	2300      	movs	r3, #0
 80054c4:	60fb      	str	r3, [r7, #12]
 80054c6:	e002      	b.n	80054ce <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80054c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054cc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80054d6:	d007      	beq.n	80054e8 <HAL_SPI_Init+0xa0>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80054e0:	d002      	beq.n	80054e8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80054f8:	431a      	orrs	r2, r3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	f003 0302 	and.w	r3, r3, #2
 8005502:	431a      	orrs	r2, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	695b      	ldr	r3, [r3, #20]
 8005508:	f003 0301 	and.w	r3, r3, #1
 800550c:	431a      	orrs	r2, r3
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	699b      	ldr	r3, [r3, #24]
 8005512:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005516:	431a      	orrs	r2, r3
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	69db      	ldr	r3, [r3, #28]
 800551c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005520:	431a      	orrs	r2, r3
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a1b      	ldr	r3, [r3, #32]
 8005526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800552a:	ea42 0103 	orr.w	r1, r2, r3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005532:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	430a      	orrs	r2, r1
 800553c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	699b      	ldr	r3, [r3, #24]
 8005542:	0c1b      	lsrs	r3, r3, #16
 8005544:	f003 0204 	and.w	r2, r3, #4
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554c:	f003 0310 	and.w	r3, r3, #16
 8005550:	431a      	orrs	r2, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005556:	f003 0308 	and.w	r3, r3, #8
 800555a:	431a      	orrs	r2, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005564:	ea42 0103 	orr.w	r1, r2, r3
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	430a      	orrs	r2, r1
 8005574:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005584:	2300      	movs	r3, #0
}
 8005586:	4618      	mov	r0, r3
 8005588:	3710      	adds	r7, #16
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}

0800558e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800558e:	b480      	push	{r7}
 8005590:	b083      	sub	sp, #12
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800559c:	b2db      	uxtb	r3, r3
}
 800559e:	4618      	mov	r0, r3
 80055a0:	370c      	adds	r7, #12
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr

080055aa <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055aa:	b580      	push	{r7, lr}
 80055ac:	b082      	sub	sp, #8
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d101      	bne.n	80055bc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e040      	b.n	800563e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d106      	bne.n	80055d2 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f7fb ff17 	bl	8001400 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2224      	movs	r2, #36	; 0x24
 80055d6:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f022 0201 	bic.w	r2, r2, #1
 80055e6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d002      	beq.n	80055f6 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f000 fb6b 	bl	8005ccc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 f8b0 	bl	800575c <UART_SetConfig>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d101      	bne.n	8005606 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e01b      	b.n	800563e <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	685a      	ldr	r2, [r3, #4]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005614:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	689a      	ldr	r2, [r3, #8]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005624:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f042 0201 	orr.w	r2, r2, #1
 8005634:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 fbea 	bl	8005e10 <UART_CheckIdleState>
 800563c:	4603      	mov	r3, r0
}
 800563e:	4618      	mov	r0, r3
 8005640:	3708      	adds	r7, #8
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}

08005646 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005646:	b580      	push	{r7, lr}
 8005648:	b08a      	sub	sp, #40	; 0x28
 800564a:	af02      	add	r7, sp, #8
 800564c:	60f8      	str	r0, [r7, #12]
 800564e:	60b9      	str	r1, [r7, #8]
 8005650:	603b      	str	r3, [r7, #0]
 8005652:	4613      	mov	r3, r2
 8005654:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800565a:	2b20      	cmp	r3, #32
 800565c:	d178      	bne.n	8005750 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d002      	beq.n	800566a <HAL_UART_Transmit+0x24>
 8005664:	88fb      	ldrh	r3, [r7, #6]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d101      	bne.n	800566e <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e071      	b.n	8005752 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2221      	movs	r2, #33	; 0x21
 800567a:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800567c:	f7fc fc5e 	bl	8001f3c <HAL_GetTick>
 8005680:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	88fa      	ldrh	r2, [r7, #6]
 8005686:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	88fa      	ldrh	r2, [r7, #6]
 800568e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800569a:	d108      	bne.n	80056ae <HAL_UART_Transmit+0x68>
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d104      	bne.n	80056ae <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80056a4:	2300      	movs	r3, #0
 80056a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	61bb      	str	r3, [r7, #24]
 80056ac:	e003      	b.n	80056b6 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056b2:	2300      	movs	r3, #0
 80056b4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80056b6:	e030      	b.n	800571a <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	9300      	str	r3, [sp, #0]
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	2200      	movs	r2, #0
 80056c0:	2180      	movs	r1, #128	; 0x80
 80056c2:	68f8      	ldr	r0, [r7, #12]
 80056c4:	f000 fc4c 	bl	8005f60 <UART_WaitOnFlagUntilTimeout>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d004      	beq.n	80056d8 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2220      	movs	r2, #32
 80056d2:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80056d4:	2303      	movs	r3, #3
 80056d6:	e03c      	b.n	8005752 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d10b      	bne.n	80056f6 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	881a      	ldrh	r2, [r3, #0]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056ea:	b292      	uxth	r2, r2
 80056ec:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	3302      	adds	r3, #2
 80056f2:	61bb      	str	r3, [r7, #24]
 80056f4:	e008      	b.n	8005708 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	781a      	ldrb	r2, [r3, #0]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	b292      	uxth	r2, r2
 8005700:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	3301      	adds	r3, #1
 8005706:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800570e:	b29b      	uxth	r3, r3
 8005710:	3b01      	subs	r3, #1
 8005712:	b29a      	uxth	r2, r3
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005720:	b29b      	uxth	r3, r3
 8005722:	2b00      	cmp	r3, #0
 8005724:	d1c8      	bne.n	80056b8 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	9300      	str	r3, [sp, #0]
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	2200      	movs	r2, #0
 800572e:	2140      	movs	r1, #64	; 0x40
 8005730:	68f8      	ldr	r0, [r7, #12]
 8005732:	f000 fc15 	bl	8005f60 <UART_WaitOnFlagUntilTimeout>
 8005736:	4603      	mov	r3, r0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d004      	beq.n	8005746 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2220      	movs	r2, #32
 8005740:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	e005      	b.n	8005752 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2220      	movs	r2, #32
 800574a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800574c:	2300      	movs	r3, #0
 800574e:	e000      	b.n	8005752 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8005750:	2302      	movs	r3, #2
  }
}
 8005752:	4618      	mov	r0, r3
 8005754:	3720      	adds	r7, #32
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
	...

0800575c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800575c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005760:	b08a      	sub	sp, #40	; 0x28
 8005762:	af00      	add	r7, sp, #0
 8005764:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005766:	2300      	movs	r3, #0
 8005768:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	689a      	ldr	r2, [r3, #8]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	691b      	ldr	r3, [r3, #16]
 8005774:	431a      	orrs	r2, r3
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	695b      	ldr	r3, [r3, #20]
 800577a:	431a      	orrs	r2, r3
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	69db      	ldr	r3, [r3, #28]
 8005780:	4313      	orrs	r3, r2
 8005782:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	4ba4      	ldr	r3, [pc, #656]	; (8005a1c <UART_SetConfig+0x2c0>)
 800578c:	4013      	ands	r3, r2
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	6812      	ldr	r2, [r2, #0]
 8005792:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005794:	430b      	orrs	r3, r1
 8005796:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	68da      	ldr	r2, [r3, #12]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	430a      	orrs	r2, r1
 80057ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	699b      	ldr	r3, [r3, #24]
 80057b2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a99      	ldr	r2, [pc, #612]	; (8005a20 <UART_SetConfig+0x2c4>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d004      	beq.n	80057c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6a1b      	ldr	r3, [r3, #32]
 80057c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057c4:	4313      	orrs	r3, r2
 80057c6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057d8:	430a      	orrs	r2, r1
 80057da:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a90      	ldr	r2, [pc, #576]	; (8005a24 <UART_SetConfig+0x2c8>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d126      	bne.n	8005834 <UART_SetConfig+0xd8>
 80057e6:	4b90      	ldr	r3, [pc, #576]	; (8005a28 <UART_SetConfig+0x2cc>)
 80057e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057ec:	f003 0303 	and.w	r3, r3, #3
 80057f0:	2b03      	cmp	r3, #3
 80057f2:	d81b      	bhi.n	800582c <UART_SetConfig+0xd0>
 80057f4:	a201      	add	r2, pc, #4	; (adr r2, 80057fc <UART_SetConfig+0xa0>)
 80057f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057fa:	bf00      	nop
 80057fc:	0800580d 	.word	0x0800580d
 8005800:	0800581d 	.word	0x0800581d
 8005804:	08005815 	.word	0x08005815
 8005808:	08005825 	.word	0x08005825
 800580c:	2301      	movs	r3, #1
 800580e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005812:	e116      	b.n	8005a42 <UART_SetConfig+0x2e6>
 8005814:	2302      	movs	r3, #2
 8005816:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800581a:	e112      	b.n	8005a42 <UART_SetConfig+0x2e6>
 800581c:	2304      	movs	r3, #4
 800581e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005822:	e10e      	b.n	8005a42 <UART_SetConfig+0x2e6>
 8005824:	2308      	movs	r3, #8
 8005826:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800582a:	e10a      	b.n	8005a42 <UART_SetConfig+0x2e6>
 800582c:	2310      	movs	r3, #16
 800582e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005832:	e106      	b.n	8005a42 <UART_SetConfig+0x2e6>
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a7c      	ldr	r2, [pc, #496]	; (8005a2c <UART_SetConfig+0x2d0>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d138      	bne.n	80058b0 <UART_SetConfig+0x154>
 800583e:	4b7a      	ldr	r3, [pc, #488]	; (8005a28 <UART_SetConfig+0x2cc>)
 8005840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005844:	f003 030c 	and.w	r3, r3, #12
 8005848:	2b0c      	cmp	r3, #12
 800584a:	d82d      	bhi.n	80058a8 <UART_SetConfig+0x14c>
 800584c:	a201      	add	r2, pc, #4	; (adr r2, 8005854 <UART_SetConfig+0xf8>)
 800584e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005852:	bf00      	nop
 8005854:	08005889 	.word	0x08005889
 8005858:	080058a9 	.word	0x080058a9
 800585c:	080058a9 	.word	0x080058a9
 8005860:	080058a9 	.word	0x080058a9
 8005864:	08005899 	.word	0x08005899
 8005868:	080058a9 	.word	0x080058a9
 800586c:	080058a9 	.word	0x080058a9
 8005870:	080058a9 	.word	0x080058a9
 8005874:	08005891 	.word	0x08005891
 8005878:	080058a9 	.word	0x080058a9
 800587c:	080058a9 	.word	0x080058a9
 8005880:	080058a9 	.word	0x080058a9
 8005884:	080058a1 	.word	0x080058a1
 8005888:	2300      	movs	r3, #0
 800588a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800588e:	e0d8      	b.n	8005a42 <UART_SetConfig+0x2e6>
 8005890:	2302      	movs	r3, #2
 8005892:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005896:	e0d4      	b.n	8005a42 <UART_SetConfig+0x2e6>
 8005898:	2304      	movs	r3, #4
 800589a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800589e:	e0d0      	b.n	8005a42 <UART_SetConfig+0x2e6>
 80058a0:	2308      	movs	r3, #8
 80058a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058a6:	e0cc      	b.n	8005a42 <UART_SetConfig+0x2e6>
 80058a8:	2310      	movs	r3, #16
 80058aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058ae:	e0c8      	b.n	8005a42 <UART_SetConfig+0x2e6>
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a5e      	ldr	r2, [pc, #376]	; (8005a30 <UART_SetConfig+0x2d4>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d125      	bne.n	8005906 <UART_SetConfig+0x1aa>
 80058ba:	4b5b      	ldr	r3, [pc, #364]	; (8005a28 <UART_SetConfig+0x2cc>)
 80058bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058c0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80058c4:	2b30      	cmp	r3, #48	; 0x30
 80058c6:	d016      	beq.n	80058f6 <UART_SetConfig+0x19a>
 80058c8:	2b30      	cmp	r3, #48	; 0x30
 80058ca:	d818      	bhi.n	80058fe <UART_SetConfig+0x1a2>
 80058cc:	2b20      	cmp	r3, #32
 80058ce:	d00a      	beq.n	80058e6 <UART_SetConfig+0x18a>
 80058d0:	2b20      	cmp	r3, #32
 80058d2:	d814      	bhi.n	80058fe <UART_SetConfig+0x1a2>
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d002      	beq.n	80058de <UART_SetConfig+0x182>
 80058d8:	2b10      	cmp	r3, #16
 80058da:	d008      	beq.n	80058ee <UART_SetConfig+0x192>
 80058dc:	e00f      	b.n	80058fe <UART_SetConfig+0x1a2>
 80058de:	2300      	movs	r3, #0
 80058e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058e4:	e0ad      	b.n	8005a42 <UART_SetConfig+0x2e6>
 80058e6:	2302      	movs	r3, #2
 80058e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058ec:	e0a9      	b.n	8005a42 <UART_SetConfig+0x2e6>
 80058ee:	2304      	movs	r3, #4
 80058f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058f4:	e0a5      	b.n	8005a42 <UART_SetConfig+0x2e6>
 80058f6:	2308      	movs	r3, #8
 80058f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058fc:	e0a1      	b.n	8005a42 <UART_SetConfig+0x2e6>
 80058fe:	2310      	movs	r3, #16
 8005900:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005904:	e09d      	b.n	8005a42 <UART_SetConfig+0x2e6>
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a4a      	ldr	r2, [pc, #296]	; (8005a34 <UART_SetConfig+0x2d8>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d125      	bne.n	800595c <UART_SetConfig+0x200>
 8005910:	4b45      	ldr	r3, [pc, #276]	; (8005a28 <UART_SetConfig+0x2cc>)
 8005912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005916:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800591a:	2bc0      	cmp	r3, #192	; 0xc0
 800591c:	d016      	beq.n	800594c <UART_SetConfig+0x1f0>
 800591e:	2bc0      	cmp	r3, #192	; 0xc0
 8005920:	d818      	bhi.n	8005954 <UART_SetConfig+0x1f8>
 8005922:	2b80      	cmp	r3, #128	; 0x80
 8005924:	d00a      	beq.n	800593c <UART_SetConfig+0x1e0>
 8005926:	2b80      	cmp	r3, #128	; 0x80
 8005928:	d814      	bhi.n	8005954 <UART_SetConfig+0x1f8>
 800592a:	2b00      	cmp	r3, #0
 800592c:	d002      	beq.n	8005934 <UART_SetConfig+0x1d8>
 800592e:	2b40      	cmp	r3, #64	; 0x40
 8005930:	d008      	beq.n	8005944 <UART_SetConfig+0x1e8>
 8005932:	e00f      	b.n	8005954 <UART_SetConfig+0x1f8>
 8005934:	2300      	movs	r3, #0
 8005936:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800593a:	e082      	b.n	8005a42 <UART_SetConfig+0x2e6>
 800593c:	2302      	movs	r3, #2
 800593e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005942:	e07e      	b.n	8005a42 <UART_SetConfig+0x2e6>
 8005944:	2304      	movs	r3, #4
 8005946:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800594a:	e07a      	b.n	8005a42 <UART_SetConfig+0x2e6>
 800594c:	2308      	movs	r3, #8
 800594e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005952:	e076      	b.n	8005a42 <UART_SetConfig+0x2e6>
 8005954:	2310      	movs	r3, #16
 8005956:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800595a:	e072      	b.n	8005a42 <UART_SetConfig+0x2e6>
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a35      	ldr	r2, [pc, #212]	; (8005a38 <UART_SetConfig+0x2dc>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d12a      	bne.n	80059bc <UART_SetConfig+0x260>
 8005966:	4b30      	ldr	r3, [pc, #192]	; (8005a28 <UART_SetConfig+0x2cc>)
 8005968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800596c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005970:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005974:	d01a      	beq.n	80059ac <UART_SetConfig+0x250>
 8005976:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800597a:	d81b      	bhi.n	80059b4 <UART_SetConfig+0x258>
 800597c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005980:	d00c      	beq.n	800599c <UART_SetConfig+0x240>
 8005982:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005986:	d815      	bhi.n	80059b4 <UART_SetConfig+0x258>
 8005988:	2b00      	cmp	r3, #0
 800598a:	d003      	beq.n	8005994 <UART_SetConfig+0x238>
 800598c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005990:	d008      	beq.n	80059a4 <UART_SetConfig+0x248>
 8005992:	e00f      	b.n	80059b4 <UART_SetConfig+0x258>
 8005994:	2300      	movs	r3, #0
 8005996:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800599a:	e052      	b.n	8005a42 <UART_SetConfig+0x2e6>
 800599c:	2302      	movs	r3, #2
 800599e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059a2:	e04e      	b.n	8005a42 <UART_SetConfig+0x2e6>
 80059a4:	2304      	movs	r3, #4
 80059a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059aa:	e04a      	b.n	8005a42 <UART_SetConfig+0x2e6>
 80059ac:	2308      	movs	r3, #8
 80059ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059b2:	e046      	b.n	8005a42 <UART_SetConfig+0x2e6>
 80059b4:	2310      	movs	r3, #16
 80059b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059ba:	e042      	b.n	8005a42 <UART_SetConfig+0x2e6>
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a17      	ldr	r2, [pc, #92]	; (8005a20 <UART_SetConfig+0x2c4>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d13a      	bne.n	8005a3c <UART_SetConfig+0x2e0>
 80059c6:	4b18      	ldr	r3, [pc, #96]	; (8005a28 <UART_SetConfig+0x2cc>)
 80059c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80059d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80059d4:	d01a      	beq.n	8005a0c <UART_SetConfig+0x2b0>
 80059d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80059da:	d81b      	bhi.n	8005a14 <UART_SetConfig+0x2b8>
 80059dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059e0:	d00c      	beq.n	80059fc <UART_SetConfig+0x2a0>
 80059e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059e6:	d815      	bhi.n	8005a14 <UART_SetConfig+0x2b8>
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d003      	beq.n	80059f4 <UART_SetConfig+0x298>
 80059ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059f0:	d008      	beq.n	8005a04 <UART_SetConfig+0x2a8>
 80059f2:	e00f      	b.n	8005a14 <UART_SetConfig+0x2b8>
 80059f4:	2300      	movs	r3, #0
 80059f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059fa:	e022      	b.n	8005a42 <UART_SetConfig+0x2e6>
 80059fc:	2302      	movs	r3, #2
 80059fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a02:	e01e      	b.n	8005a42 <UART_SetConfig+0x2e6>
 8005a04:	2304      	movs	r3, #4
 8005a06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a0a:	e01a      	b.n	8005a42 <UART_SetConfig+0x2e6>
 8005a0c:	2308      	movs	r3, #8
 8005a0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a12:	e016      	b.n	8005a42 <UART_SetConfig+0x2e6>
 8005a14:	2310      	movs	r3, #16
 8005a16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a1a:	e012      	b.n	8005a42 <UART_SetConfig+0x2e6>
 8005a1c:	efff69f3 	.word	0xefff69f3
 8005a20:	40008000 	.word	0x40008000
 8005a24:	40013800 	.word	0x40013800
 8005a28:	40021000 	.word	0x40021000
 8005a2c:	40004400 	.word	0x40004400
 8005a30:	40004800 	.word	0x40004800
 8005a34:	40004c00 	.word	0x40004c00
 8005a38:	40005000 	.word	0x40005000
 8005a3c:	2310      	movs	r3, #16
 8005a3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a9f      	ldr	r2, [pc, #636]	; (8005cc4 <UART_SetConfig+0x568>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d17a      	bne.n	8005b42 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005a4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a50:	2b08      	cmp	r3, #8
 8005a52:	d824      	bhi.n	8005a9e <UART_SetConfig+0x342>
 8005a54:	a201      	add	r2, pc, #4	; (adr r2, 8005a5c <UART_SetConfig+0x300>)
 8005a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a5a:	bf00      	nop
 8005a5c:	08005a81 	.word	0x08005a81
 8005a60:	08005a9f 	.word	0x08005a9f
 8005a64:	08005a89 	.word	0x08005a89
 8005a68:	08005a9f 	.word	0x08005a9f
 8005a6c:	08005a8f 	.word	0x08005a8f
 8005a70:	08005a9f 	.word	0x08005a9f
 8005a74:	08005a9f 	.word	0x08005a9f
 8005a78:	08005a9f 	.word	0x08005a9f
 8005a7c:	08005a97 	.word	0x08005a97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a80:	f7fd ff80 	bl	8003984 <HAL_RCC_GetPCLK1Freq>
 8005a84:	61f8      	str	r0, [r7, #28]
        break;
 8005a86:	e010      	b.n	8005aaa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a88:	4b8f      	ldr	r3, [pc, #572]	; (8005cc8 <UART_SetConfig+0x56c>)
 8005a8a:	61fb      	str	r3, [r7, #28]
        break;
 8005a8c:	e00d      	b.n	8005aaa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a8e:	f7fd fee1 	bl	8003854 <HAL_RCC_GetSysClockFreq>
 8005a92:	61f8      	str	r0, [r7, #28]
        break;
 8005a94:	e009      	b.n	8005aaa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a9a:	61fb      	str	r3, [r7, #28]
        break;
 8005a9c:	e005      	b.n	8005aaa <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005aa8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	f000 80fb 	beq.w	8005ca8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	685a      	ldr	r2, [r3, #4]
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	005b      	lsls	r3, r3, #1
 8005aba:	4413      	add	r3, r2
 8005abc:	69fa      	ldr	r2, [r7, #28]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d305      	bcc.n	8005ace <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005ac8:	69fa      	ldr	r2, [r7, #28]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d903      	bls.n	8005ad6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005ad4:	e0e8      	b.n	8005ca8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	461c      	mov	r4, r3
 8005adc:	4615      	mov	r5, r2
 8005ade:	f04f 0200 	mov.w	r2, #0
 8005ae2:	f04f 0300 	mov.w	r3, #0
 8005ae6:	022b      	lsls	r3, r5, #8
 8005ae8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005aec:	0222      	lsls	r2, r4, #8
 8005aee:	68f9      	ldr	r1, [r7, #12]
 8005af0:	6849      	ldr	r1, [r1, #4]
 8005af2:	0849      	lsrs	r1, r1, #1
 8005af4:	2000      	movs	r0, #0
 8005af6:	4688      	mov	r8, r1
 8005af8:	4681      	mov	r9, r0
 8005afa:	eb12 0a08 	adds.w	sl, r2, r8
 8005afe:	eb43 0b09 	adc.w	fp, r3, r9
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	603b      	str	r3, [r7, #0]
 8005b0a:	607a      	str	r2, [r7, #4]
 8005b0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b10:	4650      	mov	r0, sl
 8005b12:	4659      	mov	r1, fp
 8005b14:	f7fa fbac 	bl	8000270 <__aeabi_uldivmod>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005b20:	69bb      	ldr	r3, [r7, #24]
 8005b22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b26:	d308      	bcc.n	8005b3a <UART_SetConfig+0x3de>
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b2e:	d204      	bcs.n	8005b3a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	69ba      	ldr	r2, [r7, #24]
 8005b36:	60da      	str	r2, [r3, #12]
 8005b38:	e0b6      	b.n	8005ca8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005b40:	e0b2      	b.n	8005ca8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	69db      	ldr	r3, [r3, #28]
 8005b46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b4a:	d15e      	bne.n	8005c0a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005b4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005b50:	2b08      	cmp	r3, #8
 8005b52:	d828      	bhi.n	8005ba6 <UART_SetConfig+0x44a>
 8005b54:	a201      	add	r2, pc, #4	; (adr r2, 8005b5c <UART_SetConfig+0x400>)
 8005b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b5a:	bf00      	nop
 8005b5c:	08005b81 	.word	0x08005b81
 8005b60:	08005b89 	.word	0x08005b89
 8005b64:	08005b91 	.word	0x08005b91
 8005b68:	08005ba7 	.word	0x08005ba7
 8005b6c:	08005b97 	.word	0x08005b97
 8005b70:	08005ba7 	.word	0x08005ba7
 8005b74:	08005ba7 	.word	0x08005ba7
 8005b78:	08005ba7 	.word	0x08005ba7
 8005b7c:	08005b9f 	.word	0x08005b9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b80:	f7fd ff00 	bl	8003984 <HAL_RCC_GetPCLK1Freq>
 8005b84:	61f8      	str	r0, [r7, #28]
        break;
 8005b86:	e014      	b.n	8005bb2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b88:	f7fd ff12 	bl	80039b0 <HAL_RCC_GetPCLK2Freq>
 8005b8c:	61f8      	str	r0, [r7, #28]
        break;
 8005b8e:	e010      	b.n	8005bb2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b90:	4b4d      	ldr	r3, [pc, #308]	; (8005cc8 <UART_SetConfig+0x56c>)
 8005b92:	61fb      	str	r3, [r7, #28]
        break;
 8005b94:	e00d      	b.n	8005bb2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b96:	f7fd fe5d 	bl	8003854 <HAL_RCC_GetSysClockFreq>
 8005b9a:	61f8      	str	r0, [r7, #28]
        break;
 8005b9c:	e009      	b.n	8005bb2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ba2:	61fb      	str	r3, [r7, #28]
        break;
 8005ba4:	e005      	b.n	8005bb2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005bb0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d077      	beq.n	8005ca8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	005a      	lsls	r2, r3, #1
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	085b      	lsrs	r3, r3, #1
 8005bc2:	441a      	add	r2, r3
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bcc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	2b0f      	cmp	r3, #15
 8005bd2:	d916      	bls.n	8005c02 <UART_SetConfig+0x4a6>
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bda:	d212      	bcs.n	8005c02 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	f023 030f 	bic.w	r3, r3, #15
 8005be4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005be6:	69bb      	ldr	r3, [r7, #24]
 8005be8:	085b      	lsrs	r3, r3, #1
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	f003 0307 	and.w	r3, r3, #7
 8005bf0:	b29a      	uxth	r2, r3
 8005bf2:	8afb      	ldrh	r3, [r7, #22]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	8afa      	ldrh	r2, [r7, #22]
 8005bfe:	60da      	str	r2, [r3, #12]
 8005c00:	e052      	b.n	8005ca8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005c08:	e04e      	b.n	8005ca8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c0a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005c0e:	2b08      	cmp	r3, #8
 8005c10:	d827      	bhi.n	8005c62 <UART_SetConfig+0x506>
 8005c12:	a201      	add	r2, pc, #4	; (adr r2, 8005c18 <UART_SetConfig+0x4bc>)
 8005c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c18:	08005c3d 	.word	0x08005c3d
 8005c1c:	08005c45 	.word	0x08005c45
 8005c20:	08005c4d 	.word	0x08005c4d
 8005c24:	08005c63 	.word	0x08005c63
 8005c28:	08005c53 	.word	0x08005c53
 8005c2c:	08005c63 	.word	0x08005c63
 8005c30:	08005c63 	.word	0x08005c63
 8005c34:	08005c63 	.word	0x08005c63
 8005c38:	08005c5b 	.word	0x08005c5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c3c:	f7fd fea2 	bl	8003984 <HAL_RCC_GetPCLK1Freq>
 8005c40:	61f8      	str	r0, [r7, #28]
        break;
 8005c42:	e014      	b.n	8005c6e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c44:	f7fd feb4 	bl	80039b0 <HAL_RCC_GetPCLK2Freq>
 8005c48:	61f8      	str	r0, [r7, #28]
        break;
 8005c4a:	e010      	b.n	8005c6e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c4c:	4b1e      	ldr	r3, [pc, #120]	; (8005cc8 <UART_SetConfig+0x56c>)
 8005c4e:	61fb      	str	r3, [r7, #28]
        break;
 8005c50:	e00d      	b.n	8005c6e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c52:	f7fd fdff 	bl	8003854 <HAL_RCC_GetSysClockFreq>
 8005c56:	61f8      	str	r0, [r7, #28]
        break;
 8005c58:	e009      	b.n	8005c6e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c5e:	61fb      	str	r3, [r7, #28]
        break;
 8005c60:	e005      	b.n	8005c6e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005c62:	2300      	movs	r3, #0
 8005c64:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005c6c:	bf00      	nop
    }

    if (pclk != 0U)
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d019      	beq.n	8005ca8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	085a      	lsrs	r2, r3, #1
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	441a      	add	r2, r3
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c86:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	2b0f      	cmp	r3, #15
 8005c8c:	d909      	bls.n	8005ca2 <UART_SetConfig+0x546>
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c94:	d205      	bcs.n	8005ca2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	b29a      	uxth	r2, r3
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	60da      	str	r2, [r3, #12]
 8005ca0:	e002      	b.n	8005ca8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2200      	movs	r2, #0
 8005cac:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005cb4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3728      	adds	r7, #40	; 0x28
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005cc2:	bf00      	nop
 8005cc4:	40008000 	.word	0x40008000
 8005cc8:	00f42400 	.word	0x00f42400

08005ccc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd8:	f003 0308 	and.w	r3, r3, #8
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d00a      	beq.n	8005cf6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	430a      	orrs	r2, r1
 8005cf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfa:	f003 0301 	and.w	r3, r3, #1
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d00a      	beq.n	8005d18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	430a      	orrs	r2, r1
 8005d16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1c:	f003 0302 	and.w	r3, r3, #2
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d00a      	beq.n	8005d3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	430a      	orrs	r2, r1
 8005d38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3e:	f003 0304 	and.w	r3, r3, #4
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d00a      	beq.n	8005d5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	430a      	orrs	r2, r1
 8005d5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d60:	f003 0310 	and.w	r3, r3, #16
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d00a      	beq.n	8005d7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	430a      	orrs	r2, r1
 8005d7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d82:	f003 0320 	and.w	r3, r3, #32
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00a      	beq.n	8005da0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	430a      	orrs	r2, r1
 8005d9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d01a      	beq.n	8005de2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	430a      	orrs	r2, r1
 8005dc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dca:	d10a      	bne.n	8005de2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	430a      	orrs	r2, r1
 8005de0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00a      	beq.n	8005e04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	430a      	orrs	r2, r1
 8005e02:	605a      	str	r2, [r3, #4]
  }
}
 8005e04:	bf00      	nop
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b098      	sub	sp, #96	; 0x60
 8005e14:	af02      	add	r7, sp, #8
 8005e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e20:	f7fc f88c 	bl	8001f3c <HAL_GetTick>
 8005e24:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f003 0308 	and.w	r3, r3, #8
 8005e30:	2b08      	cmp	r3, #8
 8005e32:	d12e      	bne.n	8005e92 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e38:	9300      	str	r3, [sp, #0]
 8005e3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 f88c 	bl	8005f60 <UART_WaitOnFlagUntilTimeout>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d021      	beq.n	8005e92 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e56:	e853 3f00 	ldrex	r3, [r3]
 8005e5a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e62:	653b      	str	r3, [r7, #80]	; 0x50
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	461a      	mov	r2, r3
 8005e6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e6c:	647b      	str	r3, [r7, #68]	; 0x44
 8005e6e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e70:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005e72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e74:	e841 2300 	strex	r3, r2, [r1]
 8005e78:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005e7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d1e6      	bne.n	8005e4e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2220      	movs	r2, #32
 8005e84:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e8e:	2303      	movs	r3, #3
 8005e90:	e062      	b.n	8005f58 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 0304 	and.w	r3, r3, #4
 8005e9c:	2b04      	cmp	r3, #4
 8005e9e:	d149      	bne.n	8005f34 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ea0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ea4:	9300      	str	r3, [sp, #0]
 8005ea6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 f856 	bl	8005f60 <UART_WaitOnFlagUntilTimeout>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d03c      	beq.n	8005f34 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec2:	e853 3f00 	ldrex	r3, [r3]
 8005ec6:	623b      	str	r3, [r7, #32]
   return(result);
 8005ec8:	6a3b      	ldr	r3, [r7, #32]
 8005eca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ece:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ed8:	633b      	str	r3, [r7, #48]	; 0x30
 8005eda:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005edc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ede:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ee0:	e841 2300 	strex	r3, r2, [r1]
 8005ee4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d1e6      	bne.n	8005eba <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	3308      	adds	r3, #8
 8005ef2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	e853 3f00 	ldrex	r3, [r3]
 8005efa:	60fb      	str	r3, [r7, #12]
   return(result);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f023 0301 	bic.w	r3, r3, #1
 8005f02:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	3308      	adds	r3, #8
 8005f0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f0c:	61fa      	str	r2, [r7, #28]
 8005f0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f10:	69b9      	ldr	r1, [r7, #24]
 8005f12:	69fa      	ldr	r2, [r7, #28]
 8005f14:	e841 2300 	strex	r3, r2, [r1]
 8005f18:	617b      	str	r3, [r7, #20]
   return(result);
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d1e5      	bne.n	8005eec <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2220      	movs	r2, #32
 8005f24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f30:	2303      	movs	r3, #3
 8005f32:	e011      	b.n	8005f58 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2220      	movs	r2, #32
 8005f38:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2220      	movs	r2, #32
 8005f3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005f56:	2300      	movs	r3, #0
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3758      	adds	r7, #88	; 0x58
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	60b9      	str	r1, [r7, #8]
 8005f6a:	603b      	str	r3, [r7, #0]
 8005f6c:	4613      	mov	r3, r2
 8005f6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f70:	e049      	b.n	8006006 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f78:	d045      	beq.n	8006006 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f7a:	f7fb ffdf 	bl	8001f3c <HAL_GetTick>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	1ad3      	subs	r3, r2, r3
 8005f84:	69ba      	ldr	r2, [r7, #24]
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d302      	bcc.n	8005f90 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d101      	bne.n	8005f94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005f90:	2303      	movs	r3, #3
 8005f92:	e048      	b.n	8006026 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 0304 	and.w	r3, r3, #4
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d031      	beq.n	8006006 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	69db      	ldr	r3, [r3, #28]
 8005fa8:	f003 0308 	and.w	r3, r3, #8
 8005fac:	2b08      	cmp	r3, #8
 8005fae:	d110      	bne.n	8005fd2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	2208      	movs	r2, #8
 8005fb6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005fb8:	68f8      	ldr	r0, [r7, #12]
 8005fba:	f000 f838 	bl	800602e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2208      	movs	r2, #8
 8005fc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e029      	b.n	8006026 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	69db      	ldr	r3, [r3, #28]
 8005fd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fe0:	d111      	bne.n	8006006 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005fec:	68f8      	ldr	r0, [r7, #12]
 8005fee:	f000 f81e 	bl	800602e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2220      	movs	r2, #32
 8005ff6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006002:	2303      	movs	r3, #3
 8006004:	e00f      	b.n	8006026 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	69da      	ldr	r2, [r3, #28]
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	4013      	ands	r3, r2
 8006010:	68ba      	ldr	r2, [r7, #8]
 8006012:	429a      	cmp	r2, r3
 8006014:	bf0c      	ite	eq
 8006016:	2301      	moveq	r3, #1
 8006018:	2300      	movne	r3, #0
 800601a:	b2db      	uxtb	r3, r3
 800601c:	461a      	mov	r2, r3
 800601e:	79fb      	ldrb	r3, [r7, #7]
 8006020:	429a      	cmp	r2, r3
 8006022:	d0a6      	beq.n	8005f72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006024:	2300      	movs	r3, #0
}
 8006026:	4618      	mov	r0, r3
 8006028:	3710      	adds	r7, #16
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}

0800602e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800602e:	b480      	push	{r7}
 8006030:	b095      	sub	sp, #84	; 0x54
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800603c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800603e:	e853 3f00 	ldrex	r3, [r3]
 8006042:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006046:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800604a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	461a      	mov	r2, r3
 8006052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006054:	643b      	str	r3, [r7, #64]	; 0x40
 8006056:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006058:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800605a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800605c:	e841 2300 	strex	r3, r2, [r1]
 8006060:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006064:	2b00      	cmp	r3, #0
 8006066:	d1e6      	bne.n	8006036 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	3308      	adds	r3, #8
 800606e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006070:	6a3b      	ldr	r3, [r7, #32]
 8006072:	e853 3f00 	ldrex	r3, [r3]
 8006076:	61fb      	str	r3, [r7, #28]
   return(result);
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	f023 0301 	bic.w	r3, r3, #1
 800607e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	3308      	adds	r3, #8
 8006086:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006088:	62fa      	str	r2, [r7, #44]	; 0x2c
 800608a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800608e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006090:	e841 2300 	strex	r3, r2, [r1]
 8006094:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006098:	2b00      	cmp	r3, #0
 800609a:	d1e5      	bne.n	8006068 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d118      	bne.n	80060d6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	e853 3f00 	ldrex	r3, [r3]
 80060b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	f023 0310 	bic.w	r3, r3, #16
 80060b8:	647b      	str	r3, [r7, #68]	; 0x44
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	461a      	mov	r2, r3
 80060c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060c2:	61bb      	str	r3, [r7, #24]
 80060c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c6:	6979      	ldr	r1, [r7, #20]
 80060c8:	69ba      	ldr	r2, [r7, #24]
 80060ca:	e841 2300 	strex	r3, r2, [r1]
 80060ce:	613b      	str	r3, [r7, #16]
   return(result);
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d1e6      	bne.n	80060a4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2220      	movs	r2, #32
 80060da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80060ea:	bf00      	nop
 80060ec:	3754      	adds	r7, #84	; 0x54
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr
	...

080060f8 <std>:
 80060f8:	2300      	movs	r3, #0
 80060fa:	b510      	push	{r4, lr}
 80060fc:	4604      	mov	r4, r0
 80060fe:	e9c0 3300 	strd	r3, r3, [r0]
 8006102:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006106:	6083      	str	r3, [r0, #8]
 8006108:	8181      	strh	r1, [r0, #12]
 800610a:	6643      	str	r3, [r0, #100]	; 0x64
 800610c:	81c2      	strh	r2, [r0, #14]
 800610e:	6183      	str	r3, [r0, #24]
 8006110:	4619      	mov	r1, r3
 8006112:	2208      	movs	r2, #8
 8006114:	305c      	adds	r0, #92	; 0x5c
 8006116:	f000 f906 	bl	8006326 <memset>
 800611a:	4b0d      	ldr	r3, [pc, #52]	; (8006150 <std+0x58>)
 800611c:	6263      	str	r3, [r4, #36]	; 0x24
 800611e:	4b0d      	ldr	r3, [pc, #52]	; (8006154 <std+0x5c>)
 8006120:	62a3      	str	r3, [r4, #40]	; 0x28
 8006122:	4b0d      	ldr	r3, [pc, #52]	; (8006158 <std+0x60>)
 8006124:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006126:	4b0d      	ldr	r3, [pc, #52]	; (800615c <std+0x64>)
 8006128:	6323      	str	r3, [r4, #48]	; 0x30
 800612a:	4b0d      	ldr	r3, [pc, #52]	; (8006160 <std+0x68>)
 800612c:	6224      	str	r4, [r4, #32]
 800612e:	429c      	cmp	r4, r3
 8006130:	d006      	beq.n	8006140 <std+0x48>
 8006132:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006136:	4294      	cmp	r4, r2
 8006138:	d002      	beq.n	8006140 <std+0x48>
 800613a:	33d0      	adds	r3, #208	; 0xd0
 800613c:	429c      	cmp	r4, r3
 800613e:	d105      	bne.n	800614c <std+0x54>
 8006140:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006148:	f000 b966 	b.w	8006418 <__retarget_lock_init_recursive>
 800614c:	bd10      	pop	{r4, pc}
 800614e:	bf00      	nop
 8006150:	080062a1 	.word	0x080062a1
 8006154:	080062c3 	.word	0x080062c3
 8006158:	080062fb 	.word	0x080062fb
 800615c:	0800631f 	.word	0x0800631f
 8006160:	20000490 	.word	0x20000490

08006164 <stdio_exit_handler>:
 8006164:	4a02      	ldr	r2, [pc, #8]	; (8006170 <stdio_exit_handler+0xc>)
 8006166:	4903      	ldr	r1, [pc, #12]	; (8006174 <stdio_exit_handler+0x10>)
 8006168:	4803      	ldr	r0, [pc, #12]	; (8006178 <stdio_exit_handler+0x14>)
 800616a:	f000 b869 	b.w	8006240 <_fwalk_sglue>
 800616e:	bf00      	nop
 8006170:	20000040 	.word	0x20000040
 8006174:	08006cc5 	.word	0x08006cc5
 8006178:	2000004c 	.word	0x2000004c

0800617c <cleanup_stdio>:
 800617c:	6841      	ldr	r1, [r0, #4]
 800617e:	4b0c      	ldr	r3, [pc, #48]	; (80061b0 <cleanup_stdio+0x34>)
 8006180:	4299      	cmp	r1, r3
 8006182:	b510      	push	{r4, lr}
 8006184:	4604      	mov	r4, r0
 8006186:	d001      	beq.n	800618c <cleanup_stdio+0x10>
 8006188:	f000 fd9c 	bl	8006cc4 <_fflush_r>
 800618c:	68a1      	ldr	r1, [r4, #8]
 800618e:	4b09      	ldr	r3, [pc, #36]	; (80061b4 <cleanup_stdio+0x38>)
 8006190:	4299      	cmp	r1, r3
 8006192:	d002      	beq.n	800619a <cleanup_stdio+0x1e>
 8006194:	4620      	mov	r0, r4
 8006196:	f000 fd95 	bl	8006cc4 <_fflush_r>
 800619a:	68e1      	ldr	r1, [r4, #12]
 800619c:	4b06      	ldr	r3, [pc, #24]	; (80061b8 <cleanup_stdio+0x3c>)
 800619e:	4299      	cmp	r1, r3
 80061a0:	d004      	beq.n	80061ac <cleanup_stdio+0x30>
 80061a2:	4620      	mov	r0, r4
 80061a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061a8:	f000 bd8c 	b.w	8006cc4 <_fflush_r>
 80061ac:	bd10      	pop	{r4, pc}
 80061ae:	bf00      	nop
 80061b0:	20000490 	.word	0x20000490
 80061b4:	200004f8 	.word	0x200004f8
 80061b8:	20000560 	.word	0x20000560

080061bc <global_stdio_init.part.0>:
 80061bc:	b510      	push	{r4, lr}
 80061be:	4b0b      	ldr	r3, [pc, #44]	; (80061ec <global_stdio_init.part.0+0x30>)
 80061c0:	4c0b      	ldr	r4, [pc, #44]	; (80061f0 <global_stdio_init.part.0+0x34>)
 80061c2:	4a0c      	ldr	r2, [pc, #48]	; (80061f4 <global_stdio_init.part.0+0x38>)
 80061c4:	601a      	str	r2, [r3, #0]
 80061c6:	4620      	mov	r0, r4
 80061c8:	2200      	movs	r2, #0
 80061ca:	2104      	movs	r1, #4
 80061cc:	f7ff ff94 	bl	80060f8 <std>
 80061d0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80061d4:	2201      	movs	r2, #1
 80061d6:	2109      	movs	r1, #9
 80061d8:	f7ff ff8e 	bl	80060f8 <std>
 80061dc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80061e0:	2202      	movs	r2, #2
 80061e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061e6:	2112      	movs	r1, #18
 80061e8:	f7ff bf86 	b.w	80060f8 <std>
 80061ec:	200005c8 	.word	0x200005c8
 80061f0:	20000490 	.word	0x20000490
 80061f4:	08006165 	.word	0x08006165

080061f8 <__sfp_lock_acquire>:
 80061f8:	4801      	ldr	r0, [pc, #4]	; (8006200 <__sfp_lock_acquire+0x8>)
 80061fa:	f000 b90e 	b.w	800641a <__retarget_lock_acquire_recursive>
 80061fe:	bf00      	nop
 8006200:	200005d1 	.word	0x200005d1

08006204 <__sfp_lock_release>:
 8006204:	4801      	ldr	r0, [pc, #4]	; (800620c <__sfp_lock_release+0x8>)
 8006206:	f000 b909 	b.w	800641c <__retarget_lock_release_recursive>
 800620a:	bf00      	nop
 800620c:	200005d1 	.word	0x200005d1

08006210 <__sinit>:
 8006210:	b510      	push	{r4, lr}
 8006212:	4604      	mov	r4, r0
 8006214:	f7ff fff0 	bl	80061f8 <__sfp_lock_acquire>
 8006218:	6a23      	ldr	r3, [r4, #32]
 800621a:	b11b      	cbz	r3, 8006224 <__sinit+0x14>
 800621c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006220:	f7ff bff0 	b.w	8006204 <__sfp_lock_release>
 8006224:	4b04      	ldr	r3, [pc, #16]	; (8006238 <__sinit+0x28>)
 8006226:	6223      	str	r3, [r4, #32]
 8006228:	4b04      	ldr	r3, [pc, #16]	; (800623c <__sinit+0x2c>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d1f5      	bne.n	800621c <__sinit+0xc>
 8006230:	f7ff ffc4 	bl	80061bc <global_stdio_init.part.0>
 8006234:	e7f2      	b.n	800621c <__sinit+0xc>
 8006236:	bf00      	nop
 8006238:	0800617d 	.word	0x0800617d
 800623c:	200005c8 	.word	0x200005c8

08006240 <_fwalk_sglue>:
 8006240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006244:	4607      	mov	r7, r0
 8006246:	4688      	mov	r8, r1
 8006248:	4614      	mov	r4, r2
 800624a:	2600      	movs	r6, #0
 800624c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006250:	f1b9 0901 	subs.w	r9, r9, #1
 8006254:	d505      	bpl.n	8006262 <_fwalk_sglue+0x22>
 8006256:	6824      	ldr	r4, [r4, #0]
 8006258:	2c00      	cmp	r4, #0
 800625a:	d1f7      	bne.n	800624c <_fwalk_sglue+0xc>
 800625c:	4630      	mov	r0, r6
 800625e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006262:	89ab      	ldrh	r3, [r5, #12]
 8006264:	2b01      	cmp	r3, #1
 8006266:	d907      	bls.n	8006278 <_fwalk_sglue+0x38>
 8006268:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800626c:	3301      	adds	r3, #1
 800626e:	d003      	beq.n	8006278 <_fwalk_sglue+0x38>
 8006270:	4629      	mov	r1, r5
 8006272:	4638      	mov	r0, r7
 8006274:	47c0      	blx	r8
 8006276:	4306      	orrs	r6, r0
 8006278:	3568      	adds	r5, #104	; 0x68
 800627a:	e7e9      	b.n	8006250 <_fwalk_sglue+0x10>

0800627c <iprintf>:
 800627c:	b40f      	push	{r0, r1, r2, r3}
 800627e:	b507      	push	{r0, r1, r2, lr}
 8006280:	4906      	ldr	r1, [pc, #24]	; (800629c <iprintf+0x20>)
 8006282:	ab04      	add	r3, sp, #16
 8006284:	6808      	ldr	r0, [r1, #0]
 8006286:	f853 2b04 	ldr.w	r2, [r3], #4
 800628a:	6881      	ldr	r1, [r0, #8]
 800628c:	9301      	str	r3, [sp, #4]
 800628e:	f000 f9e9 	bl	8006664 <_vfiprintf_r>
 8006292:	b003      	add	sp, #12
 8006294:	f85d eb04 	ldr.w	lr, [sp], #4
 8006298:	b004      	add	sp, #16
 800629a:	4770      	bx	lr
 800629c:	20000098 	.word	0x20000098

080062a0 <__sread>:
 80062a0:	b510      	push	{r4, lr}
 80062a2:	460c      	mov	r4, r1
 80062a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062a8:	f000 f868 	bl	800637c <_read_r>
 80062ac:	2800      	cmp	r0, #0
 80062ae:	bfab      	itete	ge
 80062b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80062b2:	89a3      	ldrhlt	r3, [r4, #12]
 80062b4:	181b      	addge	r3, r3, r0
 80062b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80062ba:	bfac      	ite	ge
 80062bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80062be:	81a3      	strhlt	r3, [r4, #12]
 80062c0:	bd10      	pop	{r4, pc}

080062c2 <__swrite>:
 80062c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062c6:	461f      	mov	r7, r3
 80062c8:	898b      	ldrh	r3, [r1, #12]
 80062ca:	05db      	lsls	r3, r3, #23
 80062cc:	4605      	mov	r5, r0
 80062ce:	460c      	mov	r4, r1
 80062d0:	4616      	mov	r6, r2
 80062d2:	d505      	bpl.n	80062e0 <__swrite+0x1e>
 80062d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062d8:	2302      	movs	r3, #2
 80062da:	2200      	movs	r2, #0
 80062dc:	f000 f83c 	bl	8006358 <_lseek_r>
 80062e0:	89a3      	ldrh	r3, [r4, #12]
 80062e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062ea:	81a3      	strh	r3, [r4, #12]
 80062ec:	4632      	mov	r2, r6
 80062ee:	463b      	mov	r3, r7
 80062f0:	4628      	mov	r0, r5
 80062f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062f6:	f000 b853 	b.w	80063a0 <_write_r>

080062fa <__sseek>:
 80062fa:	b510      	push	{r4, lr}
 80062fc:	460c      	mov	r4, r1
 80062fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006302:	f000 f829 	bl	8006358 <_lseek_r>
 8006306:	1c43      	adds	r3, r0, #1
 8006308:	89a3      	ldrh	r3, [r4, #12]
 800630a:	bf15      	itete	ne
 800630c:	6560      	strne	r0, [r4, #84]	; 0x54
 800630e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006312:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006316:	81a3      	strheq	r3, [r4, #12]
 8006318:	bf18      	it	ne
 800631a:	81a3      	strhne	r3, [r4, #12]
 800631c:	bd10      	pop	{r4, pc}

0800631e <__sclose>:
 800631e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006322:	f000 b809 	b.w	8006338 <_close_r>

08006326 <memset>:
 8006326:	4402      	add	r2, r0
 8006328:	4603      	mov	r3, r0
 800632a:	4293      	cmp	r3, r2
 800632c:	d100      	bne.n	8006330 <memset+0xa>
 800632e:	4770      	bx	lr
 8006330:	f803 1b01 	strb.w	r1, [r3], #1
 8006334:	e7f9      	b.n	800632a <memset+0x4>
	...

08006338 <_close_r>:
 8006338:	b538      	push	{r3, r4, r5, lr}
 800633a:	4d06      	ldr	r5, [pc, #24]	; (8006354 <_close_r+0x1c>)
 800633c:	2300      	movs	r3, #0
 800633e:	4604      	mov	r4, r0
 8006340:	4608      	mov	r0, r1
 8006342:	602b      	str	r3, [r5, #0]
 8006344:	f7fa ffaf 	bl	80012a6 <_close>
 8006348:	1c43      	adds	r3, r0, #1
 800634a:	d102      	bne.n	8006352 <_close_r+0x1a>
 800634c:	682b      	ldr	r3, [r5, #0]
 800634e:	b103      	cbz	r3, 8006352 <_close_r+0x1a>
 8006350:	6023      	str	r3, [r4, #0]
 8006352:	bd38      	pop	{r3, r4, r5, pc}
 8006354:	200005cc 	.word	0x200005cc

08006358 <_lseek_r>:
 8006358:	b538      	push	{r3, r4, r5, lr}
 800635a:	4d07      	ldr	r5, [pc, #28]	; (8006378 <_lseek_r+0x20>)
 800635c:	4604      	mov	r4, r0
 800635e:	4608      	mov	r0, r1
 8006360:	4611      	mov	r1, r2
 8006362:	2200      	movs	r2, #0
 8006364:	602a      	str	r2, [r5, #0]
 8006366:	461a      	mov	r2, r3
 8006368:	f7fa ffc4 	bl	80012f4 <_lseek>
 800636c:	1c43      	adds	r3, r0, #1
 800636e:	d102      	bne.n	8006376 <_lseek_r+0x1e>
 8006370:	682b      	ldr	r3, [r5, #0]
 8006372:	b103      	cbz	r3, 8006376 <_lseek_r+0x1e>
 8006374:	6023      	str	r3, [r4, #0]
 8006376:	bd38      	pop	{r3, r4, r5, pc}
 8006378:	200005cc 	.word	0x200005cc

0800637c <_read_r>:
 800637c:	b538      	push	{r3, r4, r5, lr}
 800637e:	4d07      	ldr	r5, [pc, #28]	; (800639c <_read_r+0x20>)
 8006380:	4604      	mov	r4, r0
 8006382:	4608      	mov	r0, r1
 8006384:	4611      	mov	r1, r2
 8006386:	2200      	movs	r2, #0
 8006388:	602a      	str	r2, [r5, #0]
 800638a:	461a      	mov	r2, r3
 800638c:	f7fa ff6e 	bl	800126c <_read>
 8006390:	1c43      	adds	r3, r0, #1
 8006392:	d102      	bne.n	800639a <_read_r+0x1e>
 8006394:	682b      	ldr	r3, [r5, #0]
 8006396:	b103      	cbz	r3, 800639a <_read_r+0x1e>
 8006398:	6023      	str	r3, [r4, #0]
 800639a:	bd38      	pop	{r3, r4, r5, pc}
 800639c:	200005cc 	.word	0x200005cc

080063a0 <_write_r>:
 80063a0:	b538      	push	{r3, r4, r5, lr}
 80063a2:	4d07      	ldr	r5, [pc, #28]	; (80063c0 <_write_r+0x20>)
 80063a4:	4604      	mov	r4, r0
 80063a6:	4608      	mov	r0, r1
 80063a8:	4611      	mov	r1, r2
 80063aa:	2200      	movs	r2, #0
 80063ac:	602a      	str	r2, [r5, #0]
 80063ae:	461a      	mov	r2, r3
 80063b0:	f7fa fc08 	bl	8000bc4 <_write>
 80063b4:	1c43      	adds	r3, r0, #1
 80063b6:	d102      	bne.n	80063be <_write_r+0x1e>
 80063b8:	682b      	ldr	r3, [r5, #0]
 80063ba:	b103      	cbz	r3, 80063be <_write_r+0x1e>
 80063bc:	6023      	str	r3, [r4, #0]
 80063be:	bd38      	pop	{r3, r4, r5, pc}
 80063c0:	200005cc 	.word	0x200005cc

080063c4 <__errno>:
 80063c4:	4b01      	ldr	r3, [pc, #4]	; (80063cc <__errno+0x8>)
 80063c6:	6818      	ldr	r0, [r3, #0]
 80063c8:	4770      	bx	lr
 80063ca:	bf00      	nop
 80063cc:	20000098 	.word	0x20000098

080063d0 <__libc_init_array>:
 80063d0:	b570      	push	{r4, r5, r6, lr}
 80063d2:	4d0d      	ldr	r5, [pc, #52]	; (8006408 <__libc_init_array+0x38>)
 80063d4:	4c0d      	ldr	r4, [pc, #52]	; (800640c <__libc_init_array+0x3c>)
 80063d6:	1b64      	subs	r4, r4, r5
 80063d8:	10a4      	asrs	r4, r4, #2
 80063da:	2600      	movs	r6, #0
 80063dc:	42a6      	cmp	r6, r4
 80063de:	d109      	bne.n	80063f4 <__libc_init_array+0x24>
 80063e0:	4d0b      	ldr	r5, [pc, #44]	; (8006410 <__libc_init_array+0x40>)
 80063e2:	4c0c      	ldr	r4, [pc, #48]	; (8006414 <__libc_init_array+0x44>)
 80063e4:	f000 fdc0 	bl	8006f68 <_init>
 80063e8:	1b64      	subs	r4, r4, r5
 80063ea:	10a4      	asrs	r4, r4, #2
 80063ec:	2600      	movs	r6, #0
 80063ee:	42a6      	cmp	r6, r4
 80063f0:	d105      	bne.n	80063fe <__libc_init_array+0x2e>
 80063f2:	bd70      	pop	{r4, r5, r6, pc}
 80063f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80063f8:	4798      	blx	r3
 80063fa:	3601      	adds	r6, #1
 80063fc:	e7ee      	b.n	80063dc <__libc_init_array+0xc>
 80063fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006402:	4798      	blx	r3
 8006404:	3601      	adds	r6, #1
 8006406:	e7f2      	b.n	80063ee <__libc_init_array+0x1e>
 8006408:	0800701c 	.word	0x0800701c
 800640c:	0800701c 	.word	0x0800701c
 8006410:	0800701c 	.word	0x0800701c
 8006414:	08007020 	.word	0x08007020

08006418 <__retarget_lock_init_recursive>:
 8006418:	4770      	bx	lr

0800641a <__retarget_lock_acquire_recursive>:
 800641a:	4770      	bx	lr

0800641c <__retarget_lock_release_recursive>:
 800641c:	4770      	bx	lr
	...

08006420 <_free_r>:
 8006420:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006422:	2900      	cmp	r1, #0
 8006424:	d044      	beq.n	80064b0 <_free_r+0x90>
 8006426:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800642a:	9001      	str	r0, [sp, #4]
 800642c:	2b00      	cmp	r3, #0
 800642e:	f1a1 0404 	sub.w	r4, r1, #4
 8006432:	bfb8      	it	lt
 8006434:	18e4      	addlt	r4, r4, r3
 8006436:	f000 f8df 	bl	80065f8 <__malloc_lock>
 800643a:	4a1e      	ldr	r2, [pc, #120]	; (80064b4 <_free_r+0x94>)
 800643c:	9801      	ldr	r0, [sp, #4]
 800643e:	6813      	ldr	r3, [r2, #0]
 8006440:	b933      	cbnz	r3, 8006450 <_free_r+0x30>
 8006442:	6063      	str	r3, [r4, #4]
 8006444:	6014      	str	r4, [r2, #0]
 8006446:	b003      	add	sp, #12
 8006448:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800644c:	f000 b8da 	b.w	8006604 <__malloc_unlock>
 8006450:	42a3      	cmp	r3, r4
 8006452:	d908      	bls.n	8006466 <_free_r+0x46>
 8006454:	6825      	ldr	r5, [r4, #0]
 8006456:	1961      	adds	r1, r4, r5
 8006458:	428b      	cmp	r3, r1
 800645a:	bf01      	itttt	eq
 800645c:	6819      	ldreq	r1, [r3, #0]
 800645e:	685b      	ldreq	r3, [r3, #4]
 8006460:	1949      	addeq	r1, r1, r5
 8006462:	6021      	streq	r1, [r4, #0]
 8006464:	e7ed      	b.n	8006442 <_free_r+0x22>
 8006466:	461a      	mov	r2, r3
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	b10b      	cbz	r3, 8006470 <_free_r+0x50>
 800646c:	42a3      	cmp	r3, r4
 800646e:	d9fa      	bls.n	8006466 <_free_r+0x46>
 8006470:	6811      	ldr	r1, [r2, #0]
 8006472:	1855      	adds	r5, r2, r1
 8006474:	42a5      	cmp	r5, r4
 8006476:	d10b      	bne.n	8006490 <_free_r+0x70>
 8006478:	6824      	ldr	r4, [r4, #0]
 800647a:	4421      	add	r1, r4
 800647c:	1854      	adds	r4, r2, r1
 800647e:	42a3      	cmp	r3, r4
 8006480:	6011      	str	r1, [r2, #0]
 8006482:	d1e0      	bne.n	8006446 <_free_r+0x26>
 8006484:	681c      	ldr	r4, [r3, #0]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	6053      	str	r3, [r2, #4]
 800648a:	440c      	add	r4, r1
 800648c:	6014      	str	r4, [r2, #0]
 800648e:	e7da      	b.n	8006446 <_free_r+0x26>
 8006490:	d902      	bls.n	8006498 <_free_r+0x78>
 8006492:	230c      	movs	r3, #12
 8006494:	6003      	str	r3, [r0, #0]
 8006496:	e7d6      	b.n	8006446 <_free_r+0x26>
 8006498:	6825      	ldr	r5, [r4, #0]
 800649a:	1961      	adds	r1, r4, r5
 800649c:	428b      	cmp	r3, r1
 800649e:	bf04      	itt	eq
 80064a0:	6819      	ldreq	r1, [r3, #0]
 80064a2:	685b      	ldreq	r3, [r3, #4]
 80064a4:	6063      	str	r3, [r4, #4]
 80064a6:	bf04      	itt	eq
 80064a8:	1949      	addeq	r1, r1, r5
 80064aa:	6021      	streq	r1, [r4, #0]
 80064ac:	6054      	str	r4, [r2, #4]
 80064ae:	e7ca      	b.n	8006446 <_free_r+0x26>
 80064b0:	b003      	add	sp, #12
 80064b2:	bd30      	pop	{r4, r5, pc}
 80064b4:	200005d4 	.word	0x200005d4

080064b8 <sbrk_aligned>:
 80064b8:	b570      	push	{r4, r5, r6, lr}
 80064ba:	4e0e      	ldr	r6, [pc, #56]	; (80064f4 <sbrk_aligned+0x3c>)
 80064bc:	460c      	mov	r4, r1
 80064be:	6831      	ldr	r1, [r6, #0]
 80064c0:	4605      	mov	r5, r0
 80064c2:	b911      	cbnz	r1, 80064ca <sbrk_aligned+0x12>
 80064c4:	f000 fcbc 	bl	8006e40 <_sbrk_r>
 80064c8:	6030      	str	r0, [r6, #0]
 80064ca:	4621      	mov	r1, r4
 80064cc:	4628      	mov	r0, r5
 80064ce:	f000 fcb7 	bl	8006e40 <_sbrk_r>
 80064d2:	1c43      	adds	r3, r0, #1
 80064d4:	d00a      	beq.n	80064ec <sbrk_aligned+0x34>
 80064d6:	1cc4      	adds	r4, r0, #3
 80064d8:	f024 0403 	bic.w	r4, r4, #3
 80064dc:	42a0      	cmp	r0, r4
 80064de:	d007      	beq.n	80064f0 <sbrk_aligned+0x38>
 80064e0:	1a21      	subs	r1, r4, r0
 80064e2:	4628      	mov	r0, r5
 80064e4:	f000 fcac 	bl	8006e40 <_sbrk_r>
 80064e8:	3001      	adds	r0, #1
 80064ea:	d101      	bne.n	80064f0 <sbrk_aligned+0x38>
 80064ec:	f04f 34ff 	mov.w	r4, #4294967295
 80064f0:	4620      	mov	r0, r4
 80064f2:	bd70      	pop	{r4, r5, r6, pc}
 80064f4:	200005d8 	.word	0x200005d8

080064f8 <_malloc_r>:
 80064f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064fc:	1ccd      	adds	r5, r1, #3
 80064fe:	f025 0503 	bic.w	r5, r5, #3
 8006502:	3508      	adds	r5, #8
 8006504:	2d0c      	cmp	r5, #12
 8006506:	bf38      	it	cc
 8006508:	250c      	movcc	r5, #12
 800650a:	2d00      	cmp	r5, #0
 800650c:	4607      	mov	r7, r0
 800650e:	db01      	blt.n	8006514 <_malloc_r+0x1c>
 8006510:	42a9      	cmp	r1, r5
 8006512:	d905      	bls.n	8006520 <_malloc_r+0x28>
 8006514:	230c      	movs	r3, #12
 8006516:	603b      	str	r3, [r7, #0]
 8006518:	2600      	movs	r6, #0
 800651a:	4630      	mov	r0, r6
 800651c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006520:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80065f4 <_malloc_r+0xfc>
 8006524:	f000 f868 	bl	80065f8 <__malloc_lock>
 8006528:	f8d8 3000 	ldr.w	r3, [r8]
 800652c:	461c      	mov	r4, r3
 800652e:	bb5c      	cbnz	r4, 8006588 <_malloc_r+0x90>
 8006530:	4629      	mov	r1, r5
 8006532:	4638      	mov	r0, r7
 8006534:	f7ff ffc0 	bl	80064b8 <sbrk_aligned>
 8006538:	1c43      	adds	r3, r0, #1
 800653a:	4604      	mov	r4, r0
 800653c:	d155      	bne.n	80065ea <_malloc_r+0xf2>
 800653e:	f8d8 4000 	ldr.w	r4, [r8]
 8006542:	4626      	mov	r6, r4
 8006544:	2e00      	cmp	r6, #0
 8006546:	d145      	bne.n	80065d4 <_malloc_r+0xdc>
 8006548:	2c00      	cmp	r4, #0
 800654a:	d048      	beq.n	80065de <_malloc_r+0xe6>
 800654c:	6823      	ldr	r3, [r4, #0]
 800654e:	4631      	mov	r1, r6
 8006550:	4638      	mov	r0, r7
 8006552:	eb04 0903 	add.w	r9, r4, r3
 8006556:	f000 fc73 	bl	8006e40 <_sbrk_r>
 800655a:	4581      	cmp	r9, r0
 800655c:	d13f      	bne.n	80065de <_malloc_r+0xe6>
 800655e:	6821      	ldr	r1, [r4, #0]
 8006560:	1a6d      	subs	r5, r5, r1
 8006562:	4629      	mov	r1, r5
 8006564:	4638      	mov	r0, r7
 8006566:	f7ff ffa7 	bl	80064b8 <sbrk_aligned>
 800656a:	3001      	adds	r0, #1
 800656c:	d037      	beq.n	80065de <_malloc_r+0xe6>
 800656e:	6823      	ldr	r3, [r4, #0]
 8006570:	442b      	add	r3, r5
 8006572:	6023      	str	r3, [r4, #0]
 8006574:	f8d8 3000 	ldr.w	r3, [r8]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d038      	beq.n	80065ee <_malloc_r+0xf6>
 800657c:	685a      	ldr	r2, [r3, #4]
 800657e:	42a2      	cmp	r2, r4
 8006580:	d12b      	bne.n	80065da <_malloc_r+0xe2>
 8006582:	2200      	movs	r2, #0
 8006584:	605a      	str	r2, [r3, #4]
 8006586:	e00f      	b.n	80065a8 <_malloc_r+0xb0>
 8006588:	6822      	ldr	r2, [r4, #0]
 800658a:	1b52      	subs	r2, r2, r5
 800658c:	d41f      	bmi.n	80065ce <_malloc_r+0xd6>
 800658e:	2a0b      	cmp	r2, #11
 8006590:	d917      	bls.n	80065c2 <_malloc_r+0xca>
 8006592:	1961      	adds	r1, r4, r5
 8006594:	42a3      	cmp	r3, r4
 8006596:	6025      	str	r5, [r4, #0]
 8006598:	bf18      	it	ne
 800659a:	6059      	strne	r1, [r3, #4]
 800659c:	6863      	ldr	r3, [r4, #4]
 800659e:	bf08      	it	eq
 80065a0:	f8c8 1000 	streq.w	r1, [r8]
 80065a4:	5162      	str	r2, [r4, r5]
 80065a6:	604b      	str	r3, [r1, #4]
 80065a8:	4638      	mov	r0, r7
 80065aa:	f104 060b 	add.w	r6, r4, #11
 80065ae:	f000 f829 	bl	8006604 <__malloc_unlock>
 80065b2:	f026 0607 	bic.w	r6, r6, #7
 80065b6:	1d23      	adds	r3, r4, #4
 80065b8:	1af2      	subs	r2, r6, r3
 80065ba:	d0ae      	beq.n	800651a <_malloc_r+0x22>
 80065bc:	1b9b      	subs	r3, r3, r6
 80065be:	50a3      	str	r3, [r4, r2]
 80065c0:	e7ab      	b.n	800651a <_malloc_r+0x22>
 80065c2:	42a3      	cmp	r3, r4
 80065c4:	6862      	ldr	r2, [r4, #4]
 80065c6:	d1dd      	bne.n	8006584 <_malloc_r+0x8c>
 80065c8:	f8c8 2000 	str.w	r2, [r8]
 80065cc:	e7ec      	b.n	80065a8 <_malloc_r+0xb0>
 80065ce:	4623      	mov	r3, r4
 80065d0:	6864      	ldr	r4, [r4, #4]
 80065d2:	e7ac      	b.n	800652e <_malloc_r+0x36>
 80065d4:	4634      	mov	r4, r6
 80065d6:	6876      	ldr	r6, [r6, #4]
 80065d8:	e7b4      	b.n	8006544 <_malloc_r+0x4c>
 80065da:	4613      	mov	r3, r2
 80065dc:	e7cc      	b.n	8006578 <_malloc_r+0x80>
 80065de:	230c      	movs	r3, #12
 80065e0:	603b      	str	r3, [r7, #0]
 80065e2:	4638      	mov	r0, r7
 80065e4:	f000 f80e 	bl	8006604 <__malloc_unlock>
 80065e8:	e797      	b.n	800651a <_malloc_r+0x22>
 80065ea:	6025      	str	r5, [r4, #0]
 80065ec:	e7dc      	b.n	80065a8 <_malloc_r+0xb0>
 80065ee:	605b      	str	r3, [r3, #4]
 80065f0:	deff      	udf	#255	; 0xff
 80065f2:	bf00      	nop
 80065f4:	200005d4 	.word	0x200005d4

080065f8 <__malloc_lock>:
 80065f8:	4801      	ldr	r0, [pc, #4]	; (8006600 <__malloc_lock+0x8>)
 80065fa:	f7ff bf0e 	b.w	800641a <__retarget_lock_acquire_recursive>
 80065fe:	bf00      	nop
 8006600:	200005d0 	.word	0x200005d0

08006604 <__malloc_unlock>:
 8006604:	4801      	ldr	r0, [pc, #4]	; (800660c <__malloc_unlock+0x8>)
 8006606:	f7ff bf09 	b.w	800641c <__retarget_lock_release_recursive>
 800660a:	bf00      	nop
 800660c:	200005d0 	.word	0x200005d0

08006610 <__sfputc_r>:
 8006610:	6893      	ldr	r3, [r2, #8]
 8006612:	3b01      	subs	r3, #1
 8006614:	2b00      	cmp	r3, #0
 8006616:	b410      	push	{r4}
 8006618:	6093      	str	r3, [r2, #8]
 800661a:	da08      	bge.n	800662e <__sfputc_r+0x1e>
 800661c:	6994      	ldr	r4, [r2, #24]
 800661e:	42a3      	cmp	r3, r4
 8006620:	db01      	blt.n	8006626 <__sfputc_r+0x16>
 8006622:	290a      	cmp	r1, #10
 8006624:	d103      	bne.n	800662e <__sfputc_r+0x1e>
 8006626:	f85d 4b04 	ldr.w	r4, [sp], #4
 800662a:	f000 bb73 	b.w	8006d14 <__swbuf_r>
 800662e:	6813      	ldr	r3, [r2, #0]
 8006630:	1c58      	adds	r0, r3, #1
 8006632:	6010      	str	r0, [r2, #0]
 8006634:	7019      	strb	r1, [r3, #0]
 8006636:	4608      	mov	r0, r1
 8006638:	f85d 4b04 	ldr.w	r4, [sp], #4
 800663c:	4770      	bx	lr

0800663e <__sfputs_r>:
 800663e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006640:	4606      	mov	r6, r0
 8006642:	460f      	mov	r7, r1
 8006644:	4614      	mov	r4, r2
 8006646:	18d5      	adds	r5, r2, r3
 8006648:	42ac      	cmp	r4, r5
 800664a:	d101      	bne.n	8006650 <__sfputs_r+0x12>
 800664c:	2000      	movs	r0, #0
 800664e:	e007      	b.n	8006660 <__sfputs_r+0x22>
 8006650:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006654:	463a      	mov	r2, r7
 8006656:	4630      	mov	r0, r6
 8006658:	f7ff ffda 	bl	8006610 <__sfputc_r>
 800665c:	1c43      	adds	r3, r0, #1
 800665e:	d1f3      	bne.n	8006648 <__sfputs_r+0xa>
 8006660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006664 <_vfiprintf_r>:
 8006664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006668:	460d      	mov	r5, r1
 800666a:	b09d      	sub	sp, #116	; 0x74
 800666c:	4614      	mov	r4, r2
 800666e:	4698      	mov	r8, r3
 8006670:	4606      	mov	r6, r0
 8006672:	b118      	cbz	r0, 800667c <_vfiprintf_r+0x18>
 8006674:	6a03      	ldr	r3, [r0, #32]
 8006676:	b90b      	cbnz	r3, 800667c <_vfiprintf_r+0x18>
 8006678:	f7ff fdca 	bl	8006210 <__sinit>
 800667c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800667e:	07d9      	lsls	r1, r3, #31
 8006680:	d405      	bmi.n	800668e <_vfiprintf_r+0x2a>
 8006682:	89ab      	ldrh	r3, [r5, #12]
 8006684:	059a      	lsls	r2, r3, #22
 8006686:	d402      	bmi.n	800668e <_vfiprintf_r+0x2a>
 8006688:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800668a:	f7ff fec6 	bl	800641a <__retarget_lock_acquire_recursive>
 800668e:	89ab      	ldrh	r3, [r5, #12]
 8006690:	071b      	lsls	r3, r3, #28
 8006692:	d501      	bpl.n	8006698 <_vfiprintf_r+0x34>
 8006694:	692b      	ldr	r3, [r5, #16]
 8006696:	b99b      	cbnz	r3, 80066c0 <_vfiprintf_r+0x5c>
 8006698:	4629      	mov	r1, r5
 800669a:	4630      	mov	r0, r6
 800669c:	f000 fb78 	bl	8006d90 <__swsetup_r>
 80066a0:	b170      	cbz	r0, 80066c0 <_vfiprintf_r+0x5c>
 80066a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80066a4:	07dc      	lsls	r4, r3, #31
 80066a6:	d504      	bpl.n	80066b2 <_vfiprintf_r+0x4e>
 80066a8:	f04f 30ff 	mov.w	r0, #4294967295
 80066ac:	b01d      	add	sp, #116	; 0x74
 80066ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066b2:	89ab      	ldrh	r3, [r5, #12]
 80066b4:	0598      	lsls	r0, r3, #22
 80066b6:	d4f7      	bmi.n	80066a8 <_vfiprintf_r+0x44>
 80066b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80066ba:	f7ff feaf 	bl	800641c <__retarget_lock_release_recursive>
 80066be:	e7f3      	b.n	80066a8 <_vfiprintf_r+0x44>
 80066c0:	2300      	movs	r3, #0
 80066c2:	9309      	str	r3, [sp, #36]	; 0x24
 80066c4:	2320      	movs	r3, #32
 80066c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80066ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80066ce:	2330      	movs	r3, #48	; 0x30
 80066d0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006884 <_vfiprintf_r+0x220>
 80066d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80066d8:	f04f 0901 	mov.w	r9, #1
 80066dc:	4623      	mov	r3, r4
 80066de:	469a      	mov	sl, r3
 80066e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066e4:	b10a      	cbz	r2, 80066ea <_vfiprintf_r+0x86>
 80066e6:	2a25      	cmp	r2, #37	; 0x25
 80066e8:	d1f9      	bne.n	80066de <_vfiprintf_r+0x7a>
 80066ea:	ebba 0b04 	subs.w	fp, sl, r4
 80066ee:	d00b      	beq.n	8006708 <_vfiprintf_r+0xa4>
 80066f0:	465b      	mov	r3, fp
 80066f2:	4622      	mov	r2, r4
 80066f4:	4629      	mov	r1, r5
 80066f6:	4630      	mov	r0, r6
 80066f8:	f7ff ffa1 	bl	800663e <__sfputs_r>
 80066fc:	3001      	adds	r0, #1
 80066fe:	f000 80a9 	beq.w	8006854 <_vfiprintf_r+0x1f0>
 8006702:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006704:	445a      	add	r2, fp
 8006706:	9209      	str	r2, [sp, #36]	; 0x24
 8006708:	f89a 3000 	ldrb.w	r3, [sl]
 800670c:	2b00      	cmp	r3, #0
 800670e:	f000 80a1 	beq.w	8006854 <_vfiprintf_r+0x1f0>
 8006712:	2300      	movs	r3, #0
 8006714:	f04f 32ff 	mov.w	r2, #4294967295
 8006718:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800671c:	f10a 0a01 	add.w	sl, sl, #1
 8006720:	9304      	str	r3, [sp, #16]
 8006722:	9307      	str	r3, [sp, #28]
 8006724:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006728:	931a      	str	r3, [sp, #104]	; 0x68
 800672a:	4654      	mov	r4, sl
 800672c:	2205      	movs	r2, #5
 800672e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006732:	4854      	ldr	r0, [pc, #336]	; (8006884 <_vfiprintf_r+0x220>)
 8006734:	f7f9 fd4c 	bl	80001d0 <memchr>
 8006738:	9a04      	ldr	r2, [sp, #16]
 800673a:	b9d8      	cbnz	r0, 8006774 <_vfiprintf_r+0x110>
 800673c:	06d1      	lsls	r1, r2, #27
 800673e:	bf44      	itt	mi
 8006740:	2320      	movmi	r3, #32
 8006742:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006746:	0713      	lsls	r3, r2, #28
 8006748:	bf44      	itt	mi
 800674a:	232b      	movmi	r3, #43	; 0x2b
 800674c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006750:	f89a 3000 	ldrb.w	r3, [sl]
 8006754:	2b2a      	cmp	r3, #42	; 0x2a
 8006756:	d015      	beq.n	8006784 <_vfiprintf_r+0x120>
 8006758:	9a07      	ldr	r2, [sp, #28]
 800675a:	4654      	mov	r4, sl
 800675c:	2000      	movs	r0, #0
 800675e:	f04f 0c0a 	mov.w	ip, #10
 8006762:	4621      	mov	r1, r4
 8006764:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006768:	3b30      	subs	r3, #48	; 0x30
 800676a:	2b09      	cmp	r3, #9
 800676c:	d94d      	bls.n	800680a <_vfiprintf_r+0x1a6>
 800676e:	b1b0      	cbz	r0, 800679e <_vfiprintf_r+0x13a>
 8006770:	9207      	str	r2, [sp, #28]
 8006772:	e014      	b.n	800679e <_vfiprintf_r+0x13a>
 8006774:	eba0 0308 	sub.w	r3, r0, r8
 8006778:	fa09 f303 	lsl.w	r3, r9, r3
 800677c:	4313      	orrs	r3, r2
 800677e:	9304      	str	r3, [sp, #16]
 8006780:	46a2      	mov	sl, r4
 8006782:	e7d2      	b.n	800672a <_vfiprintf_r+0xc6>
 8006784:	9b03      	ldr	r3, [sp, #12]
 8006786:	1d19      	adds	r1, r3, #4
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	9103      	str	r1, [sp, #12]
 800678c:	2b00      	cmp	r3, #0
 800678e:	bfbb      	ittet	lt
 8006790:	425b      	neglt	r3, r3
 8006792:	f042 0202 	orrlt.w	r2, r2, #2
 8006796:	9307      	strge	r3, [sp, #28]
 8006798:	9307      	strlt	r3, [sp, #28]
 800679a:	bfb8      	it	lt
 800679c:	9204      	strlt	r2, [sp, #16]
 800679e:	7823      	ldrb	r3, [r4, #0]
 80067a0:	2b2e      	cmp	r3, #46	; 0x2e
 80067a2:	d10c      	bne.n	80067be <_vfiprintf_r+0x15a>
 80067a4:	7863      	ldrb	r3, [r4, #1]
 80067a6:	2b2a      	cmp	r3, #42	; 0x2a
 80067a8:	d134      	bne.n	8006814 <_vfiprintf_r+0x1b0>
 80067aa:	9b03      	ldr	r3, [sp, #12]
 80067ac:	1d1a      	adds	r2, r3, #4
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	9203      	str	r2, [sp, #12]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	bfb8      	it	lt
 80067b6:	f04f 33ff 	movlt.w	r3, #4294967295
 80067ba:	3402      	adds	r4, #2
 80067bc:	9305      	str	r3, [sp, #20]
 80067be:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006894 <_vfiprintf_r+0x230>
 80067c2:	7821      	ldrb	r1, [r4, #0]
 80067c4:	2203      	movs	r2, #3
 80067c6:	4650      	mov	r0, sl
 80067c8:	f7f9 fd02 	bl	80001d0 <memchr>
 80067cc:	b138      	cbz	r0, 80067de <_vfiprintf_r+0x17a>
 80067ce:	9b04      	ldr	r3, [sp, #16]
 80067d0:	eba0 000a 	sub.w	r0, r0, sl
 80067d4:	2240      	movs	r2, #64	; 0x40
 80067d6:	4082      	lsls	r2, r0
 80067d8:	4313      	orrs	r3, r2
 80067da:	3401      	adds	r4, #1
 80067dc:	9304      	str	r3, [sp, #16]
 80067de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067e2:	4829      	ldr	r0, [pc, #164]	; (8006888 <_vfiprintf_r+0x224>)
 80067e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80067e8:	2206      	movs	r2, #6
 80067ea:	f7f9 fcf1 	bl	80001d0 <memchr>
 80067ee:	2800      	cmp	r0, #0
 80067f0:	d03f      	beq.n	8006872 <_vfiprintf_r+0x20e>
 80067f2:	4b26      	ldr	r3, [pc, #152]	; (800688c <_vfiprintf_r+0x228>)
 80067f4:	bb1b      	cbnz	r3, 800683e <_vfiprintf_r+0x1da>
 80067f6:	9b03      	ldr	r3, [sp, #12]
 80067f8:	3307      	adds	r3, #7
 80067fa:	f023 0307 	bic.w	r3, r3, #7
 80067fe:	3308      	adds	r3, #8
 8006800:	9303      	str	r3, [sp, #12]
 8006802:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006804:	443b      	add	r3, r7
 8006806:	9309      	str	r3, [sp, #36]	; 0x24
 8006808:	e768      	b.n	80066dc <_vfiprintf_r+0x78>
 800680a:	fb0c 3202 	mla	r2, ip, r2, r3
 800680e:	460c      	mov	r4, r1
 8006810:	2001      	movs	r0, #1
 8006812:	e7a6      	b.n	8006762 <_vfiprintf_r+0xfe>
 8006814:	2300      	movs	r3, #0
 8006816:	3401      	adds	r4, #1
 8006818:	9305      	str	r3, [sp, #20]
 800681a:	4619      	mov	r1, r3
 800681c:	f04f 0c0a 	mov.w	ip, #10
 8006820:	4620      	mov	r0, r4
 8006822:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006826:	3a30      	subs	r2, #48	; 0x30
 8006828:	2a09      	cmp	r2, #9
 800682a:	d903      	bls.n	8006834 <_vfiprintf_r+0x1d0>
 800682c:	2b00      	cmp	r3, #0
 800682e:	d0c6      	beq.n	80067be <_vfiprintf_r+0x15a>
 8006830:	9105      	str	r1, [sp, #20]
 8006832:	e7c4      	b.n	80067be <_vfiprintf_r+0x15a>
 8006834:	fb0c 2101 	mla	r1, ip, r1, r2
 8006838:	4604      	mov	r4, r0
 800683a:	2301      	movs	r3, #1
 800683c:	e7f0      	b.n	8006820 <_vfiprintf_r+0x1bc>
 800683e:	ab03      	add	r3, sp, #12
 8006840:	9300      	str	r3, [sp, #0]
 8006842:	462a      	mov	r2, r5
 8006844:	4b12      	ldr	r3, [pc, #72]	; (8006890 <_vfiprintf_r+0x22c>)
 8006846:	a904      	add	r1, sp, #16
 8006848:	4630      	mov	r0, r6
 800684a:	f3af 8000 	nop.w
 800684e:	4607      	mov	r7, r0
 8006850:	1c78      	adds	r0, r7, #1
 8006852:	d1d6      	bne.n	8006802 <_vfiprintf_r+0x19e>
 8006854:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006856:	07d9      	lsls	r1, r3, #31
 8006858:	d405      	bmi.n	8006866 <_vfiprintf_r+0x202>
 800685a:	89ab      	ldrh	r3, [r5, #12]
 800685c:	059a      	lsls	r2, r3, #22
 800685e:	d402      	bmi.n	8006866 <_vfiprintf_r+0x202>
 8006860:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006862:	f7ff fddb 	bl	800641c <__retarget_lock_release_recursive>
 8006866:	89ab      	ldrh	r3, [r5, #12]
 8006868:	065b      	lsls	r3, r3, #25
 800686a:	f53f af1d 	bmi.w	80066a8 <_vfiprintf_r+0x44>
 800686e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006870:	e71c      	b.n	80066ac <_vfiprintf_r+0x48>
 8006872:	ab03      	add	r3, sp, #12
 8006874:	9300      	str	r3, [sp, #0]
 8006876:	462a      	mov	r2, r5
 8006878:	4b05      	ldr	r3, [pc, #20]	; (8006890 <_vfiprintf_r+0x22c>)
 800687a:	a904      	add	r1, sp, #16
 800687c:	4630      	mov	r0, r6
 800687e:	f000 f879 	bl	8006974 <_printf_i>
 8006882:	e7e4      	b.n	800684e <_vfiprintf_r+0x1ea>
 8006884:	08006fe0 	.word	0x08006fe0
 8006888:	08006fea 	.word	0x08006fea
 800688c:	00000000 	.word	0x00000000
 8006890:	0800663f 	.word	0x0800663f
 8006894:	08006fe6 	.word	0x08006fe6

08006898 <_printf_common>:
 8006898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800689c:	4616      	mov	r6, r2
 800689e:	4699      	mov	r9, r3
 80068a0:	688a      	ldr	r2, [r1, #8]
 80068a2:	690b      	ldr	r3, [r1, #16]
 80068a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80068a8:	4293      	cmp	r3, r2
 80068aa:	bfb8      	it	lt
 80068ac:	4613      	movlt	r3, r2
 80068ae:	6033      	str	r3, [r6, #0]
 80068b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80068b4:	4607      	mov	r7, r0
 80068b6:	460c      	mov	r4, r1
 80068b8:	b10a      	cbz	r2, 80068be <_printf_common+0x26>
 80068ba:	3301      	adds	r3, #1
 80068bc:	6033      	str	r3, [r6, #0]
 80068be:	6823      	ldr	r3, [r4, #0]
 80068c0:	0699      	lsls	r1, r3, #26
 80068c2:	bf42      	ittt	mi
 80068c4:	6833      	ldrmi	r3, [r6, #0]
 80068c6:	3302      	addmi	r3, #2
 80068c8:	6033      	strmi	r3, [r6, #0]
 80068ca:	6825      	ldr	r5, [r4, #0]
 80068cc:	f015 0506 	ands.w	r5, r5, #6
 80068d0:	d106      	bne.n	80068e0 <_printf_common+0x48>
 80068d2:	f104 0a19 	add.w	sl, r4, #25
 80068d6:	68e3      	ldr	r3, [r4, #12]
 80068d8:	6832      	ldr	r2, [r6, #0]
 80068da:	1a9b      	subs	r3, r3, r2
 80068dc:	42ab      	cmp	r3, r5
 80068de:	dc26      	bgt.n	800692e <_printf_common+0x96>
 80068e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80068e4:	1e13      	subs	r3, r2, #0
 80068e6:	6822      	ldr	r2, [r4, #0]
 80068e8:	bf18      	it	ne
 80068ea:	2301      	movne	r3, #1
 80068ec:	0692      	lsls	r2, r2, #26
 80068ee:	d42b      	bmi.n	8006948 <_printf_common+0xb0>
 80068f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068f4:	4649      	mov	r1, r9
 80068f6:	4638      	mov	r0, r7
 80068f8:	47c0      	blx	r8
 80068fa:	3001      	adds	r0, #1
 80068fc:	d01e      	beq.n	800693c <_printf_common+0xa4>
 80068fe:	6823      	ldr	r3, [r4, #0]
 8006900:	6922      	ldr	r2, [r4, #16]
 8006902:	f003 0306 	and.w	r3, r3, #6
 8006906:	2b04      	cmp	r3, #4
 8006908:	bf02      	ittt	eq
 800690a:	68e5      	ldreq	r5, [r4, #12]
 800690c:	6833      	ldreq	r3, [r6, #0]
 800690e:	1aed      	subeq	r5, r5, r3
 8006910:	68a3      	ldr	r3, [r4, #8]
 8006912:	bf0c      	ite	eq
 8006914:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006918:	2500      	movne	r5, #0
 800691a:	4293      	cmp	r3, r2
 800691c:	bfc4      	itt	gt
 800691e:	1a9b      	subgt	r3, r3, r2
 8006920:	18ed      	addgt	r5, r5, r3
 8006922:	2600      	movs	r6, #0
 8006924:	341a      	adds	r4, #26
 8006926:	42b5      	cmp	r5, r6
 8006928:	d11a      	bne.n	8006960 <_printf_common+0xc8>
 800692a:	2000      	movs	r0, #0
 800692c:	e008      	b.n	8006940 <_printf_common+0xa8>
 800692e:	2301      	movs	r3, #1
 8006930:	4652      	mov	r2, sl
 8006932:	4649      	mov	r1, r9
 8006934:	4638      	mov	r0, r7
 8006936:	47c0      	blx	r8
 8006938:	3001      	adds	r0, #1
 800693a:	d103      	bne.n	8006944 <_printf_common+0xac>
 800693c:	f04f 30ff 	mov.w	r0, #4294967295
 8006940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006944:	3501      	adds	r5, #1
 8006946:	e7c6      	b.n	80068d6 <_printf_common+0x3e>
 8006948:	18e1      	adds	r1, r4, r3
 800694a:	1c5a      	adds	r2, r3, #1
 800694c:	2030      	movs	r0, #48	; 0x30
 800694e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006952:	4422      	add	r2, r4
 8006954:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006958:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800695c:	3302      	adds	r3, #2
 800695e:	e7c7      	b.n	80068f0 <_printf_common+0x58>
 8006960:	2301      	movs	r3, #1
 8006962:	4622      	mov	r2, r4
 8006964:	4649      	mov	r1, r9
 8006966:	4638      	mov	r0, r7
 8006968:	47c0      	blx	r8
 800696a:	3001      	adds	r0, #1
 800696c:	d0e6      	beq.n	800693c <_printf_common+0xa4>
 800696e:	3601      	adds	r6, #1
 8006970:	e7d9      	b.n	8006926 <_printf_common+0x8e>
	...

08006974 <_printf_i>:
 8006974:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006978:	7e0f      	ldrb	r7, [r1, #24]
 800697a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800697c:	2f78      	cmp	r7, #120	; 0x78
 800697e:	4691      	mov	r9, r2
 8006980:	4680      	mov	r8, r0
 8006982:	460c      	mov	r4, r1
 8006984:	469a      	mov	sl, r3
 8006986:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800698a:	d807      	bhi.n	800699c <_printf_i+0x28>
 800698c:	2f62      	cmp	r7, #98	; 0x62
 800698e:	d80a      	bhi.n	80069a6 <_printf_i+0x32>
 8006990:	2f00      	cmp	r7, #0
 8006992:	f000 80d4 	beq.w	8006b3e <_printf_i+0x1ca>
 8006996:	2f58      	cmp	r7, #88	; 0x58
 8006998:	f000 80c0 	beq.w	8006b1c <_printf_i+0x1a8>
 800699c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80069a4:	e03a      	b.n	8006a1c <_printf_i+0xa8>
 80069a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80069aa:	2b15      	cmp	r3, #21
 80069ac:	d8f6      	bhi.n	800699c <_printf_i+0x28>
 80069ae:	a101      	add	r1, pc, #4	; (adr r1, 80069b4 <_printf_i+0x40>)
 80069b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80069b4:	08006a0d 	.word	0x08006a0d
 80069b8:	08006a21 	.word	0x08006a21
 80069bc:	0800699d 	.word	0x0800699d
 80069c0:	0800699d 	.word	0x0800699d
 80069c4:	0800699d 	.word	0x0800699d
 80069c8:	0800699d 	.word	0x0800699d
 80069cc:	08006a21 	.word	0x08006a21
 80069d0:	0800699d 	.word	0x0800699d
 80069d4:	0800699d 	.word	0x0800699d
 80069d8:	0800699d 	.word	0x0800699d
 80069dc:	0800699d 	.word	0x0800699d
 80069e0:	08006b25 	.word	0x08006b25
 80069e4:	08006a4d 	.word	0x08006a4d
 80069e8:	08006adf 	.word	0x08006adf
 80069ec:	0800699d 	.word	0x0800699d
 80069f0:	0800699d 	.word	0x0800699d
 80069f4:	08006b47 	.word	0x08006b47
 80069f8:	0800699d 	.word	0x0800699d
 80069fc:	08006a4d 	.word	0x08006a4d
 8006a00:	0800699d 	.word	0x0800699d
 8006a04:	0800699d 	.word	0x0800699d
 8006a08:	08006ae7 	.word	0x08006ae7
 8006a0c:	682b      	ldr	r3, [r5, #0]
 8006a0e:	1d1a      	adds	r2, r3, #4
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	602a      	str	r2, [r5, #0]
 8006a14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	e09f      	b.n	8006b60 <_printf_i+0x1ec>
 8006a20:	6820      	ldr	r0, [r4, #0]
 8006a22:	682b      	ldr	r3, [r5, #0]
 8006a24:	0607      	lsls	r7, r0, #24
 8006a26:	f103 0104 	add.w	r1, r3, #4
 8006a2a:	6029      	str	r1, [r5, #0]
 8006a2c:	d501      	bpl.n	8006a32 <_printf_i+0xbe>
 8006a2e:	681e      	ldr	r6, [r3, #0]
 8006a30:	e003      	b.n	8006a3a <_printf_i+0xc6>
 8006a32:	0646      	lsls	r6, r0, #25
 8006a34:	d5fb      	bpl.n	8006a2e <_printf_i+0xba>
 8006a36:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006a3a:	2e00      	cmp	r6, #0
 8006a3c:	da03      	bge.n	8006a46 <_printf_i+0xd2>
 8006a3e:	232d      	movs	r3, #45	; 0x2d
 8006a40:	4276      	negs	r6, r6
 8006a42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a46:	485a      	ldr	r0, [pc, #360]	; (8006bb0 <_printf_i+0x23c>)
 8006a48:	230a      	movs	r3, #10
 8006a4a:	e012      	b.n	8006a72 <_printf_i+0xfe>
 8006a4c:	682b      	ldr	r3, [r5, #0]
 8006a4e:	6820      	ldr	r0, [r4, #0]
 8006a50:	1d19      	adds	r1, r3, #4
 8006a52:	6029      	str	r1, [r5, #0]
 8006a54:	0605      	lsls	r5, r0, #24
 8006a56:	d501      	bpl.n	8006a5c <_printf_i+0xe8>
 8006a58:	681e      	ldr	r6, [r3, #0]
 8006a5a:	e002      	b.n	8006a62 <_printf_i+0xee>
 8006a5c:	0641      	lsls	r1, r0, #25
 8006a5e:	d5fb      	bpl.n	8006a58 <_printf_i+0xe4>
 8006a60:	881e      	ldrh	r6, [r3, #0]
 8006a62:	4853      	ldr	r0, [pc, #332]	; (8006bb0 <_printf_i+0x23c>)
 8006a64:	2f6f      	cmp	r7, #111	; 0x6f
 8006a66:	bf0c      	ite	eq
 8006a68:	2308      	moveq	r3, #8
 8006a6a:	230a      	movne	r3, #10
 8006a6c:	2100      	movs	r1, #0
 8006a6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a72:	6865      	ldr	r5, [r4, #4]
 8006a74:	60a5      	str	r5, [r4, #8]
 8006a76:	2d00      	cmp	r5, #0
 8006a78:	bfa2      	ittt	ge
 8006a7a:	6821      	ldrge	r1, [r4, #0]
 8006a7c:	f021 0104 	bicge.w	r1, r1, #4
 8006a80:	6021      	strge	r1, [r4, #0]
 8006a82:	b90e      	cbnz	r6, 8006a88 <_printf_i+0x114>
 8006a84:	2d00      	cmp	r5, #0
 8006a86:	d04b      	beq.n	8006b20 <_printf_i+0x1ac>
 8006a88:	4615      	mov	r5, r2
 8006a8a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006a8e:	fb03 6711 	mls	r7, r3, r1, r6
 8006a92:	5dc7      	ldrb	r7, [r0, r7]
 8006a94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006a98:	4637      	mov	r7, r6
 8006a9a:	42bb      	cmp	r3, r7
 8006a9c:	460e      	mov	r6, r1
 8006a9e:	d9f4      	bls.n	8006a8a <_printf_i+0x116>
 8006aa0:	2b08      	cmp	r3, #8
 8006aa2:	d10b      	bne.n	8006abc <_printf_i+0x148>
 8006aa4:	6823      	ldr	r3, [r4, #0]
 8006aa6:	07de      	lsls	r6, r3, #31
 8006aa8:	d508      	bpl.n	8006abc <_printf_i+0x148>
 8006aaa:	6923      	ldr	r3, [r4, #16]
 8006aac:	6861      	ldr	r1, [r4, #4]
 8006aae:	4299      	cmp	r1, r3
 8006ab0:	bfde      	ittt	le
 8006ab2:	2330      	movle	r3, #48	; 0x30
 8006ab4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006ab8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006abc:	1b52      	subs	r2, r2, r5
 8006abe:	6122      	str	r2, [r4, #16]
 8006ac0:	f8cd a000 	str.w	sl, [sp]
 8006ac4:	464b      	mov	r3, r9
 8006ac6:	aa03      	add	r2, sp, #12
 8006ac8:	4621      	mov	r1, r4
 8006aca:	4640      	mov	r0, r8
 8006acc:	f7ff fee4 	bl	8006898 <_printf_common>
 8006ad0:	3001      	adds	r0, #1
 8006ad2:	d14a      	bne.n	8006b6a <_printf_i+0x1f6>
 8006ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ad8:	b004      	add	sp, #16
 8006ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ade:	6823      	ldr	r3, [r4, #0]
 8006ae0:	f043 0320 	orr.w	r3, r3, #32
 8006ae4:	6023      	str	r3, [r4, #0]
 8006ae6:	4833      	ldr	r0, [pc, #204]	; (8006bb4 <_printf_i+0x240>)
 8006ae8:	2778      	movs	r7, #120	; 0x78
 8006aea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006aee:	6823      	ldr	r3, [r4, #0]
 8006af0:	6829      	ldr	r1, [r5, #0]
 8006af2:	061f      	lsls	r7, r3, #24
 8006af4:	f851 6b04 	ldr.w	r6, [r1], #4
 8006af8:	d402      	bmi.n	8006b00 <_printf_i+0x18c>
 8006afa:	065f      	lsls	r7, r3, #25
 8006afc:	bf48      	it	mi
 8006afe:	b2b6      	uxthmi	r6, r6
 8006b00:	07df      	lsls	r7, r3, #31
 8006b02:	bf48      	it	mi
 8006b04:	f043 0320 	orrmi.w	r3, r3, #32
 8006b08:	6029      	str	r1, [r5, #0]
 8006b0a:	bf48      	it	mi
 8006b0c:	6023      	strmi	r3, [r4, #0]
 8006b0e:	b91e      	cbnz	r6, 8006b18 <_printf_i+0x1a4>
 8006b10:	6823      	ldr	r3, [r4, #0]
 8006b12:	f023 0320 	bic.w	r3, r3, #32
 8006b16:	6023      	str	r3, [r4, #0]
 8006b18:	2310      	movs	r3, #16
 8006b1a:	e7a7      	b.n	8006a6c <_printf_i+0xf8>
 8006b1c:	4824      	ldr	r0, [pc, #144]	; (8006bb0 <_printf_i+0x23c>)
 8006b1e:	e7e4      	b.n	8006aea <_printf_i+0x176>
 8006b20:	4615      	mov	r5, r2
 8006b22:	e7bd      	b.n	8006aa0 <_printf_i+0x12c>
 8006b24:	682b      	ldr	r3, [r5, #0]
 8006b26:	6826      	ldr	r6, [r4, #0]
 8006b28:	6961      	ldr	r1, [r4, #20]
 8006b2a:	1d18      	adds	r0, r3, #4
 8006b2c:	6028      	str	r0, [r5, #0]
 8006b2e:	0635      	lsls	r5, r6, #24
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	d501      	bpl.n	8006b38 <_printf_i+0x1c4>
 8006b34:	6019      	str	r1, [r3, #0]
 8006b36:	e002      	b.n	8006b3e <_printf_i+0x1ca>
 8006b38:	0670      	lsls	r0, r6, #25
 8006b3a:	d5fb      	bpl.n	8006b34 <_printf_i+0x1c0>
 8006b3c:	8019      	strh	r1, [r3, #0]
 8006b3e:	2300      	movs	r3, #0
 8006b40:	6123      	str	r3, [r4, #16]
 8006b42:	4615      	mov	r5, r2
 8006b44:	e7bc      	b.n	8006ac0 <_printf_i+0x14c>
 8006b46:	682b      	ldr	r3, [r5, #0]
 8006b48:	1d1a      	adds	r2, r3, #4
 8006b4a:	602a      	str	r2, [r5, #0]
 8006b4c:	681d      	ldr	r5, [r3, #0]
 8006b4e:	6862      	ldr	r2, [r4, #4]
 8006b50:	2100      	movs	r1, #0
 8006b52:	4628      	mov	r0, r5
 8006b54:	f7f9 fb3c 	bl	80001d0 <memchr>
 8006b58:	b108      	cbz	r0, 8006b5e <_printf_i+0x1ea>
 8006b5a:	1b40      	subs	r0, r0, r5
 8006b5c:	6060      	str	r0, [r4, #4]
 8006b5e:	6863      	ldr	r3, [r4, #4]
 8006b60:	6123      	str	r3, [r4, #16]
 8006b62:	2300      	movs	r3, #0
 8006b64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b68:	e7aa      	b.n	8006ac0 <_printf_i+0x14c>
 8006b6a:	6923      	ldr	r3, [r4, #16]
 8006b6c:	462a      	mov	r2, r5
 8006b6e:	4649      	mov	r1, r9
 8006b70:	4640      	mov	r0, r8
 8006b72:	47d0      	blx	sl
 8006b74:	3001      	adds	r0, #1
 8006b76:	d0ad      	beq.n	8006ad4 <_printf_i+0x160>
 8006b78:	6823      	ldr	r3, [r4, #0]
 8006b7a:	079b      	lsls	r3, r3, #30
 8006b7c:	d413      	bmi.n	8006ba6 <_printf_i+0x232>
 8006b7e:	68e0      	ldr	r0, [r4, #12]
 8006b80:	9b03      	ldr	r3, [sp, #12]
 8006b82:	4298      	cmp	r0, r3
 8006b84:	bfb8      	it	lt
 8006b86:	4618      	movlt	r0, r3
 8006b88:	e7a6      	b.n	8006ad8 <_printf_i+0x164>
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	4632      	mov	r2, r6
 8006b8e:	4649      	mov	r1, r9
 8006b90:	4640      	mov	r0, r8
 8006b92:	47d0      	blx	sl
 8006b94:	3001      	adds	r0, #1
 8006b96:	d09d      	beq.n	8006ad4 <_printf_i+0x160>
 8006b98:	3501      	adds	r5, #1
 8006b9a:	68e3      	ldr	r3, [r4, #12]
 8006b9c:	9903      	ldr	r1, [sp, #12]
 8006b9e:	1a5b      	subs	r3, r3, r1
 8006ba0:	42ab      	cmp	r3, r5
 8006ba2:	dcf2      	bgt.n	8006b8a <_printf_i+0x216>
 8006ba4:	e7eb      	b.n	8006b7e <_printf_i+0x20a>
 8006ba6:	2500      	movs	r5, #0
 8006ba8:	f104 0619 	add.w	r6, r4, #25
 8006bac:	e7f5      	b.n	8006b9a <_printf_i+0x226>
 8006bae:	bf00      	nop
 8006bb0:	08006ff1 	.word	0x08006ff1
 8006bb4:	08007002 	.word	0x08007002

08006bb8 <__sflush_r>:
 8006bb8:	898a      	ldrh	r2, [r1, #12]
 8006bba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bbe:	4605      	mov	r5, r0
 8006bc0:	0710      	lsls	r0, r2, #28
 8006bc2:	460c      	mov	r4, r1
 8006bc4:	d458      	bmi.n	8006c78 <__sflush_r+0xc0>
 8006bc6:	684b      	ldr	r3, [r1, #4]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	dc05      	bgt.n	8006bd8 <__sflush_r+0x20>
 8006bcc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	dc02      	bgt.n	8006bd8 <__sflush_r+0x20>
 8006bd2:	2000      	movs	r0, #0
 8006bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006bda:	2e00      	cmp	r6, #0
 8006bdc:	d0f9      	beq.n	8006bd2 <__sflush_r+0x1a>
 8006bde:	2300      	movs	r3, #0
 8006be0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006be4:	682f      	ldr	r7, [r5, #0]
 8006be6:	6a21      	ldr	r1, [r4, #32]
 8006be8:	602b      	str	r3, [r5, #0]
 8006bea:	d032      	beq.n	8006c52 <__sflush_r+0x9a>
 8006bec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006bee:	89a3      	ldrh	r3, [r4, #12]
 8006bf0:	075a      	lsls	r2, r3, #29
 8006bf2:	d505      	bpl.n	8006c00 <__sflush_r+0x48>
 8006bf4:	6863      	ldr	r3, [r4, #4]
 8006bf6:	1ac0      	subs	r0, r0, r3
 8006bf8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006bfa:	b10b      	cbz	r3, 8006c00 <__sflush_r+0x48>
 8006bfc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006bfe:	1ac0      	subs	r0, r0, r3
 8006c00:	2300      	movs	r3, #0
 8006c02:	4602      	mov	r2, r0
 8006c04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c06:	6a21      	ldr	r1, [r4, #32]
 8006c08:	4628      	mov	r0, r5
 8006c0a:	47b0      	blx	r6
 8006c0c:	1c43      	adds	r3, r0, #1
 8006c0e:	89a3      	ldrh	r3, [r4, #12]
 8006c10:	d106      	bne.n	8006c20 <__sflush_r+0x68>
 8006c12:	6829      	ldr	r1, [r5, #0]
 8006c14:	291d      	cmp	r1, #29
 8006c16:	d82b      	bhi.n	8006c70 <__sflush_r+0xb8>
 8006c18:	4a29      	ldr	r2, [pc, #164]	; (8006cc0 <__sflush_r+0x108>)
 8006c1a:	410a      	asrs	r2, r1
 8006c1c:	07d6      	lsls	r6, r2, #31
 8006c1e:	d427      	bmi.n	8006c70 <__sflush_r+0xb8>
 8006c20:	2200      	movs	r2, #0
 8006c22:	6062      	str	r2, [r4, #4]
 8006c24:	04d9      	lsls	r1, r3, #19
 8006c26:	6922      	ldr	r2, [r4, #16]
 8006c28:	6022      	str	r2, [r4, #0]
 8006c2a:	d504      	bpl.n	8006c36 <__sflush_r+0x7e>
 8006c2c:	1c42      	adds	r2, r0, #1
 8006c2e:	d101      	bne.n	8006c34 <__sflush_r+0x7c>
 8006c30:	682b      	ldr	r3, [r5, #0]
 8006c32:	b903      	cbnz	r3, 8006c36 <__sflush_r+0x7e>
 8006c34:	6560      	str	r0, [r4, #84]	; 0x54
 8006c36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c38:	602f      	str	r7, [r5, #0]
 8006c3a:	2900      	cmp	r1, #0
 8006c3c:	d0c9      	beq.n	8006bd2 <__sflush_r+0x1a>
 8006c3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c42:	4299      	cmp	r1, r3
 8006c44:	d002      	beq.n	8006c4c <__sflush_r+0x94>
 8006c46:	4628      	mov	r0, r5
 8006c48:	f7ff fbea 	bl	8006420 <_free_r>
 8006c4c:	2000      	movs	r0, #0
 8006c4e:	6360      	str	r0, [r4, #52]	; 0x34
 8006c50:	e7c0      	b.n	8006bd4 <__sflush_r+0x1c>
 8006c52:	2301      	movs	r3, #1
 8006c54:	4628      	mov	r0, r5
 8006c56:	47b0      	blx	r6
 8006c58:	1c41      	adds	r1, r0, #1
 8006c5a:	d1c8      	bne.n	8006bee <__sflush_r+0x36>
 8006c5c:	682b      	ldr	r3, [r5, #0]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d0c5      	beq.n	8006bee <__sflush_r+0x36>
 8006c62:	2b1d      	cmp	r3, #29
 8006c64:	d001      	beq.n	8006c6a <__sflush_r+0xb2>
 8006c66:	2b16      	cmp	r3, #22
 8006c68:	d101      	bne.n	8006c6e <__sflush_r+0xb6>
 8006c6a:	602f      	str	r7, [r5, #0]
 8006c6c:	e7b1      	b.n	8006bd2 <__sflush_r+0x1a>
 8006c6e:	89a3      	ldrh	r3, [r4, #12]
 8006c70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c74:	81a3      	strh	r3, [r4, #12]
 8006c76:	e7ad      	b.n	8006bd4 <__sflush_r+0x1c>
 8006c78:	690f      	ldr	r7, [r1, #16]
 8006c7a:	2f00      	cmp	r7, #0
 8006c7c:	d0a9      	beq.n	8006bd2 <__sflush_r+0x1a>
 8006c7e:	0793      	lsls	r3, r2, #30
 8006c80:	680e      	ldr	r6, [r1, #0]
 8006c82:	bf08      	it	eq
 8006c84:	694b      	ldreq	r3, [r1, #20]
 8006c86:	600f      	str	r7, [r1, #0]
 8006c88:	bf18      	it	ne
 8006c8a:	2300      	movne	r3, #0
 8006c8c:	eba6 0807 	sub.w	r8, r6, r7
 8006c90:	608b      	str	r3, [r1, #8]
 8006c92:	f1b8 0f00 	cmp.w	r8, #0
 8006c96:	dd9c      	ble.n	8006bd2 <__sflush_r+0x1a>
 8006c98:	6a21      	ldr	r1, [r4, #32]
 8006c9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006c9c:	4643      	mov	r3, r8
 8006c9e:	463a      	mov	r2, r7
 8006ca0:	4628      	mov	r0, r5
 8006ca2:	47b0      	blx	r6
 8006ca4:	2800      	cmp	r0, #0
 8006ca6:	dc06      	bgt.n	8006cb6 <__sflush_r+0xfe>
 8006ca8:	89a3      	ldrh	r3, [r4, #12]
 8006caa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cae:	81a3      	strh	r3, [r4, #12]
 8006cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8006cb4:	e78e      	b.n	8006bd4 <__sflush_r+0x1c>
 8006cb6:	4407      	add	r7, r0
 8006cb8:	eba8 0800 	sub.w	r8, r8, r0
 8006cbc:	e7e9      	b.n	8006c92 <__sflush_r+0xda>
 8006cbe:	bf00      	nop
 8006cc0:	dfbffffe 	.word	0xdfbffffe

08006cc4 <_fflush_r>:
 8006cc4:	b538      	push	{r3, r4, r5, lr}
 8006cc6:	690b      	ldr	r3, [r1, #16]
 8006cc8:	4605      	mov	r5, r0
 8006cca:	460c      	mov	r4, r1
 8006ccc:	b913      	cbnz	r3, 8006cd4 <_fflush_r+0x10>
 8006cce:	2500      	movs	r5, #0
 8006cd0:	4628      	mov	r0, r5
 8006cd2:	bd38      	pop	{r3, r4, r5, pc}
 8006cd4:	b118      	cbz	r0, 8006cde <_fflush_r+0x1a>
 8006cd6:	6a03      	ldr	r3, [r0, #32]
 8006cd8:	b90b      	cbnz	r3, 8006cde <_fflush_r+0x1a>
 8006cda:	f7ff fa99 	bl	8006210 <__sinit>
 8006cde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d0f3      	beq.n	8006cce <_fflush_r+0xa>
 8006ce6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006ce8:	07d0      	lsls	r0, r2, #31
 8006cea:	d404      	bmi.n	8006cf6 <_fflush_r+0x32>
 8006cec:	0599      	lsls	r1, r3, #22
 8006cee:	d402      	bmi.n	8006cf6 <_fflush_r+0x32>
 8006cf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cf2:	f7ff fb92 	bl	800641a <__retarget_lock_acquire_recursive>
 8006cf6:	4628      	mov	r0, r5
 8006cf8:	4621      	mov	r1, r4
 8006cfa:	f7ff ff5d 	bl	8006bb8 <__sflush_r>
 8006cfe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d00:	07da      	lsls	r2, r3, #31
 8006d02:	4605      	mov	r5, r0
 8006d04:	d4e4      	bmi.n	8006cd0 <_fflush_r+0xc>
 8006d06:	89a3      	ldrh	r3, [r4, #12]
 8006d08:	059b      	lsls	r3, r3, #22
 8006d0a:	d4e1      	bmi.n	8006cd0 <_fflush_r+0xc>
 8006d0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d0e:	f7ff fb85 	bl	800641c <__retarget_lock_release_recursive>
 8006d12:	e7dd      	b.n	8006cd0 <_fflush_r+0xc>

08006d14 <__swbuf_r>:
 8006d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d16:	460e      	mov	r6, r1
 8006d18:	4614      	mov	r4, r2
 8006d1a:	4605      	mov	r5, r0
 8006d1c:	b118      	cbz	r0, 8006d26 <__swbuf_r+0x12>
 8006d1e:	6a03      	ldr	r3, [r0, #32]
 8006d20:	b90b      	cbnz	r3, 8006d26 <__swbuf_r+0x12>
 8006d22:	f7ff fa75 	bl	8006210 <__sinit>
 8006d26:	69a3      	ldr	r3, [r4, #24]
 8006d28:	60a3      	str	r3, [r4, #8]
 8006d2a:	89a3      	ldrh	r3, [r4, #12]
 8006d2c:	071a      	lsls	r2, r3, #28
 8006d2e:	d525      	bpl.n	8006d7c <__swbuf_r+0x68>
 8006d30:	6923      	ldr	r3, [r4, #16]
 8006d32:	b31b      	cbz	r3, 8006d7c <__swbuf_r+0x68>
 8006d34:	6823      	ldr	r3, [r4, #0]
 8006d36:	6922      	ldr	r2, [r4, #16]
 8006d38:	1a98      	subs	r0, r3, r2
 8006d3a:	6963      	ldr	r3, [r4, #20]
 8006d3c:	b2f6      	uxtb	r6, r6
 8006d3e:	4283      	cmp	r3, r0
 8006d40:	4637      	mov	r7, r6
 8006d42:	dc04      	bgt.n	8006d4e <__swbuf_r+0x3a>
 8006d44:	4621      	mov	r1, r4
 8006d46:	4628      	mov	r0, r5
 8006d48:	f7ff ffbc 	bl	8006cc4 <_fflush_r>
 8006d4c:	b9e0      	cbnz	r0, 8006d88 <__swbuf_r+0x74>
 8006d4e:	68a3      	ldr	r3, [r4, #8]
 8006d50:	3b01      	subs	r3, #1
 8006d52:	60a3      	str	r3, [r4, #8]
 8006d54:	6823      	ldr	r3, [r4, #0]
 8006d56:	1c5a      	adds	r2, r3, #1
 8006d58:	6022      	str	r2, [r4, #0]
 8006d5a:	701e      	strb	r6, [r3, #0]
 8006d5c:	6962      	ldr	r2, [r4, #20]
 8006d5e:	1c43      	adds	r3, r0, #1
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d004      	beq.n	8006d6e <__swbuf_r+0x5a>
 8006d64:	89a3      	ldrh	r3, [r4, #12]
 8006d66:	07db      	lsls	r3, r3, #31
 8006d68:	d506      	bpl.n	8006d78 <__swbuf_r+0x64>
 8006d6a:	2e0a      	cmp	r6, #10
 8006d6c:	d104      	bne.n	8006d78 <__swbuf_r+0x64>
 8006d6e:	4621      	mov	r1, r4
 8006d70:	4628      	mov	r0, r5
 8006d72:	f7ff ffa7 	bl	8006cc4 <_fflush_r>
 8006d76:	b938      	cbnz	r0, 8006d88 <__swbuf_r+0x74>
 8006d78:	4638      	mov	r0, r7
 8006d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d7c:	4621      	mov	r1, r4
 8006d7e:	4628      	mov	r0, r5
 8006d80:	f000 f806 	bl	8006d90 <__swsetup_r>
 8006d84:	2800      	cmp	r0, #0
 8006d86:	d0d5      	beq.n	8006d34 <__swbuf_r+0x20>
 8006d88:	f04f 37ff 	mov.w	r7, #4294967295
 8006d8c:	e7f4      	b.n	8006d78 <__swbuf_r+0x64>
	...

08006d90 <__swsetup_r>:
 8006d90:	b538      	push	{r3, r4, r5, lr}
 8006d92:	4b2a      	ldr	r3, [pc, #168]	; (8006e3c <__swsetup_r+0xac>)
 8006d94:	4605      	mov	r5, r0
 8006d96:	6818      	ldr	r0, [r3, #0]
 8006d98:	460c      	mov	r4, r1
 8006d9a:	b118      	cbz	r0, 8006da4 <__swsetup_r+0x14>
 8006d9c:	6a03      	ldr	r3, [r0, #32]
 8006d9e:	b90b      	cbnz	r3, 8006da4 <__swsetup_r+0x14>
 8006da0:	f7ff fa36 	bl	8006210 <__sinit>
 8006da4:	89a3      	ldrh	r3, [r4, #12]
 8006da6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006daa:	0718      	lsls	r0, r3, #28
 8006dac:	d422      	bmi.n	8006df4 <__swsetup_r+0x64>
 8006dae:	06d9      	lsls	r1, r3, #27
 8006db0:	d407      	bmi.n	8006dc2 <__swsetup_r+0x32>
 8006db2:	2309      	movs	r3, #9
 8006db4:	602b      	str	r3, [r5, #0]
 8006db6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006dba:	81a3      	strh	r3, [r4, #12]
 8006dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8006dc0:	e034      	b.n	8006e2c <__swsetup_r+0x9c>
 8006dc2:	0758      	lsls	r0, r3, #29
 8006dc4:	d512      	bpl.n	8006dec <__swsetup_r+0x5c>
 8006dc6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006dc8:	b141      	cbz	r1, 8006ddc <__swsetup_r+0x4c>
 8006dca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006dce:	4299      	cmp	r1, r3
 8006dd0:	d002      	beq.n	8006dd8 <__swsetup_r+0x48>
 8006dd2:	4628      	mov	r0, r5
 8006dd4:	f7ff fb24 	bl	8006420 <_free_r>
 8006dd8:	2300      	movs	r3, #0
 8006dda:	6363      	str	r3, [r4, #52]	; 0x34
 8006ddc:	89a3      	ldrh	r3, [r4, #12]
 8006dde:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006de2:	81a3      	strh	r3, [r4, #12]
 8006de4:	2300      	movs	r3, #0
 8006de6:	6063      	str	r3, [r4, #4]
 8006de8:	6923      	ldr	r3, [r4, #16]
 8006dea:	6023      	str	r3, [r4, #0]
 8006dec:	89a3      	ldrh	r3, [r4, #12]
 8006dee:	f043 0308 	orr.w	r3, r3, #8
 8006df2:	81a3      	strh	r3, [r4, #12]
 8006df4:	6923      	ldr	r3, [r4, #16]
 8006df6:	b94b      	cbnz	r3, 8006e0c <__swsetup_r+0x7c>
 8006df8:	89a3      	ldrh	r3, [r4, #12]
 8006dfa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006dfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e02:	d003      	beq.n	8006e0c <__swsetup_r+0x7c>
 8006e04:	4621      	mov	r1, r4
 8006e06:	4628      	mov	r0, r5
 8006e08:	f000 f850 	bl	8006eac <__smakebuf_r>
 8006e0c:	89a0      	ldrh	r0, [r4, #12]
 8006e0e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e12:	f010 0301 	ands.w	r3, r0, #1
 8006e16:	d00a      	beq.n	8006e2e <__swsetup_r+0x9e>
 8006e18:	2300      	movs	r3, #0
 8006e1a:	60a3      	str	r3, [r4, #8]
 8006e1c:	6963      	ldr	r3, [r4, #20]
 8006e1e:	425b      	negs	r3, r3
 8006e20:	61a3      	str	r3, [r4, #24]
 8006e22:	6923      	ldr	r3, [r4, #16]
 8006e24:	b943      	cbnz	r3, 8006e38 <__swsetup_r+0xa8>
 8006e26:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006e2a:	d1c4      	bne.n	8006db6 <__swsetup_r+0x26>
 8006e2c:	bd38      	pop	{r3, r4, r5, pc}
 8006e2e:	0781      	lsls	r1, r0, #30
 8006e30:	bf58      	it	pl
 8006e32:	6963      	ldrpl	r3, [r4, #20]
 8006e34:	60a3      	str	r3, [r4, #8]
 8006e36:	e7f4      	b.n	8006e22 <__swsetup_r+0x92>
 8006e38:	2000      	movs	r0, #0
 8006e3a:	e7f7      	b.n	8006e2c <__swsetup_r+0x9c>
 8006e3c:	20000098 	.word	0x20000098

08006e40 <_sbrk_r>:
 8006e40:	b538      	push	{r3, r4, r5, lr}
 8006e42:	4d06      	ldr	r5, [pc, #24]	; (8006e5c <_sbrk_r+0x1c>)
 8006e44:	2300      	movs	r3, #0
 8006e46:	4604      	mov	r4, r0
 8006e48:	4608      	mov	r0, r1
 8006e4a:	602b      	str	r3, [r5, #0]
 8006e4c:	f7fa fa60 	bl	8001310 <_sbrk>
 8006e50:	1c43      	adds	r3, r0, #1
 8006e52:	d102      	bne.n	8006e5a <_sbrk_r+0x1a>
 8006e54:	682b      	ldr	r3, [r5, #0]
 8006e56:	b103      	cbz	r3, 8006e5a <_sbrk_r+0x1a>
 8006e58:	6023      	str	r3, [r4, #0]
 8006e5a:	bd38      	pop	{r3, r4, r5, pc}
 8006e5c:	200005cc 	.word	0x200005cc

08006e60 <__swhatbuf_r>:
 8006e60:	b570      	push	{r4, r5, r6, lr}
 8006e62:	460c      	mov	r4, r1
 8006e64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e68:	2900      	cmp	r1, #0
 8006e6a:	b096      	sub	sp, #88	; 0x58
 8006e6c:	4615      	mov	r5, r2
 8006e6e:	461e      	mov	r6, r3
 8006e70:	da0d      	bge.n	8006e8e <__swhatbuf_r+0x2e>
 8006e72:	89a3      	ldrh	r3, [r4, #12]
 8006e74:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006e78:	f04f 0100 	mov.w	r1, #0
 8006e7c:	bf0c      	ite	eq
 8006e7e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006e82:	2340      	movne	r3, #64	; 0x40
 8006e84:	2000      	movs	r0, #0
 8006e86:	6031      	str	r1, [r6, #0]
 8006e88:	602b      	str	r3, [r5, #0]
 8006e8a:	b016      	add	sp, #88	; 0x58
 8006e8c:	bd70      	pop	{r4, r5, r6, pc}
 8006e8e:	466a      	mov	r2, sp
 8006e90:	f000 f848 	bl	8006f24 <_fstat_r>
 8006e94:	2800      	cmp	r0, #0
 8006e96:	dbec      	blt.n	8006e72 <__swhatbuf_r+0x12>
 8006e98:	9901      	ldr	r1, [sp, #4]
 8006e9a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006e9e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006ea2:	4259      	negs	r1, r3
 8006ea4:	4159      	adcs	r1, r3
 8006ea6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006eaa:	e7eb      	b.n	8006e84 <__swhatbuf_r+0x24>

08006eac <__smakebuf_r>:
 8006eac:	898b      	ldrh	r3, [r1, #12]
 8006eae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006eb0:	079d      	lsls	r5, r3, #30
 8006eb2:	4606      	mov	r6, r0
 8006eb4:	460c      	mov	r4, r1
 8006eb6:	d507      	bpl.n	8006ec8 <__smakebuf_r+0x1c>
 8006eb8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006ebc:	6023      	str	r3, [r4, #0]
 8006ebe:	6123      	str	r3, [r4, #16]
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	6163      	str	r3, [r4, #20]
 8006ec4:	b002      	add	sp, #8
 8006ec6:	bd70      	pop	{r4, r5, r6, pc}
 8006ec8:	ab01      	add	r3, sp, #4
 8006eca:	466a      	mov	r2, sp
 8006ecc:	f7ff ffc8 	bl	8006e60 <__swhatbuf_r>
 8006ed0:	9900      	ldr	r1, [sp, #0]
 8006ed2:	4605      	mov	r5, r0
 8006ed4:	4630      	mov	r0, r6
 8006ed6:	f7ff fb0f 	bl	80064f8 <_malloc_r>
 8006eda:	b948      	cbnz	r0, 8006ef0 <__smakebuf_r+0x44>
 8006edc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ee0:	059a      	lsls	r2, r3, #22
 8006ee2:	d4ef      	bmi.n	8006ec4 <__smakebuf_r+0x18>
 8006ee4:	f023 0303 	bic.w	r3, r3, #3
 8006ee8:	f043 0302 	orr.w	r3, r3, #2
 8006eec:	81a3      	strh	r3, [r4, #12]
 8006eee:	e7e3      	b.n	8006eb8 <__smakebuf_r+0xc>
 8006ef0:	89a3      	ldrh	r3, [r4, #12]
 8006ef2:	6020      	str	r0, [r4, #0]
 8006ef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ef8:	81a3      	strh	r3, [r4, #12]
 8006efa:	9b00      	ldr	r3, [sp, #0]
 8006efc:	6163      	str	r3, [r4, #20]
 8006efe:	9b01      	ldr	r3, [sp, #4]
 8006f00:	6120      	str	r0, [r4, #16]
 8006f02:	b15b      	cbz	r3, 8006f1c <__smakebuf_r+0x70>
 8006f04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f08:	4630      	mov	r0, r6
 8006f0a:	f000 f81d 	bl	8006f48 <_isatty_r>
 8006f0e:	b128      	cbz	r0, 8006f1c <__smakebuf_r+0x70>
 8006f10:	89a3      	ldrh	r3, [r4, #12]
 8006f12:	f023 0303 	bic.w	r3, r3, #3
 8006f16:	f043 0301 	orr.w	r3, r3, #1
 8006f1a:	81a3      	strh	r3, [r4, #12]
 8006f1c:	89a3      	ldrh	r3, [r4, #12]
 8006f1e:	431d      	orrs	r5, r3
 8006f20:	81a5      	strh	r5, [r4, #12]
 8006f22:	e7cf      	b.n	8006ec4 <__smakebuf_r+0x18>

08006f24 <_fstat_r>:
 8006f24:	b538      	push	{r3, r4, r5, lr}
 8006f26:	4d07      	ldr	r5, [pc, #28]	; (8006f44 <_fstat_r+0x20>)
 8006f28:	2300      	movs	r3, #0
 8006f2a:	4604      	mov	r4, r0
 8006f2c:	4608      	mov	r0, r1
 8006f2e:	4611      	mov	r1, r2
 8006f30:	602b      	str	r3, [r5, #0]
 8006f32:	f7fa f9c4 	bl	80012be <_fstat>
 8006f36:	1c43      	adds	r3, r0, #1
 8006f38:	d102      	bne.n	8006f40 <_fstat_r+0x1c>
 8006f3a:	682b      	ldr	r3, [r5, #0]
 8006f3c:	b103      	cbz	r3, 8006f40 <_fstat_r+0x1c>
 8006f3e:	6023      	str	r3, [r4, #0]
 8006f40:	bd38      	pop	{r3, r4, r5, pc}
 8006f42:	bf00      	nop
 8006f44:	200005cc 	.word	0x200005cc

08006f48 <_isatty_r>:
 8006f48:	b538      	push	{r3, r4, r5, lr}
 8006f4a:	4d06      	ldr	r5, [pc, #24]	; (8006f64 <_isatty_r+0x1c>)
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	4604      	mov	r4, r0
 8006f50:	4608      	mov	r0, r1
 8006f52:	602b      	str	r3, [r5, #0]
 8006f54:	f7fa f9c3 	bl	80012de <_isatty>
 8006f58:	1c43      	adds	r3, r0, #1
 8006f5a:	d102      	bne.n	8006f62 <_isatty_r+0x1a>
 8006f5c:	682b      	ldr	r3, [r5, #0]
 8006f5e:	b103      	cbz	r3, 8006f62 <_isatty_r+0x1a>
 8006f60:	6023      	str	r3, [r4, #0]
 8006f62:	bd38      	pop	{r3, r4, r5, pc}
 8006f64:	200005cc 	.word	0x200005cc

08006f68 <_init>:
 8006f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f6a:	bf00      	nop
 8006f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f6e:	bc08      	pop	{r3}
 8006f70:	469e      	mov	lr, r3
 8006f72:	4770      	bx	lr

08006f74 <_fini>:
 8006f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f76:	bf00      	nop
 8006f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f7a:	bc08      	pop	{r3}
 8006f7c:	469e      	mov	lr, r3
 8006f7e:	4770      	bx	lr
