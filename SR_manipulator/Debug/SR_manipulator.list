
SR_manipulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b6c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08005cf4  08005cf4  00015cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d90  08005d90  00020040  2**0
                  CONTENTS
  4 .ARM          00000008  08005d90  08005d90  00015d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d98  08005d98  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d98  08005d98  00015d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d9c  08005d9c  00015d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08005da0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  20000040  08005de0  00020040  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000298  08005de0  00020298  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014d1a  00000000  00000000  000200b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003124  00000000  00000000  00034dcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001378  00000000  00000000  00037ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f18  00000000  00000000  00039270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028d71  00000000  00000000  0003a188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018ba4  00000000  00000000  00062ef9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f9c1f  00000000  00000000  0007ba9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005028  00000000  00000000  001756bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0017a6e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000040 	.word	0x20000040
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005cdc 	.word	0x08005cdc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000044 	.word	0x20000044
 80001c4:	08005cdc 	.word	0x08005cdc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b08a      	sub	sp, #40	; 0x28
 80004c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ca:	f107 0314 	add.w	r3, r7, #20
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	605a      	str	r2, [r3, #4]
 80004d4:	609a      	str	r2, [r3, #8]
 80004d6:	60da      	str	r2, [r3, #12]
 80004d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004da:	4b8e      	ldr	r3, [pc, #568]	; (8000714 <MX_GPIO_Init+0x250>)
 80004dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004de:	4a8d      	ldr	r2, [pc, #564]	; (8000714 <MX_GPIO_Init+0x250>)
 80004e0:	f043 0310 	orr.w	r3, r3, #16
 80004e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004e6:	4b8b      	ldr	r3, [pc, #556]	; (8000714 <MX_GPIO_Init+0x250>)
 80004e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ea:	f003 0310 	and.w	r3, r3, #16
 80004ee:	613b      	str	r3, [r7, #16]
 80004f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004f2:	4b88      	ldr	r3, [pc, #544]	; (8000714 <MX_GPIO_Init+0x250>)
 80004f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f6:	4a87      	ldr	r2, [pc, #540]	; (8000714 <MX_GPIO_Init+0x250>)
 80004f8:	f043 0304 	orr.w	r3, r3, #4
 80004fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004fe:	4b85      	ldr	r3, [pc, #532]	; (8000714 <MX_GPIO_Init+0x250>)
 8000500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000502:	f003 0304 	and.w	r3, r3, #4
 8000506:	60fb      	str	r3, [r7, #12]
 8000508:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800050a:	4b82      	ldr	r3, [pc, #520]	; (8000714 <MX_GPIO_Init+0x250>)
 800050c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050e:	4a81      	ldr	r2, [pc, #516]	; (8000714 <MX_GPIO_Init+0x250>)
 8000510:	f043 0301 	orr.w	r3, r3, #1
 8000514:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000516:	4b7f      	ldr	r3, [pc, #508]	; (8000714 <MX_GPIO_Init+0x250>)
 8000518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800051a:	f003 0301 	and.w	r3, r3, #1
 800051e:	60bb      	str	r3, [r7, #8]
 8000520:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000522:	4b7c      	ldr	r3, [pc, #496]	; (8000714 <MX_GPIO_Init+0x250>)
 8000524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000526:	4a7b      	ldr	r2, [pc, #492]	; (8000714 <MX_GPIO_Init+0x250>)
 8000528:	f043 0302 	orr.w	r3, r3, #2
 800052c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800052e:	4b79      	ldr	r3, [pc, #484]	; (8000714 <MX_GPIO_Init+0x250>)
 8000530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000532:	f003 0302 	and.w	r3, r3, #2
 8000536:	607b      	str	r3, [r7, #4]
 8000538:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800053a:	4b76      	ldr	r3, [pc, #472]	; (8000714 <MX_GPIO_Init+0x250>)
 800053c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053e:	4a75      	ldr	r2, [pc, #468]	; (8000714 <MX_GPIO_Init+0x250>)
 8000540:	f043 0308 	orr.w	r3, r3, #8
 8000544:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000546:	4b73      	ldr	r3, [pc, #460]	; (8000714 <MX_GPIO_Init+0x250>)
 8000548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800054a:	f003 0308 	and.w	r3, r3, #8
 800054e:	603b      	str	r3, [r7, #0]
 8000550:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AUDIO_RST_Pin|LED_zielony_Pin|XL_CS_Pin, GPIO_PIN_RESET);
 8000552:	2200      	movs	r2, #0
 8000554:	f240 1109 	movw	r1, #265	; 0x109
 8000558:	486f      	ldr	r0, [pc, #444]	; (8000718 <MX_GPIO_Init+0x254>)
 800055a:	f002 fae1 	bl	8002b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_czerwony_Pin|M3V3_REG_ON_Pin, GPIO_PIN_RESET);
 800055e:	2200      	movs	r2, #0
 8000560:	210c      	movs	r1, #12
 8000562:	486e      	ldr	r0, [pc, #440]	; (800071c <MX_GPIO_Init+0x258>)
 8000564:	f002 fadc 	bl	8002b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000568:	2201      	movs	r2, #1
 800056a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800056e:	486c      	ldr	r0, [pc, #432]	; (8000720 <MX_GPIO_Init+0x25c>)
 8000570:	f002 fad6 	bl	8002b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_VBUS_GPIO_Port, OTG_FS_VBUS_Pin, GPIO_PIN_RESET);
 8000574:	2200      	movs	r2, #0
 8000576:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800057a:	4869      	ldr	r0, [pc, #420]	; (8000720 <MX_GPIO_Init+0x25c>)
 800057c:	f002 fad0 	bl	8002b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 8000580:	2200      	movs	r2, #0
 8000582:	2180      	movs	r1, #128	; 0x80
 8000584:	4867      	ldr	r0, [pc, #412]	; (8000724 <MX_GPIO_Init+0x260>)
 8000586:	f002 facb 	bl	8002b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AUDIO_RST_Pin;
 800058a:	2308      	movs	r3, #8
 800058c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800058e:	2301      	movs	r3, #1
 8000590:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000592:	2300      	movs	r3, #0
 8000594:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000596:	2302      	movs	r3, #2
 8000598:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(AUDIO_RST_GPIO_Port, &GPIO_InitStruct);
 800059a:	f107 0314 	add.w	r3, r7, #20
 800059e:	4619      	mov	r1, r3
 80005a0:	485d      	ldr	r0, [pc, #372]	; (8000718 <MX_GPIO_Init+0x254>)
 80005a2:	f002 f8fb 	bl	800279c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|MAG_INT_Pin|MAG_DRDY_Pin;
 80005a6:	2307      	movs	r3, #7
 80005a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005aa:	2300      	movs	r3, #0
 80005ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ae:	2300      	movs	r3, #0
 80005b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005b2:	f107 0314 	add.w	r3, r7, #20
 80005b6:	4619      	mov	r1, r3
 80005b8:	4859      	ldr	r0, [pc, #356]	; (8000720 <MX_GPIO_Init+0x25c>)
 80005ba:	f002 f8ef 	bl	800279c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = PRZYCISK_srodek_Pin|PRZYCISK_lewy_Pin|PRZYCISK_prawy_Pin|PRZYCISK_gora_Pin
 80005be:	232f      	movs	r3, #47	; 0x2f
 80005c0:	617b      	str	r3, [r7, #20]
                          |PRZYCISK_dol_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005c2:	2300      	movs	r3, #0
 80005c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005c6:	2302      	movs	r3, #2
 80005c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ca:	f107 0314 	add.w	r3, r7, #20
 80005ce:	4619      	mov	r1, r3
 80005d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005d4:	f002 f8e2 	bl	800279c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 80005d8:	2310      	movs	r3, #16
 80005da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80005dc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80005e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e2:	2300      	movs	r3, #0
 80005e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 80005e6:	f107 0314 	add.w	r3, r7, #20
 80005ea:	4619      	mov	r1, r3
 80005ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f0:	f002 f8d4 	bl	800279c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_czerwony_Pin;
 80005f4:	2304      	movs	r3, #4
 80005f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f8:	2301      	movs	r3, #1
 80005fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005fc:	2301      	movs	r3, #1
 80005fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000600:	2303      	movs	r3, #3
 8000602:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_czerwony_GPIO_Port, &GPIO_InitStruct);
 8000604:	f107 0314 	add.w	r3, r7, #20
 8000608:	4619      	mov	r1, r3
 800060a:	4844      	ldr	r0, [pc, #272]	; (800071c <MX_GPIO_Init+0x258>)
 800060c:	f002 f8c6 	bl	800279c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_zielony_Pin;
 8000610:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000614:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000616:	2301      	movs	r3, #1
 8000618:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800061a:	2301      	movs	r3, #1
 800061c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800061e:	2303      	movs	r3, #3
 8000620:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_zielony_GPIO_Port, &GPIO_InitStruct);
 8000622:	f107 0314 	add.w	r3, r7, #20
 8000626:	4619      	mov	r1, r3
 8000628:	483b      	ldr	r0, [pc, #236]	; (8000718 <MX_GPIO_Init+0x254>)
 800062a:	f002 f8b7 	bl	800279c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|OTG_FS_VBUS_Pin;
 800062e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8000632:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000634:	2301      	movs	r3, #1
 8000636:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000638:	2300      	movs	r3, #0
 800063a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063c:	2300      	movs	r3, #0
 800063e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000640:	f107 0314 	add.w	r3, r7, #20
 8000644:	4619      	mov	r1, r3
 8000646:	4836      	ldr	r0, [pc, #216]	; (8000720 <MX_GPIO_Init+0x25c>)
 8000648:	f002 f8a8 	bl	800279c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800064c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000650:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000652:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000656:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	2300      	movs	r3, #0
 800065a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800065c:	f107 0314 	add.w	r3, r7, #20
 8000660:	4619      	mov	r1, r3
 8000662:	482f      	ldr	r0, [pc, #188]	; (8000720 <MX_GPIO_Init+0x25c>)
 8000664:	f002 f89a 	bl	800279c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = EXT_RST_Pin|GYRO_INT1_Pin;
 8000668:	2305      	movs	r3, #5
 800066a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800066c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000670:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000676:	f107 0314 	add.w	r3, r7, #20
 800067a:	4619      	mov	r1, r3
 800067c:	4829      	ldr	r0, [pc, #164]	; (8000724 <MX_GPIO_Init+0x260>)
 800067e:	f002 f88d 	bl	800279c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin;
 8000682:	2380      	movs	r3, #128	; 0x80
 8000684:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000686:	2301      	movs	r3, #1
 8000688:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068a:	2300      	movs	r3, #0
 800068c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800068e:	2303      	movs	r3, #3
 8000690:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GYRO_CS_GPIO_Port, &GPIO_InitStruct);
 8000692:	f107 0314 	add.w	r3, r7, #20
 8000696:	4619      	mov	r1, r3
 8000698:	4822      	ldr	r0, [pc, #136]	; (8000724 <MX_GPIO_Init+0x260>)
 800069a:	f002 f87f 	bl	800279c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M3V3_REG_ON_Pin;
 800069e:	2308      	movs	r3, #8
 80006a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a2:	2301      	movs	r3, #1
 80006a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006aa:	2300      	movs	r3, #0
 80006ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(M3V3_REG_ON_GPIO_Port, &GPIO_InitStruct);
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	4619      	mov	r1, r3
 80006b4:	4819      	ldr	r0, [pc, #100]	; (800071c <MX_GPIO_Init+0x258>)
 80006b6:	f002 f871 	bl	800279c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_INT2_Pin;
 80006ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006c0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80006c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GYRO_INT2_GPIO_Port, &GPIO_InitStruct);
 80006ca:	f107 0314 	add.w	r3, r7, #20
 80006ce:	4619      	mov	r1, r3
 80006d0:	4812      	ldr	r0, [pc, #72]	; (800071c <MX_GPIO_Init+0x258>)
 80006d2:	f002 f863 	bl	800279c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XL_CS_Pin;
 80006d6:	2301      	movs	r3, #1
 80006d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006da:	2301      	movs	r3, #1
 80006dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	2300      	movs	r3, #0
 80006e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e2:	2300      	movs	r3, #0
 80006e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(XL_CS_GPIO_Port, &GPIO_InitStruct);
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	4619      	mov	r1, r3
 80006ec:	480a      	ldr	r0, [pc, #40]	; (8000718 <MX_GPIO_Init+0x254>)
 80006ee:	f002 f855 	bl	800279c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XL_INT_Pin;
 80006f2:	2302      	movs	r3, #2
 80006f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006f6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80006fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(XL_INT_GPIO_Port, &GPIO_InitStruct);
 8000700:	f107 0314 	add.w	r3, r7, #20
 8000704:	4619      	mov	r1, r3
 8000706:	4804      	ldr	r0, [pc, #16]	; (8000718 <MX_GPIO_Init+0x254>)
 8000708:	f002 f848 	bl	800279c <HAL_GPIO_Init>

}
 800070c:	bf00      	nop
 800070e:	3728      	adds	r7, #40	; 0x28
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40021000 	.word	0x40021000
 8000718:	48001000 	.word	0x48001000
 800071c:	48000400 	.word	0x48000400
 8000720:	48000800 	.word	0x48000800
 8000724:	48000c00 	.word	0x48000c00

08000728 <MX_LCD_Init>:

LCD_HandleTypeDef hlcd;

/* LCD init function */
void MX_LCD_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END LCD_Init 0 */

  /* USER CODE BEGIN LCD_Init 1 */

  /* USER CODE END LCD_Init 1 */
  hlcd.Instance = LCD;
 800072c:	4b18      	ldr	r3, [pc, #96]	; (8000790 <MX_LCD_Init+0x68>)
 800072e:	4a19      	ldr	r2, [pc, #100]	; (8000794 <MX_LCD_Init+0x6c>)
 8000730:	601a      	str	r2, [r3, #0]
  hlcd.Init.Prescaler = LCD_PRESCALER_1;
 8000732:	4b17      	ldr	r3, [pc, #92]	; (8000790 <MX_LCD_Init+0x68>)
 8000734:	2200      	movs	r2, #0
 8000736:	605a      	str	r2, [r3, #4]
  hlcd.Init.Divider = LCD_DIVIDER_16;
 8000738:	4b15      	ldr	r3, [pc, #84]	; (8000790 <MX_LCD_Init+0x68>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  hlcd.Init.Duty = LCD_DUTY_1_4;
 800073e:	4b14      	ldr	r3, [pc, #80]	; (8000790 <MX_LCD_Init+0x68>)
 8000740:	220c      	movs	r2, #12
 8000742:	60da      	str	r2, [r3, #12]
  hlcd.Init.Bias = LCD_BIAS_1_4;
 8000744:	4b12      	ldr	r3, [pc, #72]	; (8000790 <MX_LCD_Init+0x68>)
 8000746:	2200      	movs	r2, #0
 8000748:	611a      	str	r2, [r3, #16]
  hlcd.Init.VoltageSource = LCD_VOLTAGESOURCE_INTERNAL;
 800074a:	4b11      	ldr	r3, [pc, #68]	; (8000790 <MX_LCD_Init+0x68>)
 800074c:	2200      	movs	r2, #0
 800074e:	615a      	str	r2, [r3, #20]
  hlcd.Init.Contrast = LCD_CONTRASTLEVEL_0;
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <MX_LCD_Init+0x68>)
 8000752:	2200      	movs	r2, #0
 8000754:	619a      	str	r2, [r3, #24]
  hlcd.Init.DeadTime = LCD_DEADTIME_0;
 8000756:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <MX_LCD_Init+0x68>)
 8000758:	2200      	movs	r2, #0
 800075a:	61da      	str	r2, [r3, #28]
  hlcd.Init.PulseOnDuration = LCD_PULSEONDURATION_0;
 800075c:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <MX_LCD_Init+0x68>)
 800075e:	2200      	movs	r2, #0
 8000760:	621a      	str	r2, [r3, #32]
  hlcd.Init.MuxSegment = LCD_MUXSEGMENT_DISABLE;
 8000762:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <MX_LCD_Init+0x68>)
 8000764:	2200      	movs	r2, #0
 8000766:	631a      	str	r2, [r3, #48]	; 0x30
  hlcd.Init.BlinkMode = LCD_BLINKMODE_OFF;
 8000768:	4b09      	ldr	r3, [pc, #36]	; (8000790 <MX_LCD_Init+0x68>)
 800076a:	2200      	movs	r2, #0
 800076c:	629a      	str	r2, [r3, #40]	; 0x28
  hlcd.Init.BlinkFrequency = LCD_BLINKFREQUENCY_DIV8;
 800076e:	4b08      	ldr	r3, [pc, #32]	; (8000790 <MX_LCD_Init+0x68>)
 8000770:	2200      	movs	r2, #0
 8000772:	62da      	str	r2, [r3, #44]	; 0x2c
  hlcd.Init.HighDrive = LCD_HIGHDRIVE_DISABLE;
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <MX_LCD_Init+0x68>)
 8000776:	2200      	movs	r2, #0
 8000778:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_LCD_Init(&hlcd) != HAL_OK)
 800077a:	4805      	ldr	r0, [pc, #20]	; (8000790 <MX_LCD_Init+0x68>)
 800077c:	f002 f9e8 	bl	8002b50 <HAL_LCD_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_LCD_Init+0x62>
  {
    Error_Handler();
 8000786:	f000 f99f 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN LCD_Init 2 */

  /* USER CODE END LCD_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	2000005c 	.word	0x2000005c
 8000794:	40002400 	.word	0x40002400

08000798 <HAL_LCD_MspInit>:

void HAL_LCD_MspInit(LCD_HandleTypeDef* lcdHandle)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b0ae      	sub	sp, #184	; 0xb8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007b0:	f107 031c 	add.w	r3, r7, #28
 80007b4:	2288      	movs	r2, #136	; 0x88
 80007b6:	2100      	movs	r1, #0
 80007b8:	4618      	mov	r0, r3
 80007ba:	f005 fa62 	bl	8005c82 <memset>
  if(lcdHandle->Instance==LCD)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a57      	ldr	r2, [pc, #348]	; (8000920 <HAL_LCD_MspInit+0x188>)
 80007c4:	4293      	cmp	r3, r2
 80007c6:	f040 80a6 	bne.w	8000916 <HAL_LCD_MspInit+0x17e>

  /* USER CODE END LCD_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80007ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80007ce:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80007d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007d8:	f107 031c 	add.w	r3, r7, #28
 80007dc:	4618      	mov	r0, r3
 80007de:	f003 f9e7 	bl	8003bb0 <HAL_RCCEx_PeriphCLKConfig>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <HAL_LCD_MspInit+0x54>
    {
      Error_Handler();
 80007e8:	f000 f96e 	bl	8000ac8 <Error_Handler>
    }

    /* LCD clock enable */
    __HAL_RCC_LCD_CLK_ENABLE();
 80007ec:	4b4d      	ldr	r3, [pc, #308]	; (8000924 <HAL_LCD_MspInit+0x18c>)
 80007ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007f0:	4a4c      	ldr	r2, [pc, #304]	; (8000924 <HAL_LCD_MspInit+0x18c>)
 80007f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007f6:	6593      	str	r3, [r2, #88]	; 0x58
 80007f8:	4b4a      	ldr	r3, [pc, #296]	; (8000924 <HAL_LCD_MspInit+0x18c>)
 80007fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000800:	61bb      	str	r3, [r7, #24]
 8000802:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000804:	4b47      	ldr	r3, [pc, #284]	; (8000924 <HAL_LCD_MspInit+0x18c>)
 8000806:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000808:	4a46      	ldr	r2, [pc, #280]	; (8000924 <HAL_LCD_MspInit+0x18c>)
 800080a:	f043 0304 	orr.w	r3, r3, #4
 800080e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000810:	4b44      	ldr	r3, [pc, #272]	; (8000924 <HAL_LCD_MspInit+0x18c>)
 8000812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000814:	f003 0304 	and.w	r3, r3, #4
 8000818:	617b      	str	r3, [r7, #20]
 800081a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800081c:	4b41      	ldr	r3, [pc, #260]	; (8000924 <HAL_LCD_MspInit+0x18c>)
 800081e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000820:	4a40      	ldr	r2, [pc, #256]	; (8000924 <HAL_LCD_MspInit+0x18c>)
 8000822:	f043 0301 	orr.w	r3, r3, #1
 8000826:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000828:	4b3e      	ldr	r3, [pc, #248]	; (8000924 <HAL_LCD_MspInit+0x18c>)
 800082a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082c:	f003 0301 	and.w	r3, r3, #1
 8000830:	613b      	str	r3, [r7, #16]
 8000832:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000834:	4b3b      	ldr	r3, [pc, #236]	; (8000924 <HAL_LCD_MspInit+0x18c>)
 8000836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000838:	4a3a      	ldr	r2, [pc, #232]	; (8000924 <HAL_LCD_MspInit+0x18c>)
 800083a:	f043 0302 	orr.w	r3, r3, #2
 800083e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000840:	4b38      	ldr	r3, [pc, #224]	; (8000924 <HAL_LCD_MspInit+0x18c>)
 8000842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000844:	f003 0302 	and.w	r3, r3, #2
 8000848:	60fb      	str	r3, [r7, #12]
 800084a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800084c:	4b35      	ldr	r3, [pc, #212]	; (8000924 <HAL_LCD_MspInit+0x18c>)
 800084e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000850:	4a34      	ldr	r2, [pc, #208]	; (8000924 <HAL_LCD_MspInit+0x18c>)
 8000852:	f043 0308 	orr.w	r3, r3, #8
 8000856:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000858:	4b32      	ldr	r3, [pc, #200]	; (8000924 <HAL_LCD_MspInit+0x18c>)
 800085a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085c:	f003 0308 	and.w	r3, r3, #8
 8000860:	60bb      	str	r3, [r7, #8]
 8000862:	68bb      	ldr	r3, [r7, #8]
    PA15 (JTDI)     ------> LCD_SEG17
    PB4 (NJTRST)     ------> LCD_SEG8
    PB5     ------> LCD_SEG9
    PB9     ------> LCD_COM3
    */
    GPIO_InitStruct.Pin = VLCD_Pin|SEG22_Pin|SEG1_Pin|SEG14_Pin
 8000864:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8000868:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |SEG9_Pin|SEG13_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086c:	2302      	movs	r3, #2
 800086e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000878:	2300      	movs	r3, #0
 800087a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 800087e:	230b      	movs	r3, #11
 8000880:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000884:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000888:	4619      	mov	r1, r3
 800088a:	4827      	ldr	r0, [pc, #156]	; (8000928 <HAL_LCD_MspInit+0x190>)
 800088c:	f001 ff86 	bl	800279c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG23_Pin|SEG0_Pin|COM0_Pin|COM1_Pin
 8000890:	f248 73c0 	movw	r3, #34752	; 0x87c0
 8000894:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |COM2_Pin|SEG10_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000898:	2302      	movs	r3, #2
 800089a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a4:	2300      	movs	r3, #0
 80008a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 80008aa:	230b      	movs	r3, #11
 80008ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80008b4:	4619      	mov	r1, r3
 80008b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ba:	f001 ff6f 	bl	800279c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG21_Pin|SEG2_Pin|SEG20_Pin|SEG3_Pin
 80008be:	f24f 2333 	movw	r3, #62003	; 0xf233
 80008c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |SEG19_Pin|SEG4_Pin|SEG11_Pin|SEG12_Pin
                          |COM3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c6:	2302      	movs	r3, #2
 80008c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 80008d8:	230b      	movs	r3, #11
 80008da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008de:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80008e2:	4619      	mov	r1, r3
 80008e4:	4811      	ldr	r0, [pc, #68]	; (800092c <HAL_LCD_MspInit+0x194>)
 80008e6:	f001 ff59 	bl	800279c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG18_Pin|SEG5_Pin|SEG17_Pin|SEG6_Pin
 80008ea:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80008ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |SEG16_Pin|SEG7_Pin|SEG15_Pin|SEG8_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f2:	2302      	movs	r3, #2
 80008f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fe:	2300      	movs	r3, #0
 8000900:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000904:	230b      	movs	r3, #11
 8000906:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800090a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800090e:	4619      	mov	r1, r3
 8000910:	4807      	ldr	r0, [pc, #28]	; (8000930 <HAL_LCD_MspInit+0x198>)
 8000912:	f001 ff43 	bl	800279c <HAL_GPIO_Init>

  /* USER CODE BEGIN LCD_MspInit 1 */

  /* USER CODE END LCD_MspInit 1 */
  }
}
 8000916:	bf00      	nop
 8000918:	37b8      	adds	r7, #184	; 0xb8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40002400 	.word	0x40002400
 8000924:	40021000 	.word	0x40021000
 8000928:	48000800 	.word	0x48000800
 800092c:	48000400 	.word	0x48000400
 8000930:	48000c00 	.word	0x48000c00

08000934 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000938:	f001 fdaa 	bl	8002490 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800093c:	f000 f870 	bl	8000a20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000940:	f7ff fdc0 	bl	80004c4 <MX_GPIO_Init>
  MX_LCD_Init();
 8000944:	f7ff fef0 	bl	8000728 <MX_LCD_Init>
  MX_SPI2_Init();
 8000948:	f000 f8c4 	bl	8000ad4 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 800094c:	f000 fab0 	bl	8000eb0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000950:	f000 f9a2 	bl	8000c98 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  BSP_GYRO_Init();
 8000954:	f001 fd1e 	bl	8002394 <BSP_GYRO_Init>
  BSP_LCD_GLASS_Init();
 8000958:	f000 ff30 	bl	80017bc <BSP_LCD_GLASS_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    BSP_LCD_GLASS_Clear();
 800095c:	f000 ff84 	bl	8001868 <BSP_LCD_GLASS_Clear>

    // accelerometer
    BSP_GYRO_GetXYZ(Data);
 8000960:	4828      	ldr	r0, [pc, #160]	; (8000a04 <main+0xd0>)
 8000962:	f001 fd81 	bl	8002468 <BSP_GYRO_GetXYZ>
    // LCD
    // przycisk
    if(GORA) {
 8000966:	2108      	movs	r1, #8
 8000968:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800096c:	f002 f8c0 	bl	8002af0 <HAL_GPIO_ReadPin>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d005      	beq.n	8000982 <main+0x4e>
    	klick++;
 8000976:	4b24      	ldr	r3, [pc, #144]	; (8000a08 <main+0xd4>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	3301      	adds	r3, #1
 800097c:	b2da      	uxtb	r2, r3
 800097e:	4b22      	ldr	r3, [pc, #136]	; (8000a08 <main+0xd4>)
 8000980:	701a      	strb	r2, [r3, #0]
    }


    if(DOL) {
 8000982:	2120      	movs	r1, #32
 8000984:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000988:	f002 f8b2 	bl	8002af0 <HAL_GPIO_ReadPin>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d005      	beq.n	800099e <main+0x6a>
    	klick--;
 8000992:	4b1d      	ldr	r3, [pc, #116]	; (8000a08 <main+0xd4>)
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	3b01      	subs	r3, #1
 8000998:	b2da      	uxtb	r2, r3
 800099a:	4b1b      	ldr	r3, [pc, #108]	; (8000a08 <main+0xd4>)
 800099c:	701a      	strb	r2, [r3, #0]
    }


    klick_modulo=klick%3;
 800099e:	4b1a      	ldr	r3, [pc, #104]	; (8000a08 <main+0xd4>)
 80009a0:	781a      	ldrb	r2, [r3, #0]
 80009a2:	4b1a      	ldr	r3, [pc, #104]	; (8000a0c <main+0xd8>)
 80009a4:	fba3 1302 	umull	r1, r3, r3, r2
 80009a8:	0859      	lsrs	r1, r3, #1
 80009aa:	460b      	mov	r3, r1
 80009ac:	005b      	lsls	r3, r3, #1
 80009ae:	440b      	add	r3, r1
 80009b0:	1ad3      	subs	r3, r2, r3
 80009b2:	b2da      	uxtb	r2, r3
 80009b4:	4b16      	ldr	r3, [pc, #88]	; (8000a10 <main+0xdc>)
 80009b6:	701a      	strb	r2, [r3, #0]

    switch(klick_modulo){
 80009b8:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <main+0xdc>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	2b02      	cmp	r3, #2
 80009be:	d014      	beq.n	80009ea <main+0xb6>
 80009c0:	2b02      	cmp	r3, #2
 80009c2:	dc19      	bgt.n	80009f8 <main+0xc4>
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d002      	beq.n	80009ce <main+0x9a>
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d007      	beq.n	80009dc <main+0xa8>
 80009cc:	e014      	b.n	80009f8 <main+0xc4>
    case 0:
    	BSP_LCD_GLASS_DisplayChar((uint8_t*)"X", POINT_OFF, DOUBLEPOINT_ON, 0);
 80009ce:	2300      	movs	r3, #0
 80009d0:	2201      	movs	r2, #1
 80009d2:	2100      	movs	r1, #0
 80009d4:	480f      	ldr	r0, [pc, #60]	; (8000a14 <main+0xe0>)
 80009d6:	f000 ff2b 	bl	8001830 <BSP_LCD_GLASS_DisplayChar>
    	break;
 80009da:	e00d      	b.n	80009f8 <main+0xc4>
    case 1:
    	BSP_LCD_GLASS_DisplayChar((uint8_t*)"Y", POINT_OFF, DOUBLEPOINT_ON, 0);
 80009dc:	2300      	movs	r3, #0
 80009de:	2201      	movs	r2, #1
 80009e0:	2100      	movs	r1, #0
 80009e2:	480d      	ldr	r0, [pc, #52]	; (8000a18 <main+0xe4>)
 80009e4:	f000 ff24 	bl	8001830 <BSP_LCD_GLASS_DisplayChar>
        break;
 80009e8:	e006      	b.n	80009f8 <main+0xc4>
    case 2:
    	BSP_LCD_GLASS_DisplayChar((uint8_t*)"Z", POINT_OFF, DOUBLEPOINT_ON, 0);
 80009ea:	2300      	movs	r3, #0
 80009ec:	2201      	movs	r2, #1
 80009ee:	2100      	movs	r1, #0
 80009f0:	480a      	ldr	r0, [pc, #40]	; (8000a1c <main+0xe8>)
 80009f2:	f000 ff1d 	bl	8001830 <BSP_LCD_GLASS_DisplayChar>
        break;
 80009f6:	bf00      	nop
    }



    //
    HAL_Delay(500);
 80009f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009fc:	f001 fdc4 	bl	8002588 <HAL_Delay>
    BSP_LCD_GLASS_Clear();
 8000a00:	e7ac      	b.n	800095c <main+0x28>
 8000a02:	bf00      	nop
 8000a04:	20000098 	.word	0x20000098
 8000a08:	200000a4 	.word	0x200000a4
 8000a0c:	aaaaaaab 	.word	0xaaaaaaab
 8000a10:	200000a5 	.word	0x200000a5
 8000a14:	08005cf4 	.word	0x08005cf4
 8000a18:	08005cf8 	.word	0x08005cf8
 8000a1c:	08005cfc 	.word	0x08005cfc

08000a20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b096      	sub	sp, #88	; 0x58
 8000a24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a26:	f107 0314 	add.w	r3, r7, #20
 8000a2a:	2244      	movs	r2, #68	; 0x44
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f005 f927 	bl	8005c82 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a34:	463b      	mov	r3, r7
 8000a36:	2200      	movs	r2, #0
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	605a      	str	r2, [r3, #4]
 8000a3c:	609a      	str	r2, [r3, #8]
 8000a3e:	60da      	str	r2, [r3, #12]
 8000a40:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a42:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a46:	f002 fa5d 	bl	8002f04 <HAL_PWREx_ControlVoltageScaling>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a50:	f000 f83a 	bl	8000ac8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8000a54:	2318      	movs	r3, #24
 8000a56:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000a64:	2360      	movs	r3, #96	; 0x60
 8000a66:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a70:	2301      	movs	r3, #1
 8000a72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000a74:	2314      	movs	r3, #20
 8000a76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a78:	2307      	movs	r3, #7
 8000a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a80:	2302      	movs	r3, #2
 8000a82:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f002 fa91 	bl	8002fb0 <HAL_RCC_OscConfig>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000a94:	f000 f818 	bl	8000ac8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a98:	230f      	movs	r3, #15
 8000a9a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a9c:	2303      	movs	r3, #3
 8000a9e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000aa0:	2380      	movs	r3, #128	; 0x80
 8000aa2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000aac:	463b      	mov	r3, r7
 8000aae:	2101      	movs	r1, #1
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f002 fe59 	bl	8003768 <HAL_RCC_ClockConfig>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000abc:	f000 f804 	bl	8000ac8 <Error_Handler>
  }
}
 8000ac0:	bf00      	nop
 8000ac2:	3758      	adds	r7, #88	; 0x58
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000acc:	b672      	cpsid	i
}
 8000ace:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <Error_Handler+0x8>
	...

08000ad4 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000ad8:	4b1b      	ldr	r3, [pc, #108]	; (8000b48 <MX_SPI2_Init+0x74>)
 8000ada:	4a1c      	ldr	r2, [pc, #112]	; (8000b4c <MX_SPI2_Init+0x78>)
 8000adc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000ade:	4b1a      	ldr	r3, [pc, #104]	; (8000b48 <MX_SPI2_Init+0x74>)
 8000ae0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ae4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ae6:	4b18      	ldr	r3, [pc, #96]	; (8000b48 <MX_SPI2_Init+0x74>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000aec:	4b16      	ldr	r3, [pc, #88]	; (8000b48 <MX_SPI2_Init+0x74>)
 8000aee:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000af2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000af4:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <MX_SPI2_Init+0x74>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000afa:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <MX_SPI2_Init+0x74>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b00:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <MX_SPI2_Init+0x74>)
 8000b02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b06:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b08:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <MX_SPI2_Init+0x74>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <MX_SPI2_Init+0x74>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b14:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <MX_SPI2_Init+0x74>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b1a:	4b0b      	ldr	r3, [pc, #44]	; (8000b48 <MX_SPI2_Init+0x74>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000b20:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <MX_SPI2_Init+0x74>)
 8000b22:	2207      	movs	r2, #7
 8000b24:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b26:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <MX_SPI2_Init+0x74>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b2c:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <MX_SPI2_Init+0x74>)
 8000b2e:	2208      	movs	r2, #8
 8000b30:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b32:	4805      	ldr	r0, [pc, #20]	; (8000b48 <MX_SPI2_Init+0x74>)
 8000b34:	f003 fcf8 	bl	8004528 <HAL_SPI_Init>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000b3e:	f7ff ffc3 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	200000a8 	.word	0x200000a8
 8000b4c:	40003800 	.word	0x40003800

08000b50 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08a      	sub	sp, #40	; 0x28
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a17      	ldr	r2, [pc, #92]	; (8000bcc <HAL_SPI_MspInit+0x7c>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d127      	bne.n	8000bc2 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b72:	4b17      	ldr	r3, [pc, #92]	; (8000bd0 <HAL_SPI_MspInit+0x80>)
 8000b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b76:	4a16      	ldr	r2, [pc, #88]	; (8000bd0 <HAL_SPI_MspInit+0x80>)
 8000b78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b7c:	6593      	str	r3, [r2, #88]	; 0x58
 8000b7e:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <HAL_SPI_MspInit+0x80>)
 8000b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b86:	613b      	str	r3, [r7, #16]
 8000b88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b8a:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <HAL_SPI_MspInit+0x80>)
 8000b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8e:	4a10      	ldr	r2, [pc, #64]	; (8000bd0 <HAL_SPI_MspInit+0x80>)
 8000b90:	f043 0308 	orr.w	r3, r3, #8
 8000b94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b96:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <HAL_SPI_MspInit+0x80>)
 8000b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9a:	f003 0308 	and.w	r3, r3, #8
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PD1     ------> SPI2_SCK
    PD3     ------> SPI2_MISO
    PD4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = MEMS_SCK_Pin|MEMS_MISO_Pin|MEMS_MOSI_Pin;
 8000ba2:	231a      	movs	r3, #26
 8000ba4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bae:	2303      	movs	r3, #3
 8000bb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bb2:	2305      	movs	r3, #5
 8000bb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bb6:	f107 0314 	add.w	r3, r7, #20
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4805      	ldr	r0, [pc, #20]	; (8000bd4 <HAL_SPI_MspInit+0x84>)
 8000bbe:	f001 fded 	bl	800279c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000bc2:	bf00      	nop
 8000bc4:	3728      	adds	r7, #40	; 0x28
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40003800 	.word	0x40003800
 8000bd0:	40021000 	.word	0x40021000
 8000bd4:	48000c00 	.word	0x48000c00

08000bd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bde:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <HAL_MspInit+0x44>)
 8000be0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000be2:	4a0e      	ldr	r2, [pc, #56]	; (8000c1c <HAL_MspInit+0x44>)
 8000be4:	f043 0301 	orr.w	r3, r3, #1
 8000be8:	6613      	str	r3, [r2, #96]	; 0x60
 8000bea:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <HAL_MspInit+0x44>)
 8000bec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	607b      	str	r3, [r7, #4]
 8000bf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf6:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <HAL_MspInit+0x44>)
 8000bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bfa:	4a08      	ldr	r2, [pc, #32]	; (8000c1c <HAL_MspInit+0x44>)
 8000bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c00:	6593      	str	r3, [r2, #88]	; 0x58
 8000c02:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <HAL_MspInit+0x44>)
 8000c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c0a:	603b      	str	r3, [r7, #0]
 8000c0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	40021000 	.word	0x40021000

08000c20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c24:	e7fe      	b.n	8000c24 <NMI_Handler+0x4>

08000c26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c2a:	e7fe      	b.n	8000c2a <HardFault_Handler+0x4>

08000c2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <MemManage_Handler+0x4>

08000c32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c36:	e7fe      	b.n	8000c36 <BusFault_Handler+0x4>

08000c38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <UsageFault_Handler+0x4>

08000c3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr

08000c5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c6c:	f001 fc6c 	bl	8002548 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <SystemInit+0x20>)
 8000c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c7e:	4a05      	ldr	r2, [pc, #20]	; (8000c94 <SystemInit+0x20>)
 8000c80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b096      	sub	sp, #88	; 0x58
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c9e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000caa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	605a      	str	r2, [r3, #4]
 8000cb4:	609a      	str	r2, [r3, #8]
 8000cb6:	60da      	str	r2, [r3, #12]
 8000cb8:	611a      	str	r2, [r3, #16]
 8000cba:	615a      	str	r2, [r3, #20]
 8000cbc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000cbe:	1d3b      	adds	r3, r7, #4
 8000cc0:	222c      	movs	r2, #44	; 0x2c
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f004 ffdc 	bl	8005c82 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cca:	4b4b      	ldr	r3, [pc, #300]	; (8000df8 <MX_TIM1_Init+0x160>)
 8000ccc:	4a4b      	ldr	r2, [pc, #300]	; (8000dfc <MX_TIM1_Init+0x164>)
 8000cce:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000cd0:	4b49      	ldr	r3, [pc, #292]	; (8000df8 <MX_TIM1_Init+0x160>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd6:	4b48      	ldr	r3, [pc, #288]	; (8000df8 <MX_TIM1_Init+0x160>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000cdc:	4b46      	ldr	r3, [pc, #280]	; (8000df8 <MX_TIM1_Init+0x160>)
 8000cde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ce2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ce4:	4b44      	ldr	r3, [pc, #272]	; (8000df8 <MX_TIM1_Init+0x160>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000cea:	4b43      	ldr	r3, [pc, #268]	; (8000df8 <MX_TIM1_Init+0x160>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cf0:	4b41      	ldr	r3, [pc, #260]	; (8000df8 <MX_TIM1_Init+0x160>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000cf6:	4840      	ldr	r0, [pc, #256]	; (8000df8 <MX_TIM1_Init+0x160>)
 8000cf8:	f003 fcc7 	bl	800468a <HAL_TIM_PWM_Init>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000d02:	f7ff fee1 	bl	8000ac8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d06:	2300      	movs	r3, #0
 8000d08:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d12:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d16:	4619      	mov	r1, r3
 8000d18:	4837      	ldr	r0, [pc, #220]	; (8000df8 <MX_TIM1_Init+0x160>)
 8000d1a:	f004 f991 	bl	8005040 <HAL_TIMEx_MasterConfigSynchronization>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000d24:	f7ff fed0 	bl	8000ac8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d28:	2360      	movs	r3, #96	; 0x60
 8000d2a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d30:	2300      	movs	r3, #0
 8000d32:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d34:	2300      	movs	r3, #0
 8000d36:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d40:	2300      	movs	r3, #0
 8000d42:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d44:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d48:	2200      	movs	r2, #0
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	482a      	ldr	r0, [pc, #168]	; (8000df8 <MX_TIM1_Init+0x160>)
 8000d4e:	f003 fcf3 	bl	8004738 <HAL_TIM_PWM_ConfigChannel>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000d58:	f7ff feb6 	bl	8000ac8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d5c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d60:	2204      	movs	r2, #4
 8000d62:	4619      	mov	r1, r3
 8000d64:	4824      	ldr	r0, [pc, #144]	; (8000df8 <MX_TIM1_Init+0x160>)
 8000d66:	f003 fce7 	bl	8004738 <HAL_TIM_PWM_ConfigChannel>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000d70:	f7ff feaa 	bl	8000ac8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d74:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d78:	2208      	movs	r2, #8
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	481e      	ldr	r0, [pc, #120]	; (8000df8 <MX_TIM1_Init+0x160>)
 8000d7e:	f003 fcdb 	bl	8004738 <HAL_TIM_PWM_ConfigChannel>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8000d88:	f7ff fe9e 	bl	8000ac8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d8c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d90:	220c      	movs	r2, #12
 8000d92:	4619      	mov	r1, r3
 8000d94:	4818      	ldr	r0, [pc, #96]	; (8000df8 <MX_TIM1_Init+0x160>)
 8000d96:	f003 fccf 	bl	8004738 <HAL_TIM_PWM_ConfigChannel>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8000da0:	f7ff fe92 	bl	8000ac8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000da4:	2300      	movs	r3, #0
 8000da6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000da8:	2300      	movs	r3, #0
 8000daa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000dac:	2300      	movs	r3, #0
 8000dae:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000db4:	2300      	movs	r3, #0
 8000db6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000db8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dbc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000dc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000dca:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000dd4:	1d3b      	adds	r3, r7, #4
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4807      	ldr	r0, [pc, #28]	; (8000df8 <MX_TIM1_Init+0x160>)
 8000dda:	f004 f9b9 	bl	8005150 <HAL_TIMEx_ConfigBreakDeadTime>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 8000de4:	f7ff fe70 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000de8:	4803      	ldr	r0, [pc, #12]	; (8000df8 <MX_TIM1_Init+0x160>)
 8000dea:	f000 f829 	bl	8000e40 <HAL_TIM_MspPostInit>

}
 8000dee:	bf00      	nop
 8000df0:	3758      	adds	r7, #88	; 0x58
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	2000010c 	.word	0x2000010c
 8000dfc:	40012c00 	.word	0x40012c00

08000e00 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a0a      	ldr	r2, [pc, #40]	; (8000e38 <HAL_TIM_PWM_MspInit+0x38>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d10b      	bne.n	8000e2a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e12:	4b0a      	ldr	r3, [pc, #40]	; (8000e3c <HAL_TIM_PWM_MspInit+0x3c>)
 8000e14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e16:	4a09      	ldr	r2, [pc, #36]	; (8000e3c <HAL_TIM_PWM_MspInit+0x3c>)
 8000e18:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e1c:	6613      	str	r3, [r2, #96]	; 0x60
 8000e1e:	4b07      	ldr	r3, [pc, #28]	; (8000e3c <HAL_TIM_PWM_MspInit+0x3c>)
 8000e20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000e2a:	bf00      	nop
 8000e2c:	3714      	adds	r7, #20
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	40012c00 	.word	0x40012c00
 8000e3c:	40021000 	.word	0x40021000

08000e40 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b088      	sub	sp, #32
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e48:	f107 030c 	add.w	r3, r7, #12
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a11      	ldr	r2, [pc, #68]	; (8000ea4 <HAL_TIM_MspPostInit+0x64>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d11c      	bne.n	8000e9c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e62:	4b11      	ldr	r3, [pc, #68]	; (8000ea8 <HAL_TIM_MspPostInit+0x68>)
 8000e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e66:	4a10      	ldr	r2, [pc, #64]	; (8000ea8 <HAL_TIM_MspPostInit+0x68>)
 8000e68:	f043 0310 	orr.w	r3, r3, #16
 8000e6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <HAL_TIM_MspPostInit+0x68>)
 8000e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e72:	f003 0310 	and.w	r3, r3, #16
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = SERVO1_PWM_Pin|SERVO2_PWM_Pin|SERVO3_PWM_Pin|SERVO4_PWM_Pin;
 8000e7a:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8000e7e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e80:	2302      	movs	r3, #2
 8000e82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e90:	f107 030c 	add.w	r3, r7, #12
 8000e94:	4619      	mov	r1, r3
 8000e96:	4805      	ldr	r0, [pc, #20]	; (8000eac <HAL_TIM_MspPostInit+0x6c>)
 8000e98:	f001 fc80 	bl	800279c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000e9c:	bf00      	nop
 8000e9e:	3720      	adds	r7, #32
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40012c00 	.word	0x40012c00
 8000ea8:	40021000 	.word	0x40021000
 8000eac:	48001000 	.word	0x48001000

08000eb0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000eb4:	4b14      	ldr	r3, [pc, #80]	; (8000f08 <MX_USART2_UART_Init+0x58>)
 8000eb6:	4a15      	ldr	r2, [pc, #84]	; (8000f0c <MX_USART2_UART_Init+0x5c>)
 8000eb8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000eba:	4b13      	ldr	r3, [pc, #76]	; (8000f08 <MX_USART2_UART_Init+0x58>)
 8000ebc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ec0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ec2:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <MX_USART2_UART_Init+0x58>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ec8:	4b0f      	ldr	r3, [pc, #60]	; (8000f08 <MX_USART2_UART_Init+0x58>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ece:	4b0e      	ldr	r3, [pc, #56]	; (8000f08 <MX_USART2_UART_Init+0x58>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ed4:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <MX_USART2_UART_Init+0x58>)
 8000ed6:	220c      	movs	r2, #12
 8000ed8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eda:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <MX_USART2_UART_Init+0x58>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ee0:	4b09      	ldr	r3, [pc, #36]	; (8000f08 <MX_USART2_UART_Init+0x58>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ee6:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <MX_USART2_UART_Init+0x58>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000eec:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <MX_USART2_UART_Init+0x58>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ef2:	4805      	ldr	r0, [pc, #20]	; (8000f08 <MX_USART2_UART_Init+0x58>)
 8000ef4:	f004 f9aa 	bl	800524c <HAL_UART_Init>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000efe:	f7ff fde3 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000158 	.word	0x20000158
 8000f0c:	40004400 	.word	0x40004400

08000f10 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b0ac      	sub	sp, #176	; 0xb0
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f28:	f107 0314 	add.w	r3, r7, #20
 8000f2c:	2288      	movs	r2, #136	; 0x88
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4618      	mov	r0, r3
 8000f32:	f004 fea6 	bl	8005c82 <memset>
  if(uartHandle->Instance==USART2)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a21      	ldr	r2, [pc, #132]	; (8000fc0 <HAL_UART_MspInit+0xb0>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d13a      	bne.n	8000fb6 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f40:	2302      	movs	r3, #2
 8000f42:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f44:	2300      	movs	r3, #0
 8000f46:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f48:	f107 0314 	add.w	r3, r7, #20
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f002 fe2f 	bl	8003bb0 <HAL_RCCEx_PeriphCLKConfig>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f58:	f7ff fdb6 	bl	8000ac8 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f5c:	4b19      	ldr	r3, [pc, #100]	; (8000fc4 <HAL_UART_MspInit+0xb4>)
 8000f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f60:	4a18      	ldr	r2, [pc, #96]	; (8000fc4 <HAL_UART_MspInit+0xb4>)
 8000f62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f66:	6593      	str	r3, [r2, #88]	; 0x58
 8000f68:	4b16      	ldr	r3, [pc, #88]	; (8000fc4 <HAL_UART_MspInit+0xb4>)
 8000f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f70:	613b      	str	r3, [r7, #16]
 8000f72:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f74:	4b13      	ldr	r3, [pc, #76]	; (8000fc4 <HAL_UART_MspInit+0xb4>)
 8000f76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f78:	4a12      	ldr	r2, [pc, #72]	; (8000fc4 <HAL_UART_MspInit+0xb4>)
 8000f7a:	f043 0308 	orr.w	r3, r3, #8
 8000f7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f80:	4b10      	ldr	r3, [pc, #64]	; (8000fc4 <HAL_UART_MspInit+0xb4>)
 8000f82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f84:	f003 0308 	and.w	r3, r3, #8
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f8c:	2360      	movs	r3, #96	; 0x60
 8000f8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f92:	2302      	movs	r3, #2
 8000f94:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fa4:	2307      	movs	r3, #7
 8000fa6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000faa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <HAL_UART_MspInit+0xb8>)
 8000fb2:	f001 fbf3 	bl	800279c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000fb6:	bf00      	nop
 8000fb8:	37b0      	adds	r7, #176	; 0xb0
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40004400 	.word	0x40004400
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	48000c00 	.word	0x48000c00

08000fcc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000fcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001004 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fd0:	f7ff fe50 	bl	8000c74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fd4:	480c      	ldr	r0, [pc, #48]	; (8001008 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fd6:	490d      	ldr	r1, [pc, #52]	; (800100c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fd8:	4a0d      	ldr	r2, [pc, #52]	; (8001010 <LoopForever+0xe>)
  movs r3, #0
 8000fda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fdc:	e002      	b.n	8000fe4 <LoopCopyDataInit>

08000fde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fe0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fe2:	3304      	adds	r3, #4

08000fe4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fe4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fe6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fe8:	d3f9      	bcc.n	8000fde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fea:	4a0a      	ldr	r2, [pc, #40]	; (8001014 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fec:	4c0a      	ldr	r4, [pc, #40]	; (8001018 <LoopForever+0x16>)
  movs r3, #0
 8000fee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ff0:	e001      	b.n	8000ff6 <LoopFillZerobss>

08000ff2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ff2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ff4:	3204      	adds	r2, #4

08000ff6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ff6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ff8:	d3fb      	bcc.n	8000ff2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ffa:	f004 fe4b 	bl	8005c94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ffe:	f7ff fc99 	bl	8000934 <main>

08001002 <LoopForever>:

LoopForever:
    b LoopForever
 8001002:	e7fe      	b.n	8001002 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001004:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001008:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800100c:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 8001010:	08005da0 	.word	0x08005da0
  ldr r2, =_sbss
 8001014:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8001018:	20000298 	.word	0x20000298

0800101c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800101c:	e7fe      	b.n	800101c <ADC1_2_IRQHandler>

0800101e <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 800101e:	b580      	push	{r7, lr}
 8001020:	b084      	sub	sp, #16
 8001022:	af00      	add	r7, sp, #0
 8001024:	4603      	mov	r3, r0
 8001026:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001028:	2300      	movs	r3, #0
 800102a:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 800102c:	f000 faa6 	bl	800157c <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001030:	88fb      	ldrh	r3, [r7, #6]
 8001032:	b2db      	uxtb	r3, r3
 8001034:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8001036:	f107 030f 	add.w	r3, r7, #15
 800103a:	2201      	movs	r2, #1
 800103c:	2120      	movs	r1, #32
 800103e:	4618      	mov	r0, r3
 8001040:	f000 fb3c 	bl	80016bc <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 8001044:	88fb      	ldrh	r3, [r7, #6]
 8001046:	0a1b      	lsrs	r3, r3, #8
 8001048:	b29b      	uxth	r3, r3
 800104a:	b2db      	uxtb	r3, r3
 800104c:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 800104e:	f107 030f 	add.w	r3, r7, #15
 8001052:	2201      	movs	r2, #1
 8001054:	2123      	movs	r1, #35	; 0x23
 8001056:	4618      	mov	r0, r3
 8001058:	f000 fb30 	bl	80016bc <GYRO_IO_Write>
}
 800105c:	bf00      	nop
 800105e:	3710      	adds	r7, #16
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8001078:	f000 fa80 	bl	800157c <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 800107c:	1dfb      	adds	r3, r7, #7
 800107e:	2201      	movs	r2, #1
 8001080:	210f      	movs	r1, #15
 8001082:	4618      	mov	r0, r3
 8001084:	f000 fb56 	bl	8001734 <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 8001088:	79fb      	ldrb	r3, [r7, #7]
}
 800108a:	4618      	mov	r0, r3
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b082      	sub	sp, #8
 8001096:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001098:	1dfb      	adds	r3, r7, #7
 800109a:	2201      	movs	r2, #1
 800109c:	2124      	movs	r1, #36	; 0x24
 800109e:	4618      	mov	r0, r3
 80010a0:	f000 fb48 	bl	8001734 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80010ae:	1dfb      	adds	r3, r7, #7
 80010b0:	2201      	movs	r2, #1
 80010b2:	2124      	movs	r1, #36	; 0x24
 80010b4:	4618      	mov	r0, r3
 80010b6:	f000 fb01 	bl	80016bc <GYRO_IO_Write>
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b084      	sub	sp, #16
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	4603      	mov	r3, r0
 80010ca:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80010cc:	2300      	movs	r3, #0
 80010ce:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80010d0:	88fb      	ldrh	r3, [r7, #6]
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 80010d6:	f107 030f 	add.w	r3, r7, #15
 80010da:	2201      	movs	r2, #1
 80010dc:	2120      	movs	r1, #32
 80010de:	4618      	mov	r0, r3
 80010e0:	f000 faec 	bl	80016bc <GYRO_IO_Write>
}
 80010e4:	bf00      	nop
 80010e6:	3710      	adds	r7, #16
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 80010f6:	2300      	movs	r3, #0
 80010f8:	73fb      	strb	r3, [r7, #15]
 80010fa:	2300      	movs	r3, #0
 80010fc:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 80010fe:	f107 030f 	add.w	r3, r7, #15
 8001102:	2201      	movs	r2, #1
 8001104:	2130      	movs	r1, #48	; 0x30
 8001106:	4618      	mov	r0, r3
 8001108:	f000 fb14 	bl	8001734 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 800110c:	f107 030e 	add.w	r3, r7, #14
 8001110:	2201      	movs	r2, #1
 8001112:	2122      	movs	r1, #34	; 0x22
 8001114:	4618      	mov	r0, r3
 8001116:	f000 fb0d 	bl	8001734 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 800111a:	7bfb      	ldrb	r3, [r7, #15]
 800111c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001120:	b2db      	uxtb	r3, r3
 8001122:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8001124:	88fb      	ldrh	r3, [r7, #6]
 8001126:	b2db      	uxtb	r3, r3
 8001128:	121b      	asrs	r3, r3, #8
 800112a:	b25a      	sxtb	r2, r3
 800112c:	7bfb      	ldrb	r3, [r7, #15]
 800112e:	b25b      	sxtb	r3, r3
 8001130:	4313      	orrs	r3, r2
 8001132:	b25b      	sxtb	r3, r3
 8001134:	b2db      	uxtb	r3, r3
 8001136:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 8001138:	7bbb      	ldrb	r3, [r7, #14]
 800113a:	f023 0320 	bic.w	r3, r3, #32
 800113e:	b2db      	uxtb	r3, r3
 8001140:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 8001142:	88fb      	ldrh	r3, [r7, #6]
 8001144:	b2da      	uxtb	r2, r3
 8001146:	7bbb      	ldrb	r3, [r7, #14]
 8001148:	4313      	orrs	r3, r2
 800114a:	b2db      	uxtb	r3, r3
 800114c:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 800114e:	f107 030f 	add.w	r3, r7, #15
 8001152:	2201      	movs	r2, #1
 8001154:	2130      	movs	r1, #48	; 0x30
 8001156:	4618      	mov	r0, r3
 8001158:	f000 fab0 	bl	80016bc <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 800115c:	f107 030e 	add.w	r3, r7, #14
 8001160:	2201      	movs	r2, #1
 8001162:	2122      	movs	r1, #34	; 0x22
 8001164:	4618      	mov	r0, r3
 8001166:	f000 faa9 	bl	80016bc <GYRO_IO_Write>
}
 800116a:	bf00      	nop
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 8001172:	b580      	push	{r7, lr}
 8001174:	b084      	sub	sp, #16
 8001176:	af00      	add	r7, sp, #0
 8001178:	4603      	mov	r3, r0
 800117a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800117c:	f107 030f 	add.w	r3, r7, #15
 8001180:	2201      	movs	r2, #1
 8001182:	2122      	movs	r1, #34	; 0x22
 8001184:	4618      	mov	r0, r3
 8001186:	f000 fad5 	bl	8001734 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d10a      	bne.n	80011a6 <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 8001190:	7bfb      	ldrb	r3, [r7, #15]
 8001192:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001196:	b2db      	uxtb	r3, r3
 8001198:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 800119a:	7bfb      	ldrb	r3, [r7, #15]
 800119c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	73fb      	strb	r3, [r7, #15]
 80011a4:	e00c      	b.n	80011c0 <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d109      	bne.n	80011c0 <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 80011ac:	7bfb      	ldrb	r3, [r7, #15]
 80011ae:	f023 0308 	bic.w	r3, r3, #8
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 80011b6:	7bfb      	ldrb	r3, [r7, #15]
 80011b8:	f043 0308 	orr.w	r3, r3, #8
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80011c0:	f107 030f 	add.w	r3, r7, #15
 80011c4:	2201      	movs	r2, #1
 80011c6:	2122      	movs	r1, #34	; 0x22
 80011c8:	4618      	mov	r0, r3
 80011ca:	f000 fa77 	bl	80016bc <GYRO_IO_Write>
}
 80011ce:	bf00      	nop
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b084      	sub	sp, #16
 80011da:	af00      	add	r7, sp, #0
 80011dc:	4603      	mov	r3, r0
 80011de:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80011e0:	f107 030f 	add.w	r3, r7, #15
 80011e4:	2201      	movs	r2, #1
 80011e6:	2122      	movs	r1, #34	; 0x22
 80011e8:	4618      	mov	r0, r3
 80011ea:	f000 faa3 	bl	8001734 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d107      	bne.n	8001204 <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 80011f4:	7bfb      	ldrb	r3, [r7, #15]
 80011f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 80011fe:	7bfb      	ldrb	r3, [r7, #15]
 8001200:	73fb      	strb	r3, [r7, #15]
 8001202:	e009      	b.n	8001218 <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	2b01      	cmp	r3, #1
 8001208:	d106      	bne.n	8001218 <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 800120a:	7bfb      	ldrb	r3, [r7, #15]
 800120c:	f023 0308 	bic.w	r3, r3, #8
 8001210:	b2db      	uxtb	r3, r3
 8001212:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 8001214:	7bfb      	ldrb	r3, [r7, #15]
 8001216:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001218:	f107 030f 	add.w	r3, r7, #15
 800121c:	2201      	movs	r2, #1
 800121e:	2122      	movs	r1, #34	; 0x22
 8001220:	4618      	mov	r0, r3
 8001222:	f000 fa4b 	bl	80016bc <GYRO_IO_Write>
}
 8001226:	bf00      	nop
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b084      	sub	sp, #16
 8001232:	af00      	add	r7, sp, #0
 8001234:	4603      	mov	r3, r0
 8001236:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8001238:	f107 030f 	add.w	r3, r7, #15
 800123c:	2201      	movs	r2, #1
 800123e:	2121      	movs	r1, #33	; 0x21
 8001240:	4618      	mov	r0, r3
 8001242:	f000 fa77 	bl	8001734 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 8001246:	7bfb      	ldrb	r3, [r7, #15]
 8001248:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800124c:	b2db      	uxtb	r3, r3
 800124e:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 8001250:	7bfa      	ldrb	r2, [r7, #15]
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	4313      	orrs	r3, r2
 8001256:	b2db      	uxtb	r3, r3
 8001258:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 800125a:	f107 030f 	add.w	r3, r7, #15
 800125e:	2201      	movs	r2, #1
 8001260:	2121      	movs	r1, #33	; 0x21
 8001262:	4618      	mov	r0, r3
 8001264:	f000 fa2a 	bl	80016bc <GYRO_IO_Write>
}
 8001268:	bf00      	nop
 800126a:	3710      	adds	r7, #16
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800127a:	f107 030f 	add.w	r3, r7, #15
 800127e:	2201      	movs	r2, #1
 8001280:	2124      	movs	r1, #36	; 0x24
 8001282:	4618      	mov	r0, r3
 8001284:	f000 fa56 	bl	8001734 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 8001288:	7bfb      	ldrb	r3, [r7, #15]
 800128a:	f023 0310 	bic.w	r3, r3, #16
 800128e:	b2db      	uxtb	r3, r3
 8001290:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8001292:	7bfa      	ldrb	r2, [r7, #15]
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	4313      	orrs	r3, r2
 8001298:	b2db      	uxtb	r3, r3
 800129a:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800129c:	f107 030f 	add.w	r3, r7, #15
 80012a0:	2201      	movs	r2, #1
 80012a2:	2124      	movs	r1, #36	; 0x24
 80012a4:	4618      	mov	r0, r3
 80012a6:	f000 fa09 	bl	80016bc <GYRO_IO_Write>
}
 80012aa:	bf00      	nop
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
	...

080012b4 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08a      	sub	sp, #40	; 0x28
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 80012bc:	2300      	movs	r3, #0
 80012be:	61bb      	str	r3, [r7, #24]
 80012c0:	2300      	movs	r3, #0
 80012c2:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 80012c4:	f107 0310 	add.w	r3, r7, #16
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 80012d2:	f04f 0300 	mov.w	r3, #0
 80012d6:	627b      	str	r3, [r7, #36]	; 0x24
  int i =0;
 80012d8:	2300      	movs	r3, #0
 80012da:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 80012dc:	f107 030f 	add.w	r3, r7, #15
 80012e0:	2201      	movs	r2, #1
 80012e2:	2123      	movs	r1, #35	; 0x23
 80012e4:	4618      	mov	r0, r3
 80012e6:	f000 fa25 	bl	8001734 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 80012ea:	f107 0318 	add.w	r3, r7, #24
 80012ee:	2206      	movs	r2, #6
 80012f0:	2128      	movs	r1, #40	; 0x28
 80012f2:	4618      	mov	r0, r3
 80012f4:	f000 fa1e 	bl	8001734 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 80012f8:	7bfb      	ldrb	r3, [r7, #15]
 80012fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d123      	bne.n	800134a <L3GD20_ReadXYZAngRate+0x96>
  {
    for(i=0; i<3; i++)
 8001302:	2300      	movs	r3, #0
 8001304:	623b      	str	r3, [r7, #32]
 8001306:	e01c      	b.n	8001342 <L3GD20_ReadXYZAngRate+0x8e>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8001308:	6a3b      	ldr	r3, [r7, #32]
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	3301      	adds	r3, #1
 800130e:	3328      	adds	r3, #40	; 0x28
 8001310:	443b      	add	r3, r7
 8001312:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001316:	b29b      	uxth	r3, r3
 8001318:	021b      	lsls	r3, r3, #8
 800131a:	b29a      	uxth	r2, r3
 800131c:	6a3b      	ldr	r3, [r7, #32]
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	3328      	adds	r3, #40	; 0x28
 8001322:	443b      	add	r3, r7
 8001324:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001328:	b29b      	uxth	r3, r3
 800132a:	4413      	add	r3, r2
 800132c:	b29b      	uxth	r3, r3
 800132e:	b21a      	sxth	r2, r3
 8001330:	6a3b      	ldr	r3, [r7, #32]
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	3328      	adds	r3, #40	; 0x28
 8001336:	443b      	add	r3, r7
 8001338:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 800133c:	6a3b      	ldr	r3, [r7, #32]
 800133e:	3301      	adds	r3, #1
 8001340:	623b      	str	r3, [r7, #32]
 8001342:	6a3b      	ldr	r3, [r7, #32]
 8001344:	2b02      	cmp	r3, #2
 8001346:	dddf      	ble.n	8001308 <L3GD20_ReadXYZAngRate+0x54>
 8001348:	e022      	b.n	8001390 <L3GD20_ReadXYZAngRate+0xdc>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 800134a:	2300      	movs	r3, #0
 800134c:	623b      	str	r3, [r7, #32]
 800134e:	e01c      	b.n	800138a <L3GD20_ReadXYZAngRate+0xd6>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 8001350:	6a3b      	ldr	r3, [r7, #32]
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	3328      	adds	r3, #40	; 0x28
 8001356:	443b      	add	r3, r7
 8001358:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800135c:	b29b      	uxth	r3, r3
 800135e:	021b      	lsls	r3, r3, #8
 8001360:	b29a      	uxth	r2, r3
 8001362:	6a3b      	ldr	r3, [r7, #32]
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	3301      	adds	r3, #1
 8001368:	3328      	adds	r3, #40	; 0x28
 800136a:	443b      	add	r3, r7
 800136c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001370:	b29b      	uxth	r3, r3
 8001372:	4413      	add	r3, r2
 8001374:	b29b      	uxth	r3, r3
 8001376:	b21a      	sxth	r2, r3
 8001378:	6a3b      	ldr	r3, [r7, #32]
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	3328      	adds	r3, #40	; 0x28
 800137e:	443b      	add	r3, r7
 8001380:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8001384:	6a3b      	ldr	r3, [r7, #32]
 8001386:	3301      	adds	r3, #1
 8001388:	623b      	str	r3, [r7, #32]
 800138a:	6a3b      	ldr	r3, [r7, #32]
 800138c:	2b02      	cmp	r3, #2
 800138e:	dddf      	ble.n	8001350 <L3GD20_ReadXYZAngRate+0x9c>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8001390:	7bfb      	ldrb	r3, [r7, #15]
 8001392:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001396:	2b20      	cmp	r3, #32
 8001398:	d00c      	beq.n	80013b4 <L3GD20_ReadXYZAngRate+0x100>
 800139a:	2b20      	cmp	r3, #32
 800139c:	dc0d      	bgt.n	80013ba <L3GD20_ReadXYZAngRate+0x106>
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d002      	beq.n	80013a8 <L3GD20_ReadXYZAngRate+0xf4>
 80013a2:	2b10      	cmp	r3, #16
 80013a4:	d003      	beq.n	80013ae <L3GD20_ReadXYZAngRate+0xfa>
 80013a6:	e008      	b.n	80013ba <L3GD20_ReadXYZAngRate+0x106>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 80013a8:	4b15      	ldr	r3, [pc, #84]	; (8001400 <L3GD20_ReadXYZAngRate+0x14c>)
 80013aa:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 80013ac:	e005      	b.n	80013ba <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 80013ae:	4b15      	ldr	r3, [pc, #84]	; (8001404 <L3GD20_ReadXYZAngRate+0x150>)
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 80013b2:	e002      	b.n	80013ba <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 80013b4:	4b14      	ldr	r3, [pc, #80]	; (8001408 <L3GD20_ReadXYZAngRate+0x154>)
 80013b6:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 80013b8:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 80013ba:	2300      	movs	r3, #0
 80013bc:	623b      	str	r3, [r7, #32]
 80013be:	e016      	b.n	80013ee <L3GD20_ReadXYZAngRate+0x13a>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 80013c0:	6a3b      	ldr	r3, [r7, #32]
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	3328      	adds	r3, #40	; 0x28
 80013c6:	443b      	add	r3, r7
 80013c8:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 80013cc:	ee07 3a90 	vmov	s15, r3
 80013d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013d4:	6a3b      	ldr	r3, [r7, #32]
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	4413      	add	r3, r2
 80013dc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80013e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013e4:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 80013e8:	6a3b      	ldr	r3, [r7, #32]
 80013ea:	3301      	adds	r3, #1
 80013ec:	623b      	str	r3, [r7, #32]
 80013ee:	6a3b      	ldr	r3, [r7, #32]
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	dde5      	ble.n	80013c0 <L3GD20_ReadXYZAngRate+0x10c>
  }
}
 80013f4:	bf00      	nop
 80013f6:	bf00      	nop
 80013f8:	3728      	adds	r7, #40	; 0x28
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	410c0000 	.word	0x410c0000
 8001404:	418c0000 	.word	0x418c0000
 8001408:	428c0000 	.word	0x428c0000

0800140c <SPIx_Init>:
/**
  * @brief SPIx Bus initialization
  * @retval None
  */
static void SPIx_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  if (HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001410:	481a      	ldr	r0, [pc, #104]	; (800147c <SPIx_Init+0x70>)
 8001412:	f003 f92c 	bl	800466e <HAL_SPI_GetState>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d12c      	bne.n	8001476 <SPIx_Init+0x6a>
  {
    /* SPI Config */
    SpiHandle.Instance = DISCOVERY_SPIx;
 800141c:	4b17      	ldr	r3, [pc, #92]	; (800147c <SPIx_Init+0x70>)
 800141e:	4a18      	ldr	r2, [pc, #96]	; (8001480 <SPIx_Init+0x74>)
 8001420:	601a      	str	r2, [r3, #0]
    /* SPI baudrate is set to 10 MHz (PCLK1/SPI_BaudRatePrescaler = 80/8 = 10 MHz)
      to verify these constraints:
      lsm303c SPI interface max baudrate is 10MHz for write/read
      PCLK1 max frequency is set to 80 MHz
      */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001422:	4b16      	ldr	r3, [pc, #88]	; (800147c <SPIx_Init+0x70>)
 8001424:	2210      	movs	r2, #16
 8001426:	61da      	str	r2, [r3, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES;
 8001428:	4b14      	ldr	r3, [pc, #80]	; (800147c <SPIx_Init+0x70>)
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 800142e:	4b13      	ldr	r3, [pc, #76]	; (800147c <SPIx_Init+0x70>)
 8001430:	2200      	movs	r2, #0
 8001432:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001434:	4b11      	ldr	r3, [pc, #68]	; (800147c <SPIx_Init+0x70>)
 8001436:	2200      	movs	r2, #0
 8001438:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800143a:	4b10      	ldr	r3, [pc, #64]	; (800147c <SPIx_Init+0x70>)
 800143c:	2200      	movs	r2, #0
 800143e:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial = 7;
 8001440:	4b0e      	ldr	r3, [pc, #56]	; (800147c <SPIx_Init+0x70>)
 8001442:	2207      	movs	r2, #7
 8001444:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 8001446:	4b0d      	ldr	r3, [pc, #52]	; (800147c <SPIx_Init+0x70>)
 8001448:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800144c:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800144e:	4b0b      	ldr	r3, [pc, #44]	; (800147c <SPIx_Init+0x70>)
 8001450:	2200      	movs	r2, #0
 8001452:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 8001454:	4b09      	ldr	r3, [pc, #36]	; (800147c <SPIx_Init+0x70>)
 8001456:	f44f 7200 	mov.w	r2, #512	; 0x200
 800145a:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLE;
 800145c:	4b07      	ldr	r3, [pc, #28]	; (800147c <SPIx_Init+0x70>)
 800145e:	2200      	movs	r2, #0
 8001460:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8001462:	4b06      	ldr	r3, [pc, #24]	; (800147c <SPIx_Init+0x70>)
 8001464:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001468:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 800146a:	4804      	ldr	r0, [pc, #16]	; (800147c <SPIx_Init+0x70>)
 800146c:	f000 f80a 	bl	8001484 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001470:	4802      	ldr	r0, [pc, #8]	; (800147c <SPIx_Init+0x70>)
 8001472:	f003 f859 	bl	8004528 <HAL_SPI_Init>
  }
}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	200001e0 	.word	0x200001e0
 8001480:	40003800 	.word	0x40003800

08001484 <SPIx_MspInit>:
  * @brief SPI MSP Init
  * @param hspi: SPI handle
  * @retval None
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08a      	sub	sp, #40	; 0x28
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock  */
  DISCOVERY_SPIx_CLOCK_ENABLE();
 800148c:	4b15      	ldr	r3, [pc, #84]	; (80014e4 <SPIx_MspInit+0x60>)
 800148e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001490:	4a14      	ldr	r2, [pc, #80]	; (80014e4 <SPIx_MspInit+0x60>)
 8001492:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001496:	6593      	str	r3, [r2, #88]	; 0x58
 8001498:	4b12      	ldr	r3, [pc, #72]	; (80014e4 <SPIx_MspInit+0x60>)
 800149a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800149c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014a0:	613b      	str	r3, [r7, #16]
 80014a2:	693b      	ldr	r3, [r7, #16]

  /* enable SPIx gpio clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80014a4:	4b0f      	ldr	r3, [pc, #60]	; (80014e4 <SPIx_MspInit+0x60>)
 80014a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a8:	4a0e      	ldr	r2, [pc, #56]	; (80014e4 <SPIx_MspInit+0x60>)
 80014aa:	f043 0308 	orr.w	r3, r3, #8
 80014ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014b0:	4b0c      	ldr	r3, [pc, #48]	; (80014e4 <SPIx_MspInit+0x60>)
 80014b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b4:	f003 0308 	and.w	r3, r3, #8
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	68fb      	ldr	r3, [r7, #12]

  /* configure SPIx SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 80014bc:	231a      	movs	r3, #26
 80014be:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80014c0:	2302      	movs	r3, #2
 80014c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL; // GPIO_PULLDOWN;
 80014c4:	2300      	movs	r3, #0
 80014c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80014c8:	2302      	movs	r3, #2
 80014ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80014cc:	2305      	movs	r3, #5
 80014ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	4619      	mov	r1, r3
 80014d6:	4804      	ldr	r0, [pc, #16]	; (80014e8 <SPIx_MspInit+0x64>)
 80014d8:	f001 f960 	bl	800279c <HAL_GPIO_Init>
}
 80014dc:	bf00      	nop
 80014de:	3728      	adds	r7, #40	; 0x28
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40021000 	.word	0x40021000
 80014e8:	48000c00 	.word	0x48000c00

080014ec <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte : Byte send.
  * @retval none.
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b085      	sub	sp, #20
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte;

  /* Enable the SPI */
  __HAL_SPI_ENABLE(&SpiHandle);
 80014f6:	4b20      	ldr	r3, [pc, #128]	; (8001578 <SPIx_WriteRead+0x8c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	4b1e      	ldr	r3, [pc, #120]	; (8001578 <SPIx_WriteRead+0x8c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001504:	601a      	str	r2, [r3, #0]
  /* check TXE flag */
  while ((SpiHandle.Instance->SR & SPI_FLAG_TXE) != SPI_FLAG_TXE);
 8001506:	bf00      	nop
 8001508:	4b1b      	ldr	r3, [pc, #108]	; (8001578 <SPIx_WriteRead+0x8c>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	2b02      	cmp	r3, #2
 8001514:	d1f8      	bne.n	8001508 <SPIx_WriteRead+0x1c>

  /* Write the data */
  *((__IO uint8_t *)&SpiHandle.Instance->DR) = Byte;
 8001516:	4b18      	ldr	r3, [pc, #96]	; (8001578 <SPIx_WriteRead+0x8c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	330c      	adds	r3, #12
 800151c:	79fa      	ldrb	r2, [r7, #7]
 800151e:	701a      	strb	r2, [r3, #0]

  while ((SpiHandle.Instance->SR & SPI_FLAG_RXNE) != SPI_FLAG_RXNE);
 8001520:	bf00      	nop
 8001522:	4b15      	ldr	r3, [pc, #84]	; (8001578 <SPIx_WriteRead+0x8c>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	f003 0301 	and.w	r3, r3, #1
 800152c:	2b01      	cmp	r3, #1
 800152e:	d1f8      	bne.n	8001522 <SPIx_WriteRead+0x36>
  receivedbyte = *((__IO uint8_t *)&SpiHandle.Instance->DR);
 8001530:	4b11      	ldr	r3, [pc, #68]	; (8001578 <SPIx_WriteRead+0x8c>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	330c      	adds	r3, #12
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	73fb      	strb	r3, [r7, #15]

  /* Wait BSY flag */
  while ((SpiHandle.Instance->SR & SPI_FLAG_FTLVL) != SPI_FTLVL_EMPTY);
 800153a:	bf00      	nop
 800153c:	4b0e      	ldr	r3, [pc, #56]	; (8001578 <SPIx_WriteRead+0x8c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001546:	2b00      	cmp	r3, #0
 8001548:	d1f8      	bne.n	800153c <SPIx_WriteRead+0x50>
  while ((SpiHandle.Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY);
 800154a:	bf00      	nop
 800154c:	4b0a      	ldr	r3, [pc, #40]	; (8001578 <SPIx_WriteRead+0x8c>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001556:	2b80      	cmp	r3, #128	; 0x80
 8001558:	d0f8      	beq.n	800154c <SPIx_WriteRead+0x60>

  /* disable the SPI */
  __HAL_SPI_DISABLE(&SpiHandle);
 800155a:	4b07      	ldr	r3, [pc, #28]	; (8001578 <SPIx_WriteRead+0x8c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	4b05      	ldr	r3, [pc, #20]	; (8001578 <SPIx_WriteRead+0x8c>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001568:	601a      	str	r2, [r3, #0]

  return receivedbyte;
 800156a:	7bfb      	ldrb	r3, [r7, #15]
}
 800156c:	4618      	mov	r0, r3
 800156e:	3714      	adds	r7, #20
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	200001e0 	.word	0x200001e0

0800157c <GYRO_IO_Init>:
/**
  * @brief  Configures the GYRO SPI interface.
  * @retval None
  */
void GYRO_IO_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b08a      	sub	sp, #40	; 0x28
 8001580:	af00      	add	r7, sp, #0

  /* Case GYRO not used in the demonstration software except being set in
     low power mode.
     To avoid access conflicts with accelerometer and magnetometer,
     initialize  XL_CS and MAG_CS pins then deselect these I/O */
  ACCELERO_CS_GPIO_CLK_ENABLE();
 8001582:	4b49      	ldr	r3, [pc, #292]	; (80016a8 <GYRO_IO_Init+0x12c>)
 8001584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001586:	4a48      	ldr	r2, [pc, #288]	; (80016a8 <GYRO_IO_Init+0x12c>)
 8001588:	f043 0310 	orr.w	r3, r3, #16
 800158c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800158e:	4b46      	ldr	r3, [pc, #280]	; (80016a8 <GYRO_IO_Init+0x12c>)
 8001590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001592:	f003 0310 	and.w	r3, r3, #16
 8001596:	613b      	str	r3, [r7, #16]
 8001598:	693b      	ldr	r3, [r7, #16]
  GPIO_InitStructure.Pin = ACCELERO_CS_PIN;
 800159a:	2301      	movs	r3, #1
 800159c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800159e:	2301      	movs	r3, #1
 80015a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a6:	2303      	movs	r3, #3
 80015a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ACCELERO_CS_GPIO_PORT, &GPIO_InitStructure);
 80015aa:	f107 0314 	add.w	r3, r7, #20
 80015ae:	4619      	mov	r1, r3
 80015b0:	483e      	ldr	r0, [pc, #248]	; (80016ac <GYRO_IO_Init+0x130>)
 80015b2:	f001 f8f3 	bl	800279c <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  ACCELERO_CS_HIGH();
 80015b6:	2201      	movs	r2, #1
 80015b8:	2101      	movs	r1, #1
 80015ba:	483c      	ldr	r0, [pc, #240]	; (80016ac <GYRO_IO_Init+0x130>)
 80015bc:	f001 fab0 	bl	8002b20 <HAL_GPIO_WritePin>

  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */
  MAGNETO_CS_GPIO_CLK_ENABLE();
 80015c0:	4b39      	ldr	r3, [pc, #228]	; (80016a8 <GYRO_IO_Init+0x12c>)
 80015c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c4:	4a38      	ldr	r2, [pc, #224]	; (80016a8 <GYRO_IO_Init+0x12c>)
 80015c6:	f043 0304 	orr.w	r3, r3, #4
 80015ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015cc:	4b36      	ldr	r3, [pc, #216]	; (80016a8 <GYRO_IO_Init+0x12c>)
 80015ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d0:	f003 0304 	and.w	r3, r3, #4
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	68fb      	ldr	r3, [r7, #12]
  GPIO_InitStructure.Pin = MAGNETO_CS_PIN;
 80015d8:	2301      	movs	r3, #1
 80015da:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80015dc:	2301      	movs	r3, #1
 80015de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e4:	2303      	movs	r3, #3
 80015e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MAGNETO_CS_GPIO_PORT, &GPIO_InitStructure);
 80015e8:	f107 0314 	add.w	r3, r7, #20
 80015ec:	4619      	mov	r1, r3
 80015ee:	4830      	ldr	r0, [pc, #192]	; (80016b0 <GYRO_IO_Init+0x134>)
 80015f0:	f001 f8d4 	bl	800279c <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  MAGNETO_CS_HIGH();
 80015f4:	2201      	movs	r2, #1
 80015f6:	2101      	movs	r1, #1
 80015f8:	482d      	ldr	r0, [pc, #180]	; (80016b0 <GYRO_IO_Init+0x134>)
 80015fa:	f001 fa91 	bl	8002b20 <HAL_GPIO_WritePin>


  /* Configure the Gyroscope Control pins ---------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */
  GYRO_CS_GPIO_CLK_ENABLE();
 80015fe:	4b2a      	ldr	r3, [pc, #168]	; (80016a8 <GYRO_IO_Init+0x12c>)
 8001600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001602:	4a29      	ldr	r2, [pc, #164]	; (80016a8 <GYRO_IO_Init+0x12c>)
 8001604:	f043 0308 	orr.w	r3, r3, #8
 8001608:	64d3      	str	r3, [r2, #76]	; 0x4c
 800160a:	4b27      	ldr	r3, [pc, #156]	; (80016a8 <GYRO_IO_Init+0x12c>)
 800160c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160e:	f003 0308 	and.w	r3, r3, #8
 8001612:	60bb      	str	r3, [r7, #8]
 8001614:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 8001616:	2380      	movs	r3, #128	; 0x80
 8001618:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800161a:	2301      	movs	r3, #1
 800161c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800161e:	2300      	movs	r3, #0
 8001620:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001622:	2303      	movs	r3, #3
 8001624:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 8001626:	f107 0314 	add.w	r3, r7, #20
 800162a:	4619      	mov	r1, r3
 800162c:	4821      	ldr	r0, [pc, #132]	; (80016b4 <GYRO_IO_Init+0x138>)
 800162e:	f001 f8b5 	bl	800279c <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();
 8001632:	2201      	movs	r2, #1
 8001634:	2180      	movs	r1, #128	; 0x80
 8001636:	481f      	ldr	r0, [pc, #124]	; (80016b4 <GYRO_IO_Init+0x138>)
 8001638:	f001 fa72 	bl	8002b20 <HAL_GPIO_WritePin>

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT1_GPIO_CLK_ENABLE();
 800163c:	4b1a      	ldr	r3, [pc, #104]	; (80016a8 <GYRO_IO_Init+0x12c>)
 800163e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001640:	4a19      	ldr	r2, [pc, #100]	; (80016a8 <GYRO_IO_Init+0x12c>)
 8001642:	f043 0308 	orr.w	r3, r3, #8
 8001646:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001648:	4b17      	ldr	r3, [pc, #92]	; (80016a8 <GYRO_IO_Init+0x12c>)
 800164a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164c:	f003 0308 	and.w	r3, r3, #8
 8001650:	607b      	str	r3, [r7, #4]
 8001652:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN;
 8001654:	2304      	movs	r3, #4
 8001656:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8001658:	2300      	movs	r3, #0
 800165a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800165c:	2303      	movs	r3, #3
 800165e:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GYRO_INT1_GPIO_PORT, &GPIO_InitStructure);
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	4619      	mov	r1, r3
 800166a:	4812      	ldr	r0, [pc, #72]	; (80016b4 <GYRO_IO_Init+0x138>)
 800166c:	f001 f896 	bl	800279c <HAL_GPIO_Init>

  GYRO_INT2_GPIO_CLK_ENABLE();
 8001670:	4b0d      	ldr	r3, [pc, #52]	; (80016a8 <GYRO_IO_Init+0x12c>)
 8001672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001674:	4a0c      	ldr	r2, [pc, #48]	; (80016a8 <GYRO_IO_Init+0x12c>)
 8001676:	f043 0302 	orr.w	r3, r3, #2
 800167a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800167c:	4b0a      	ldr	r3, [pc, #40]	; (80016a8 <GYRO_IO_Init+0x12c>)
 800167e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	603b      	str	r3, [r7, #0]
 8001686:	683b      	ldr	r3, [r7, #0]
  GPIO_InitStructure.Pin = GYRO_INT2_PIN;
 8001688:	f44f 7380 	mov.w	r3, #256	; 0x100
 800168c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT2_GPIO_PORT, &GPIO_InitStructure);
 800168e:	f107 0314 	add.w	r3, r7, #20
 8001692:	4619      	mov	r1, r3
 8001694:	4808      	ldr	r0, [pc, #32]	; (80016b8 <GYRO_IO_Init+0x13c>)
 8001696:	f001 f881 	bl	800279c <HAL_GPIO_Init>

  SPIx_Init();
 800169a:	f7ff feb7 	bl	800140c <SPIx_Init>

}
 800169e:	bf00      	nop
 80016a0:	3728      	adds	r7, #40	; 0x28
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40021000 	.word	0x40021000
 80016ac:	48001000 	.word	0x48001000
 80016b0:	48000800 	.word	0x48000800
 80016b4:	48000c00 	.word	0x48000c00
 80016b8:	48000400 	.word	0x48000400

080016bc <GYRO_IO_Write>:
  * @param  WriteAddr : GYRO's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  * @retval None
  */
void GYRO_IO_Write(uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	460b      	mov	r3, r1
 80016c6:	70fb      	strb	r3, [r7, #3]
 80016c8:	4613      	mov	r3, r2
 80016ca:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit:
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if (NumByteToWrite > 0x01)
 80016cc:	883b      	ldrh	r3, [r7, #0]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d903      	bls.n	80016da <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 80016d2:	78fb      	ldrb	r3, [r7, #3]
 80016d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016d8:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 80016da:	2200      	movs	r2, #0
 80016dc:	2180      	movs	r1, #128	; 0x80
 80016de:	4813      	ldr	r0, [pc, #76]	; (800172c <GYRO_IO_Write+0x70>)
 80016e0:	f001 fa1e 	bl	8002b20 <HAL_GPIO_WritePin>
  __SPI_DIRECTION_2LINES(&SpiHandle);
 80016e4:	4b12      	ldr	r3, [pc, #72]	; (8001730 <GYRO_IO_Write+0x74>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	4b11      	ldr	r3, [pc, #68]	; (8001730 <GYRO_IO_Write+0x74>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f422 4244 	bic.w	r2, r2, #50176	; 0xc400
 80016f2:	601a      	str	r2, [r3, #0]

  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 80016f4:	78fb      	ldrb	r3, [r7, #3]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff fef8 	bl	80014ec <SPIx_WriteRead>

  /* Send the data that will be written into the device (MSB First) */
  while (NumByteToWrite >= 0x01)
 80016fc:	e00a      	b.n	8001714 <GYRO_IO_Write+0x58>
  {
    SPIx_WriteRead(*pBuffer);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff fef2 	bl	80014ec <SPIx_WriteRead>
    NumByteToWrite--;
 8001708:	883b      	ldrh	r3, [r7, #0]
 800170a:	3b01      	subs	r3, #1
 800170c:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	3301      	adds	r3, #1
 8001712:	607b      	str	r3, [r7, #4]
  while (NumByteToWrite >= 0x01)
 8001714:	883b      	ldrh	r3, [r7, #0]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1f1      	bne.n	80016fe <GYRO_IO_Write+0x42>
  }

  /* Set chip select High at the end of the transmission */
  GYRO_CS_HIGH();
 800171a:	2201      	movs	r2, #1
 800171c:	2180      	movs	r1, #128	; 0x80
 800171e:	4803      	ldr	r0, [pc, #12]	; (800172c <GYRO_IO_Write+0x70>)
 8001720:	f001 f9fe 	bl	8002b20 <HAL_GPIO_WritePin>
}
 8001724:	bf00      	nop
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	48000c00 	.word	0x48000c00
 8001730:	200001e0 	.word	0x200001e0

08001734 <GYRO_IO_Read>:
  * @param  ReadAddr : GYROSCOPE's internal address to read from.
  * @param  NumByteToRead : number of bytes to read from the GYROSCOPE.
  * @retval None
  */
void GYRO_IO_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	460b      	mov	r3, r1
 800173e:	70fb      	strb	r3, [r7, #3]
 8001740:	4613      	mov	r3, r2
 8001742:	803b      	strh	r3, [r7, #0]
  if (NumByteToRead > 0x01)
 8001744:	883b      	ldrh	r3, [r7, #0]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d904      	bls.n	8001754 <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 800174a:	78fb      	ldrb	r3, [r7, #3]
 800174c:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001750:	70fb      	strb	r3, [r7, #3]
 8001752:	e003      	b.n	800175c <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8001754:	78fb      	ldrb	r3, [r7, #3]
 8001756:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800175a:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 800175c:	2200      	movs	r2, #0
 800175e:	2180      	movs	r1, #128	; 0x80
 8001760:	4814      	ldr	r0, [pc, #80]	; (80017b4 <GYRO_IO_Read+0x80>)
 8001762:	f001 f9dd 	bl	8002b20 <HAL_GPIO_WritePin>
  __SPI_DIRECTION_2LINES(&SpiHandle);
 8001766:	4b14      	ldr	r3, [pc, #80]	; (80017b8 <GYRO_IO_Read+0x84>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	4b12      	ldr	r3, [pc, #72]	; (80017b8 <GYRO_IO_Read+0x84>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f422 4244 	bic.w	r2, r2, #50176	; 0xc400
 8001774:	601a      	str	r2, [r3, #0]
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 8001776:	78fb      	ldrb	r3, [r7, #3]
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff feb7 	bl	80014ec <SPIx_WriteRead>

  /* Receive the data that will be read from the device (MSB First) */
  while (NumByteToRead > 0x00)
 800177e:	e00c      	b.n	800179a <GYRO_IO_Read+0x66>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to GYROSCOPE (Slave device) */
    *pBuffer = SPIx_WriteRead(0x00);
 8001780:	2000      	movs	r0, #0
 8001782:	f7ff feb3 	bl	80014ec <SPIx_WriteRead>
 8001786:	4603      	mov	r3, r0
 8001788:	461a      	mov	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 800178e:	883b      	ldrh	r3, [r7, #0]
 8001790:	3b01      	subs	r3, #1
 8001792:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3301      	adds	r3, #1
 8001798:	607b      	str	r3, [r7, #4]
  while (NumByteToRead > 0x00)
 800179a:	883b      	ldrh	r3, [r7, #0]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d1ef      	bne.n	8001780 <GYRO_IO_Read+0x4c>
  }

  /* Set chip select High at the end of the transmission */
  GYRO_CS_HIGH();
 80017a0:	2201      	movs	r2, #1
 80017a2:	2180      	movs	r1, #128	; 0x80
 80017a4:	4803      	ldr	r0, [pc, #12]	; (80017b4 <GYRO_IO_Read+0x80>)
 80017a6:	f001 f9bb 	bl	8002b20 <HAL_GPIO_WritePin>
}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	48000c00 	.word	0x48000c00
 80017b8:	200001e0 	.word	0x200001e0

080017bc <BSP_LCD_GLASS_Init>:
/**
  * @brief  Initialize the LCD GLASS relative GPIO port IOs and LCD peripheral.
  * @retval None
  */
void BSP_LCD_GLASS_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  LCDHandle.Instance              = LCD;
 80017c0:	4b19      	ldr	r3, [pc, #100]	; (8001828 <BSP_LCD_GLASS_Init+0x6c>)
 80017c2:	4a1a      	ldr	r2, [pc, #104]	; (800182c <BSP_LCD_GLASS_Init+0x70>)
 80017c4:	601a      	str	r2, [r3, #0]
  LCDHandle.Init.Prescaler        = LCD_PRESCALER_1;
 80017c6:	4b18      	ldr	r3, [pc, #96]	; (8001828 <BSP_LCD_GLASS_Init+0x6c>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	605a      	str	r2, [r3, #4]
  LCDHandle.Init.Divider          = LCD_DIVIDER_31;
 80017cc:	4b16      	ldr	r3, [pc, #88]	; (8001828 <BSP_LCD_GLASS_Init+0x6c>)
 80017ce:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80017d2:	609a      	str	r2, [r3, #8]
#if defined (USE_STM32L476G_DISCO_REVC) || defined (USE_STM32L476G_DISCO_REVB)
  LCDHandle.Init.Duty             = LCD_DUTY_1_4;
 80017d4:	4b14      	ldr	r3, [pc, #80]	; (8001828 <BSP_LCD_GLASS_Init+0x6c>)
 80017d6:	220c      	movs	r2, #12
 80017d8:	60da      	str	r2, [r3, #12]
#elif defined (USE_STM32L476G_DISCO_REVA)
  LCDHandle.Init.Duty             = LCD_DUTY_1_8;
#endif
  LCDHandle.Init.Bias             = LCD_BIAS_1_3;
 80017da:	4b13      	ldr	r3, [pc, #76]	; (8001828 <BSP_LCD_GLASS_Init+0x6c>)
 80017dc:	2240      	movs	r2, #64	; 0x40
 80017de:	611a      	str	r2, [r3, #16]
  LCDHandle.Init.VoltageSource    = LCD_VOLTAGESOURCE_INTERNAL;
 80017e0:	4b11      	ldr	r3, [pc, #68]	; (8001828 <BSP_LCD_GLASS_Init+0x6c>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	615a      	str	r2, [r3, #20]
  LCDHandle.Init.Contrast         = LCD_CONTRASTLEVEL_5;
 80017e6:	4b10      	ldr	r3, [pc, #64]	; (8001828 <BSP_LCD_GLASS_Init+0x6c>)
 80017e8:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80017ec:	619a      	str	r2, [r3, #24]
  LCDHandle.Init.DeadTime         = LCD_DEADTIME_0;
 80017ee:	4b0e      	ldr	r3, [pc, #56]	; (8001828 <BSP_LCD_GLASS_Init+0x6c>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	61da      	str	r2, [r3, #28]
  LCDHandle.Init.PulseOnDuration  = LCD_PULSEONDURATION_4;
 80017f4:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <BSP_LCD_GLASS_Init+0x6c>)
 80017f6:	2240      	movs	r2, #64	; 0x40
 80017f8:	621a      	str	r2, [r3, #32]
  LCDHandle.Init.HighDrive        = LCD_HIGHDRIVE_DISABLE;
 80017fa:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <BSP_LCD_GLASS_Init+0x6c>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	625a      	str	r2, [r3, #36]	; 0x24
  LCDHandle.Init.BlinkMode        = LCD_BLINKMODE_OFF;
 8001800:	4b09      	ldr	r3, [pc, #36]	; (8001828 <BSP_LCD_GLASS_Init+0x6c>)
 8001802:	2200      	movs	r2, #0
 8001804:	629a      	str	r2, [r3, #40]	; 0x28
  LCDHandle.Init.BlinkFrequency   = LCD_BLINKFREQUENCY_DIV32;
 8001806:	4b08      	ldr	r3, [pc, #32]	; (8001828 <BSP_LCD_GLASS_Init+0x6c>)
 8001808:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800180c:	62da      	str	r2, [r3, #44]	; 0x2c
  LCDHandle.Init.MuxSegment       = LCD_MUXSEGMENT_DISABLE;
 800180e:	4b06      	ldr	r3, [pc, #24]	; (8001828 <BSP_LCD_GLASS_Init+0x6c>)
 8001810:	2200      	movs	r2, #0
 8001812:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the LCD */
  LCD_MspInit(&LCDHandle);
 8001814:	4804      	ldr	r0, [pc, #16]	; (8001828 <BSP_LCD_GLASS_Init+0x6c>)
 8001816:	f000 f831 	bl	800187c <LCD_MspInit>
  HAL_LCD_Init(&LCDHandle);
 800181a:	4803      	ldr	r0, [pc, #12]	; (8001828 <BSP_LCD_GLASS_Init+0x6c>)
 800181c:	f001 f998 	bl	8002b50 <HAL_LCD_Init>

  BSP_LCD_GLASS_Clear();
 8001820:	f000 f822 	bl	8001868 <BSP_LCD_GLASS_Clear>
}
 8001824:	bf00      	nop
 8001826:	bd80      	pop	{r7, pc}
 8001828:	20000244 	.word	0x20000244
 800182c:	40002400 	.word	0x40002400

08001830 <BSP_LCD_GLASS_DisplayChar>:
  * @retval None
  * @note   Required preconditions: The LCD should be cleared before to start the
  *         write operation.
  */
void BSP_LCD_GLASS_DisplayChar(uint8_t *ch, Point_Typedef Point, DoublePoint_Typedef Colon, DigitPosition_Typedef Position)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	4608      	mov	r0, r1
 800183a:	4611      	mov	r1, r2
 800183c:	461a      	mov	r2, r3
 800183e:	4603      	mov	r3, r0
 8001840:	70fb      	strb	r3, [r7, #3]
 8001842:	460b      	mov	r3, r1
 8001844:	70bb      	strb	r3, [r7, #2]
 8001846:	4613      	mov	r3, r2
 8001848:	707b      	strb	r3, [r7, #1]
  WriteChar(ch, Point, Colon, Position);
 800184a:	787b      	ldrb	r3, [r7, #1]
 800184c:	78ba      	ldrb	r2, [r7, #2]
 800184e:	78f9      	ldrb	r1, [r7, #3]
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f000 fa1f 	bl	8001c94 <WriteChar>

  /* Update the LCD display */
  HAL_LCD_UpdateDisplayRequest(&LCDHandle);
 8001856:	4803      	ldr	r0, [pc, #12]	; (8001864 <BSP_LCD_GLASS_DisplayChar+0x34>)
 8001858:	f001 faeb 	bl	8002e32 <HAL_LCD_UpdateDisplayRequest>
}
 800185c:	bf00      	nop
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	20000244 	.word	0x20000244

08001868 <BSP_LCD_GLASS_Clear>:
/**
  * @brief  Clear the whole LCD RAM buffer.
  * @retval None
  */
void BSP_LCD_GLASS_Clear(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  HAL_LCD_Clear(&LCDHandle);
 800186c:	4802      	ldr	r0, [pc, #8]	; (8001878 <BSP_LCD_GLASS_Clear+0x10>)
 800186e:	f001 fa8a 	bl	8002d86 <HAL_LCD_Clear>
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20000244 	.word	0x20000244

0800187c <LCD_MspInit>:
  * @brief  Initialize the LCD MSP.
  * @param  hlcd: LCD handle
  * @retval None
  */
static void LCD_MspInit(LCD_HandleTypeDef *hlcd)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b0c0      	sub	sp, #256	; 0x100
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8001884:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	60da      	str	r2, [r3, #12]
 8001892:	611a      	str	r2, [r3, #16]
  RCC_OscInitTypeDef oscinitstruct = {0};
 8001894:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001898:	2244      	movs	r2, #68	; 0x44
 800189a:	2100      	movs	r1, #0
 800189c:	4618      	mov	r0, r3
 800189e:	f004 f9f0 	bl	8005c82 <memset>
  RCC_PeriphCLKInitTypeDef periphclkstruct = {0};
 80018a2:	f107 0320 	add.w	r3, r7, #32
 80018a6:	2288      	movs	r2, #136	; 0x88
 80018a8:	2100      	movs	r1, #0
 80018aa:	4618      	mov	r0, r3
 80018ac:	f004 f9e9 	bl	8005c82 <memset>

  /*##-1- Enable PWR  peripheral Clock #######################################*/
  __HAL_RCC_PWR_CLK_ENABLE();
 80018b0:	4b51      	ldr	r3, [pc, #324]	; (80019f8 <LCD_MspInit+0x17c>)
 80018b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b4:	4a50      	ldr	r2, [pc, #320]	; (80019f8 <LCD_MspInit+0x17c>)
 80018b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ba:	6593      	str	r3, [r2, #88]	; 0x58
 80018bc:	4b4e      	ldr	r3, [pc, #312]	; (80019f8 <LCD_MspInit+0x17c>)
 80018be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c4:	61fb      	str	r3, [r7, #28]
 80018c6:	69fb      	ldr	r3, [r7, #28]

  /*##-2- Configure LSE as RTC clock source ###################################*/
  oscinitstruct.OscillatorType  = RCC_OSCILLATORTYPE_LSE;
 80018c8:	2304      	movs	r3, #4
 80018ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  oscinitstruct.PLL.PLLState    = RCC_PLL_NONE;
 80018ce:	2300      	movs	r3, #0
 80018d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  oscinitstruct.LSEState        = RCC_LSE_ON;
 80018d4:	2301      	movs	r3, #1
 80018d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (HAL_RCC_OscConfig(&oscinitstruct) != HAL_OK)
 80018da:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80018de:	4618      	mov	r0, r3
 80018e0:	f001 fb66 	bl	8002fb0 <HAL_RCC_OscConfig>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d000      	beq.n	80018ec <LCD_MspInit+0x70>
  {
    while (1);
 80018ea:	e7fe      	b.n	80018ea <LCD_MspInit+0x6e>
  }

  /*##-3- Select LSE as RTC clock source.##########################*/
  /* Backup domain management is done in RCC function */
  periphclkstruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80018ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018f0:	623b      	str	r3, [r7, #32]
  periphclkstruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80018f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HAL_RCCEx_PeriphCLKConfig(&periphclkstruct);
 80018fa:	f107 0320 	add.w	r3, r7, #32
 80018fe:	4618      	mov	r0, r3
 8001900:	f002 f956 	bl	8003bb0 <HAL_RCCEx_PeriphCLKConfig>

  /*##-4- Enable LCD GPIO Clocks #############################################*/
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001904:	4b3c      	ldr	r3, [pc, #240]	; (80019f8 <LCD_MspInit+0x17c>)
 8001906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001908:	4a3b      	ldr	r2, [pc, #236]	; (80019f8 <LCD_MspInit+0x17c>)
 800190a:	f043 0301 	orr.w	r3, r3, #1
 800190e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001910:	4b39      	ldr	r3, [pc, #228]	; (80019f8 <LCD_MspInit+0x17c>)
 8001912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	61bb      	str	r3, [r7, #24]
 800191a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800191c:	4b36      	ldr	r3, [pc, #216]	; (80019f8 <LCD_MspInit+0x17c>)
 800191e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001920:	4a35      	ldr	r2, [pc, #212]	; (80019f8 <LCD_MspInit+0x17c>)
 8001922:	f043 0302 	orr.w	r3, r3, #2
 8001926:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001928:	4b33      	ldr	r3, [pc, #204]	; (80019f8 <LCD_MspInit+0x17c>)
 800192a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192c:	f003 0302 	and.w	r3, r3, #2
 8001930:	617b      	str	r3, [r7, #20]
 8001932:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001934:	4b30      	ldr	r3, [pc, #192]	; (80019f8 <LCD_MspInit+0x17c>)
 8001936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001938:	4a2f      	ldr	r2, [pc, #188]	; (80019f8 <LCD_MspInit+0x17c>)
 800193a:	f043 0304 	orr.w	r3, r3, #4
 800193e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001940:	4b2d      	ldr	r3, [pc, #180]	; (80019f8 <LCD_MspInit+0x17c>)
 8001942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001944:	f003 0304 	and.w	r3, r3, #4
 8001948:	613b      	str	r3, [r7, #16]
 800194a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800194c:	4b2a      	ldr	r3, [pc, #168]	; (80019f8 <LCD_MspInit+0x17c>)
 800194e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001950:	4a29      	ldr	r2, [pc, #164]	; (80019f8 <LCD_MspInit+0x17c>)
 8001952:	f043 0308 	orr.w	r3, r3, #8
 8001956:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001958:	4b27      	ldr	r3, [pc, #156]	; (80019f8 <LCD_MspInit+0x17c>)
 800195a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195c:	f003 0308 	and.w	r3, r3, #8
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	68fb      	ldr	r3, [r7, #12]


  /*##-5- Configure peripheral GPIO ##########################################*/
  /* Configure Output for LCD */
  /* Port A */
  gpioinitstruct.Pin        = LCD_GPIO_BANKA_PINS;
 8001964:	f248 73c0 	movw	r3, #34752	; 0x87c0
 8001968:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  gpioinitstruct.Mode       = GPIO_MODE_AF_PP;
 800196c:	2302      	movs	r3, #2
 800196e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  gpioinitstruct.Pull       = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  gpioinitstruct.Speed      = GPIO_SPEED_FREQ_VERY_HIGH;
 8001978:	2303      	movs	r3, #3
 800197a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  gpioinitstruct.Alternate  = GPIO_AF11_LCD;
 800197e:	230b      	movs	r3, #11
 8001980:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  HAL_GPIO_Init(GPIOA, &gpioinitstruct);
 8001984:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001988:	4619      	mov	r1, r3
 800198a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800198e:	f000 ff05 	bl	800279c <HAL_GPIO_Init>

  /* Port B */
  gpioinitstruct.Pin        = LCD_GPIO_BANKB_PINS;
 8001992:	f24f 2333 	movw	r3, #62003	; 0xf233
 8001996:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  HAL_GPIO_Init(GPIOB, &gpioinitstruct);
 800199a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800199e:	4619      	mov	r1, r3
 80019a0:	4816      	ldr	r0, [pc, #88]	; (80019fc <LCD_MspInit+0x180>)
 80019a2:	f000 fefb 	bl	800279c <HAL_GPIO_Init>

  /* Port C*/
  gpioinitstruct.Pin        = LCD_GPIO_BANKC_PINS;
 80019a6:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 80019aa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 80019ae:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80019b2:	4619      	mov	r1, r3
 80019b4:	4812      	ldr	r0, [pc, #72]	; (8001a00 <LCD_MspInit+0x184>)
 80019b6:	f000 fef1 	bl	800279c <HAL_GPIO_Init>

  /* Port D */
  gpioinitstruct.Pin        = LCD_GPIO_BANKD_PINS;
 80019ba:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80019be:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 80019c2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80019c6:	4619      	mov	r1, r3
 80019c8:	480e      	ldr	r0, [pc, #56]	; (8001a04 <LCD_MspInit+0x188>)
 80019ca:	f000 fee7 	bl	800279c <HAL_GPIO_Init>

  /* Wait for the external capacitor Cext which is connected to the VLCD pin is charged
  (approximately 2ms for Cext=1uF) */
  HAL_Delay(2);
 80019ce:	2002      	movs	r0, #2
 80019d0:	f000 fdda 	bl	8002588 <HAL_Delay>

  /*##-6- Enable LCD peripheral Clock ########################################*/
  __HAL_RCC_LCD_CLK_ENABLE();
 80019d4:	4b08      	ldr	r3, [pc, #32]	; (80019f8 <LCD_MspInit+0x17c>)
 80019d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d8:	4a07      	ldr	r2, [pc, #28]	; (80019f8 <LCD_MspInit+0x17c>)
 80019da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019de:	6593      	str	r3, [r2, #88]	; 0x58
 80019e0:	4b05      	ldr	r3, [pc, #20]	; (80019f8 <LCD_MspInit+0x17c>)
 80019e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019e8:	60bb      	str	r3, [r7, #8]
 80019ea:	68bb      	ldr	r3, [r7, #8]
}
 80019ec:	bf00      	nop
 80019ee:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40021000 	.word	0x40021000
 80019fc:	48000400 	.word	0x48000400
 8001a00:	48000800 	.word	0x48000800
 8001a04:	48000c00 	.word	0x48000c00

08001a08 <Convert>:
  *         of displayed character.
  *         This parameter can be: DOUBLEPOINT_OFF or DOUBLEPOINT_ON.
  * @retval None
  */
static void Convert(uint8_t *Char, Point_Typedef Point, DoublePoint_Typedef Colon)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	460b      	mov	r3, r1
 8001a12:	70fb      	strb	r3, [r7, #3]
 8001a14:	4613      	mov	r3, r2
 8001a16:	70bb      	strb	r3, [r7, #2]
  uint16_t ch = 0 ;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	81fb      	strh	r3, [r7, #14]
  uint8_t loop = 0, index = 0;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	737b      	strb	r3, [r7, #13]
 8001a20:	2300      	movs	r3, #0
 8001a22:	733b      	strb	r3, [r7, #12]

  switch (*Char)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b6e      	cmp	r3, #110	; 0x6e
 8001a2a:	f300 80a9 	bgt.w	8001b80 <Convert+0x178>
 8001a2e:	2b20      	cmp	r3, #32
 8001a30:	f2c0 80dd 	blt.w	8001bee <Convert+0x1e6>
 8001a34:	3b20      	subs	r3, #32
 8001a36:	2b4e      	cmp	r3, #78	; 0x4e
 8001a38:	f200 80d9 	bhi.w	8001bee <Convert+0x1e6>
 8001a3c:	a201      	add	r2, pc, #4	; (adr r2, 8001a44 <Convert+0x3c>)
 8001a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a42:	bf00      	nop
 8001a44:	08001b87 	.word	0x08001b87
 8001a48:	08001bef 	.word	0x08001bef
 8001a4c:	08001bef 	.word	0x08001bef
 8001a50:	08001bef 	.word	0x08001bef
 8001a54:	08001bef 	.word	0x08001bef
 8001a58:	08001bcf 	.word	0x08001bcf
 8001a5c:	08001bef 	.word	0x08001bef
 8001a60:	08001bef 	.word	0x08001bef
 8001a64:	08001b95 	.word	0x08001b95
 8001a68:	08001b9b 	.word	0x08001b9b
 8001a6c:	08001b8d 	.word	0x08001b8d
 8001a70:	08001bc1 	.word	0x08001bc1
 8001a74:	08001bef 	.word	0x08001bef
 8001a78:	08001bb9 	.word	0x08001bb9
 8001a7c:	08001bef 	.word	0x08001bef
 8001a80:	08001bc9 	.word	0x08001bc9
 8001a84:	08001bdf 	.word	0x08001bdf
 8001a88:	08001bdf 	.word	0x08001bdf
 8001a8c:	08001bdf 	.word	0x08001bdf
 8001a90:	08001bdf 	.word	0x08001bdf
 8001a94:	08001bdf 	.word	0x08001bdf
 8001a98:	08001bdf 	.word	0x08001bdf
 8001a9c:	08001bdf 	.word	0x08001bdf
 8001aa0:	08001bdf 	.word	0x08001bdf
 8001aa4:	08001bdf 	.word	0x08001bdf
 8001aa8:	08001bdf 	.word	0x08001bdf
 8001aac:	08001bef 	.word	0x08001bef
 8001ab0:	08001bef 	.word	0x08001bef
 8001ab4:	08001bef 	.word	0x08001bef
 8001ab8:	08001bef 	.word	0x08001bef
 8001abc:	08001bef 	.word	0x08001bef
 8001ac0:	08001bef 	.word	0x08001bef
 8001ac4:	08001bef 	.word	0x08001bef
 8001ac8:	08001bef 	.word	0x08001bef
 8001acc:	08001bef 	.word	0x08001bef
 8001ad0:	08001bef 	.word	0x08001bef
 8001ad4:	08001bef 	.word	0x08001bef
 8001ad8:	08001bef 	.word	0x08001bef
 8001adc:	08001bef 	.word	0x08001bef
 8001ae0:	08001bef 	.word	0x08001bef
 8001ae4:	08001bef 	.word	0x08001bef
 8001ae8:	08001bef 	.word	0x08001bef
 8001aec:	08001bef 	.word	0x08001bef
 8001af0:	08001bef 	.word	0x08001bef
 8001af4:	08001bef 	.word	0x08001bef
 8001af8:	08001bef 	.word	0x08001bef
 8001afc:	08001bef 	.word	0x08001bef
 8001b00:	08001bef 	.word	0x08001bef
 8001b04:	08001bef 	.word	0x08001bef
 8001b08:	08001bef 	.word	0x08001bef
 8001b0c:	08001bef 	.word	0x08001bef
 8001b10:	08001bef 	.word	0x08001bef
 8001b14:	08001bef 	.word	0x08001bef
 8001b18:	08001bef 	.word	0x08001bef
 8001b1c:	08001bef 	.word	0x08001bef
 8001b20:	08001bef 	.word	0x08001bef
 8001b24:	08001bef 	.word	0x08001bef
 8001b28:	08001bef 	.word	0x08001bef
 8001b2c:	08001bef 	.word	0x08001bef
 8001b30:	08001bef 	.word	0x08001bef
 8001b34:	08001bef 	.word	0x08001bef
 8001b38:	08001bef 	.word	0x08001bef
 8001b3c:	08001bef 	.word	0x08001bef
 8001b40:	08001bef 	.word	0x08001bef
 8001b44:	08001bef 	.word	0x08001bef
 8001b48:	08001bef 	.word	0x08001bef
 8001b4c:	08001bef 	.word	0x08001bef
 8001b50:	08001bef 	.word	0x08001bef
 8001b54:	08001ba1 	.word	0x08001ba1
 8001b58:	08001bef 	.word	0x08001bef
 8001b5c:	08001bef 	.word	0x08001bef
 8001b60:	08001bef 	.word	0x08001bef
 8001b64:	08001bef 	.word	0x08001bef
 8001b68:	08001bef 	.word	0x08001bef
 8001b6c:	08001bef 	.word	0x08001bef
 8001b70:	08001bef 	.word	0x08001bef
 8001b74:	08001bef 	.word	0x08001bef
 8001b78:	08001ba9 	.word	0x08001ba9
 8001b7c:	08001bb1 	.word	0x08001bb1
 8001b80:	2bff      	cmp	r3, #255	; 0xff
 8001b82:	d028      	beq.n	8001bd6 <Convert+0x1ce>
 8001b84:	e033      	b.n	8001bee <Convert+0x1e6>
  {
    case ' ' :
      ch = 0x00;
 8001b86:	2300      	movs	r3, #0
 8001b88:	81fb      	strh	r3, [r7, #14]
      break;
 8001b8a:	e04f      	b.n	8001c2c <Convert+0x224>

    case '*':
      ch = C_STAR;
 8001b8c:	f24a 03dd 	movw	r3, #41181	; 0xa0dd
 8001b90:	81fb      	strh	r3, [r7, #14]
      break;
 8001b92:	e04b      	b.n	8001c2c <Convert+0x224>

    case '(' :
      ch = C_OPENPARMAP;
 8001b94:	2328      	movs	r3, #40	; 0x28
 8001b96:	81fb      	strh	r3, [r7, #14]
      break;
 8001b98:	e048      	b.n	8001c2c <Convert+0x224>

    case ')' :
      ch = C_CLOSEPARMAP;
 8001b9a:	2311      	movs	r3, #17
 8001b9c:	81fb      	strh	r3, [r7, #14]
      break;
 8001b9e:	e045      	b.n	8001c2c <Convert+0x224>

    case 'd' :
      ch = C_DMAP;
 8001ba0:	f44f 4373 	mov.w	r3, #62208	; 0xf300
 8001ba4:	81fb      	strh	r3, [r7, #14]
      break;
 8001ba6:	e041      	b.n	8001c2c <Convert+0x224>

    case 'm' :
      ch = C_MMAP;
 8001ba8:	f24b 2310 	movw	r3, #45584	; 0xb210
 8001bac:	81fb      	strh	r3, [r7, #14]
      break;
 8001bae:	e03d      	b.n	8001c2c <Convert+0x224>

    case 'n' :
      ch = C_NMAP;
 8001bb0:	f242 2310 	movw	r3, #8720	; 0x2210
 8001bb4:	81fb      	strh	r3, [r7, #14]
      break;
 8001bb6:	e039      	b.n	8001c2c <Convert+0x224>
    //case '�' :
    //  ch = C_UMAP;
    //  break;

    case '-' :
      ch = C_MINUS;
 8001bb8:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001bbc:	81fb      	strh	r3, [r7, #14]
      break;
 8001bbe:	e035      	b.n	8001c2c <Convert+0x224>

    case '+' :
      ch = C_PLUS;
 8001bc0:	f24a 0314 	movw	r3, #40980	; 0xa014
 8001bc4:	81fb      	strh	r3, [r7, #14]
      break;
 8001bc6:	e031      	b.n	8001c2c <Convert+0x224>

    case '/' :
      ch = C_SLATCH;
 8001bc8:	23c0      	movs	r3, #192	; 0xc0
 8001bca:	81fb      	strh	r3, [r7, #14]
      break;
 8001bcc:	e02e      	b.n	8001c2c <Convert+0x224>

    //case '�' :
    //  ch = C_PERCENT_1;
    //  break;
    case '%' :
      ch = C_PERCENT_2;
 8001bce:	f44f 4333 	mov.w	r3, #45824	; 0xb300
 8001bd2:	81fb      	strh	r3, [r7, #14]
      break;
 8001bd4:	e02a      	b.n	8001c2c <Convert+0x224>
    case 255 :
      ch = C_FULL;
 8001bd6:	f64f 73dd 	movw	r3, #65501	; 0xffdd
 8001bda:	81fb      	strh	r3, [r7, #14]
      break ;
 8001bdc:	e026      	b.n	8001c2c <Convert+0x224>
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
      ch = NumberMap[*Char - ASCII_CHAR_0];
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	3b30      	subs	r3, #48	; 0x30
 8001be4:	4a28      	ldr	r2, [pc, #160]	; (8001c88 <Convert+0x280>)
 8001be6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001bea:	81fb      	strh	r3, [r7, #14]
      break;
 8001bec:	e01e      	b.n	8001c2c <Convert+0x224>

    default:
      /* The character Char is one letter in upper case*/
      if ((*Char < ASCII_CHAR_LEFT_OPEN_BRACKET) && (*Char > ASCII_CHAR_AT_SYMBOL))
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	2b5a      	cmp	r3, #90	; 0x5a
 8001bf4:	d80a      	bhi.n	8001c0c <Convert+0x204>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	2b40      	cmp	r3, #64	; 0x40
 8001bfc:	d906      	bls.n	8001c0c <Convert+0x204>
      {
        ch = CapLetterMap[*Char - 'A'];
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	3b41      	subs	r3, #65	; 0x41
 8001c04:	4a21      	ldr	r2, [pc, #132]	; (8001c8c <Convert+0x284>)
 8001c06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c0a:	81fb      	strh	r3, [r7, #14]
      }
      /* The character Char is one letter in lower case*/
      if ((*Char < ASCII_CHAR_LEFT_OPEN_BRACE) && (*Char > ASCII_CHAR_APOSTROPHE))
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	2b7a      	cmp	r3, #122	; 0x7a
 8001c12:	d80a      	bhi.n	8001c2a <Convert+0x222>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	2b60      	cmp	r3, #96	; 0x60
 8001c1a:	d906      	bls.n	8001c2a <Convert+0x222>
      {
        ch = CapLetterMap[*Char - 'a'];
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	3b61      	subs	r3, #97	; 0x61
 8001c22:	4a1a      	ldr	r2, [pc, #104]	; (8001c8c <Convert+0x284>)
 8001c24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c28:	81fb      	strh	r3, [r7, #14]
      }
      break;
 8001c2a:	bf00      	nop
  }

  /* Set the digital point can be displayed if the point is on */
  if (Point == POINT_ON)
 8001c2c:	78fb      	ldrb	r3, [r7, #3]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d103      	bne.n	8001c3a <Convert+0x232>
  {
    ch |= 0x0002;
 8001c32:	89fb      	ldrh	r3, [r7, #14]
 8001c34:	f043 0302 	orr.w	r3, r3, #2
 8001c38:	81fb      	strh	r3, [r7, #14]
  }

  /* Set the "COL" segment in the character that can be displayed if the colon is on */
  if (Colon == DOUBLEPOINT_ON)
 8001c3a:	78bb      	ldrb	r3, [r7, #2]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d103      	bne.n	8001c48 <Convert+0x240>
  {
    ch |= 0x0020;
 8001c40:	89fb      	ldrh	r3, [r7, #14]
 8001c42:	f043 0320 	orr.w	r3, r3, #32
 8001c46:	81fb      	strh	r3, [r7, #14]
  }

  for (loop = 12, index = 0 ; index < 4; loop -= 4, index++)
 8001c48:	230c      	movs	r3, #12
 8001c4a:	737b      	strb	r3, [r7, #13]
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	733b      	strb	r3, [r7, #12]
 8001c50:	e010      	b.n	8001c74 <Convert+0x26c>
  {
    Digit[index] = (ch >> loop) & 0x0f; /*To isolate the less significant digit */
 8001c52:	89fa      	ldrh	r2, [r7, #14]
 8001c54:	7b7b      	ldrb	r3, [r7, #13]
 8001c56:	fa42 f303 	asr.w	r3, r2, r3
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	7b3b      	ldrb	r3, [r7, #12]
 8001c5e:	f002 020f 	and.w	r2, r2, #15
 8001c62:	490b      	ldr	r1, [pc, #44]	; (8001c90 <Convert+0x288>)
 8001c64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (loop = 12, index = 0 ; index < 4; loop -= 4, index++)
 8001c68:	7b7b      	ldrb	r3, [r7, #13]
 8001c6a:	3b04      	subs	r3, #4
 8001c6c:	737b      	strb	r3, [r7, #13]
 8001c6e:	7b3b      	ldrb	r3, [r7, #12]
 8001c70:	3301      	adds	r3, #1
 8001c72:	733b      	strb	r3, [r7, #12]
 8001c74:	7b3b      	ldrb	r3, [r7, #12]
 8001c76:	2b03      	cmp	r3, #3
 8001c78:	d9eb      	bls.n	8001c52 <Convert+0x24a>
  }
}
 8001c7a:	bf00      	nop
 8001c7c:	bf00      	nop
 8001c7e:	3714      	adds	r7, #20
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	08005d7c 	.word	0x08005d7c
 8001c8c:	08005d48 	.word	0x08005d48
 8001c90:	20000280 	.word	0x20000280

08001c94 <WriteChar>:
  *         This parameter can be: DOUBLEPOINT_OFF or DOUBLEPOINT_ON.
  * @param  Position: position in the LCD of the character to write [1:6]
  * @retval None
  */
static void WriteChar(uint8_t *ch, Point_Typedef Point, DoublePoint_Typedef Colon, DigitPosition_Typedef Position)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	4608      	mov	r0, r1
 8001c9e:	4611      	mov	r1, r2
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	70fb      	strb	r3, [r7, #3]
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	70bb      	strb	r3, [r7, #2]
 8001caa:	4613      	mov	r3, r2
 8001cac:	707b      	strb	r3, [r7, #1]
  uint32_t data = 0x00;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60fb      	str	r3, [r7, #12]
  /* To convert displayed character in segment in array digit */
  Convert(ch, (Point_Typedef)Point, (DoublePoint_Typedef)Colon);
 8001cb2:	78ba      	ldrb	r2, [r7, #2]
 8001cb4:	78fb      	ldrb	r3, [r7, #3]
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f7ff fea5 	bl	8001a08 <Convert>

  switch (Position)
 8001cbe:	787b      	ldrb	r3, [r7, #1]
 8001cc0:	2b05      	cmp	r3, #5
 8001cc2:	f200 835b 	bhi.w	800237c <WriteChar+0x6e8>
 8001cc6:	a201      	add	r2, pc, #4	; (adr r2, 8001ccc <WriteChar+0x38>)
 8001cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ccc:	08001ce5 	.word	0x08001ce5
 8001cd0:	08001ddf 	.word	0x08001ddf
 8001cd4:	08001ef9 	.word	0x08001ef9
 8001cd8:	08001ffb 	.word	0x08001ffb
 8001cdc:	08002129 	.word	0x08002129
 8001ce0:	08002273 	.word	0x08002273
  {
      /* Position 1 on LCD (Digit1)*/
    case LCD_DIGIT_POSITION_1:
      data = ((Digit[0] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8001ce4:	4b80      	ldr	r3, [pc, #512]	; (8001ee8 <WriteChar+0x254>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	011b      	lsls	r3, r3, #4
 8001cea:	f003 0210 	and.w	r2, r3, #16
 8001cee:	4b7e      	ldr	r3, [pc, #504]	; (8001ee8 <WriteChar+0x254>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	085b      	lsrs	r3, r3, #1
 8001cf4:	05db      	lsls	r3, r3, #23
 8001cf6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001cfa:	431a      	orrs	r2, r3
             | (((Digit[0] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG23_SHIFT);
 8001cfc:	4b7a      	ldr	r3, [pc, #488]	; (8001ee8 <WriteChar+0x254>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	089b      	lsrs	r3, r3, #2
 8001d02:	059b      	lsls	r3, r3, #22
 8001d04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d08:	431a      	orrs	r2, r3
 8001d0a:	4b77      	ldr	r3, [pc, #476]	; (8001ee8 <WriteChar+0x254>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0308 	and.w	r3, r3, #8
      data = ((Digit[0] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8001d12:	4313      	orrs	r3, r2
 8001d14:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT1_COM0, LCD_DIGIT1_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	4a74      	ldr	r2, [pc, #464]	; (8001eec <WriteChar+0x258>)
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	4874      	ldr	r0, [pc, #464]	; (8001ef0 <WriteChar+0x25c>)
 8001d1e:	f000 ffd7 	bl	8002cd0 <HAL_LCD_Write>

      data = ((Digit[1] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8001d22:	4b71      	ldr	r3, [pc, #452]	; (8001ee8 <WriteChar+0x254>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	011b      	lsls	r3, r3, #4
 8001d28:	f003 0210 	and.w	r2, r3, #16
 8001d2c:	4b6e      	ldr	r3, [pc, #440]	; (8001ee8 <WriteChar+0x254>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	085b      	lsrs	r3, r3, #1
 8001d32:	05db      	lsls	r3, r3, #23
 8001d34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d38:	431a      	orrs	r2, r3
             | (((Digit[1] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG23_SHIFT);
 8001d3a:	4b6b      	ldr	r3, [pc, #428]	; (8001ee8 <WriteChar+0x254>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	089b      	lsrs	r3, r3, #2
 8001d40:	059b      	lsls	r3, r3, #22
 8001d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d46:	431a      	orrs	r2, r3
 8001d48:	4b67      	ldr	r3, [pc, #412]	; (8001ee8 <WriteChar+0x254>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f003 0308 	and.w	r3, r3, #8
      data = ((Digit[1] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8001d50:	4313      	orrs	r3, r2
 8001d52:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT1_COM1, LCD_DIGIT1_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	4a65      	ldr	r2, [pc, #404]	; (8001eec <WriteChar+0x258>)
 8001d58:	2102      	movs	r1, #2
 8001d5a:	4865      	ldr	r0, [pc, #404]	; (8001ef0 <WriteChar+0x25c>)
 8001d5c:	f000 ffb8 	bl	8002cd0 <HAL_LCD_Write>

      data = ((Digit[2] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8001d60:	4b61      	ldr	r3, [pc, #388]	; (8001ee8 <WriteChar+0x254>)
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	011b      	lsls	r3, r3, #4
 8001d66:	f003 0210 	and.w	r2, r3, #16
 8001d6a:	4b5f      	ldr	r3, [pc, #380]	; (8001ee8 <WriteChar+0x254>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	085b      	lsrs	r3, r3, #1
 8001d70:	05db      	lsls	r3, r3, #23
 8001d72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d76:	431a      	orrs	r2, r3
             | (((Digit[2] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG23_SHIFT);
 8001d78:	4b5b      	ldr	r3, [pc, #364]	; (8001ee8 <WriteChar+0x254>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	089b      	lsrs	r3, r3, #2
 8001d7e:	059b      	lsls	r3, r3, #22
 8001d80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d84:	431a      	orrs	r2, r3
 8001d86:	4b58      	ldr	r3, [pc, #352]	; (8001ee8 <WriteChar+0x254>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f003 0308 	and.w	r3, r3, #8
      data = ((Digit[2] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT1_COM2, LCD_DIGIT1_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	4a55      	ldr	r2, [pc, #340]	; (8001eec <WriteChar+0x258>)
 8001d96:	2104      	movs	r1, #4
 8001d98:	4855      	ldr	r0, [pc, #340]	; (8001ef0 <WriteChar+0x25c>)
 8001d9a:	f000 ff99 	bl	8002cd0 <HAL_LCD_Write>

      data = ((Digit[3] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8001d9e:	4b52      	ldr	r3, [pc, #328]	; (8001ee8 <WriteChar+0x254>)
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	011b      	lsls	r3, r3, #4
 8001da4:	f003 0210 	and.w	r2, r3, #16
 8001da8:	4b4f      	ldr	r3, [pc, #316]	; (8001ee8 <WriteChar+0x254>)
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	085b      	lsrs	r3, r3, #1
 8001dae:	05db      	lsls	r3, r3, #23
 8001db0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001db4:	431a      	orrs	r2, r3
             | (((Digit[3] & 0x4) >> 2) << LCD_SEG22_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG23_SHIFT);
 8001db6:	4b4c      	ldr	r3, [pc, #304]	; (8001ee8 <WriteChar+0x254>)
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	089b      	lsrs	r3, r3, #2
 8001dbc:	059b      	lsls	r3, r3, #22
 8001dbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dc2:	431a      	orrs	r2, r3
 8001dc4:	4b48      	ldr	r3, [pc, #288]	; (8001ee8 <WriteChar+0x254>)
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	f003 0308 	and.w	r3, r3, #8
      data = ((Digit[3] & 0x1) << LCD_SEG0_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG1_SHIFT)
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT1_COM3, LCD_DIGIT1_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	4a46      	ldr	r2, [pc, #280]	; (8001eec <WriteChar+0x258>)
 8001dd4:	2106      	movs	r1, #6
 8001dd6:	4846      	ldr	r0, [pc, #280]	; (8001ef0 <WriteChar+0x25c>)
 8001dd8:	f000 ff7a 	bl	8002cd0 <HAL_LCD_Write>
      break;
 8001ddc:	e2cf      	b.n	800237e <WriteChar+0x6ea>

      /* Position 2 on LCD (Digit2)*/
    case LCD_DIGIT_POSITION_2:
      data = ((Digit[0] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8001dde:	4b42      	ldr	r3, [pc, #264]	; (8001ee8 <WriteChar+0x254>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	019b      	lsls	r3, r3, #6
 8001de4:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8001de8:	4b3f      	ldr	r3, [pc, #252]	; (8001ee8 <WriteChar+0x254>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	085b      	lsrs	r3, r3, #1
 8001dee:	035b      	lsls	r3, r3, #13
 8001df0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001df4:	431a      	orrs	r2, r3
             | (((Digit[0] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 8001df6:	4b3c      	ldr	r3, [pc, #240]	; (8001ee8 <WriteChar+0x254>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	089b      	lsrs	r3, r3, #2
 8001dfc:	031b      	lsls	r3, r3, #12
 8001dfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e02:	431a      	orrs	r2, r3
 8001e04:	4b38      	ldr	r3, [pc, #224]	; (8001ee8 <WriteChar+0x254>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	08db      	lsrs	r3, r3, #3
 8001e0a:	015b      	lsls	r3, r3, #5
 8001e0c:	f003 0320 	and.w	r3, r3, #32
      data = ((Digit[0] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM0, LCD_DIGIT2_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	4a37      	ldr	r2, [pc, #220]	; (8001ef4 <WriteChar+0x260>)
 8001e18:	2100      	movs	r1, #0
 8001e1a:	4835      	ldr	r0, [pc, #212]	; (8001ef0 <WriteChar+0x25c>)
 8001e1c:	f000 ff58 	bl	8002cd0 <HAL_LCD_Write>

      data = ((Digit[1] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8001e20:	4b31      	ldr	r3, [pc, #196]	; (8001ee8 <WriteChar+0x254>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	019b      	lsls	r3, r3, #6
 8001e26:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8001e2a:	4b2f      	ldr	r3, [pc, #188]	; (8001ee8 <WriteChar+0x254>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	085b      	lsrs	r3, r3, #1
 8001e30:	035b      	lsls	r3, r3, #13
 8001e32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e36:	431a      	orrs	r2, r3
             | (((Digit[1] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 8001e38:	4b2b      	ldr	r3, [pc, #172]	; (8001ee8 <WriteChar+0x254>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	089b      	lsrs	r3, r3, #2
 8001e3e:	031b      	lsls	r3, r3, #12
 8001e40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e44:	431a      	orrs	r2, r3
 8001e46:	4b28      	ldr	r3, [pc, #160]	; (8001ee8 <WriteChar+0x254>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	08db      	lsrs	r3, r3, #3
 8001e4c:	015b      	lsls	r3, r3, #5
 8001e4e:	f003 0320 	and.w	r3, r3, #32
      data = ((Digit[1] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8001e52:	4313      	orrs	r3, r2
 8001e54:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM1, LCD_DIGIT2_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	4a26      	ldr	r2, [pc, #152]	; (8001ef4 <WriteChar+0x260>)
 8001e5a:	2102      	movs	r1, #2
 8001e5c:	4824      	ldr	r0, [pc, #144]	; (8001ef0 <WriteChar+0x25c>)
 8001e5e:	f000 ff37 	bl	8002cd0 <HAL_LCD_Write>

      data = ((Digit[2] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8001e62:	4b21      	ldr	r3, [pc, #132]	; (8001ee8 <WriteChar+0x254>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	019b      	lsls	r3, r3, #6
 8001e68:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8001e6c:	4b1e      	ldr	r3, [pc, #120]	; (8001ee8 <WriteChar+0x254>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	085b      	lsrs	r3, r3, #1
 8001e72:	035b      	lsls	r3, r3, #13
 8001e74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e78:	431a      	orrs	r2, r3
             | (((Digit[2] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 8001e7a:	4b1b      	ldr	r3, [pc, #108]	; (8001ee8 <WriteChar+0x254>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	089b      	lsrs	r3, r3, #2
 8001e80:	031b      	lsls	r3, r3, #12
 8001e82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e86:	431a      	orrs	r2, r3
 8001e88:	4b17      	ldr	r3, [pc, #92]	; (8001ee8 <WriteChar+0x254>)
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	08db      	lsrs	r3, r3, #3
 8001e8e:	015b      	lsls	r3, r3, #5
 8001e90:	f003 0320 	and.w	r3, r3, #32
      data = ((Digit[2] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8001e94:	4313      	orrs	r3, r2
 8001e96:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM2, LCD_DIGIT2_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	4a16      	ldr	r2, [pc, #88]	; (8001ef4 <WriteChar+0x260>)
 8001e9c:	2104      	movs	r1, #4
 8001e9e:	4814      	ldr	r0, [pc, #80]	; (8001ef0 <WriteChar+0x25c>)
 8001ea0:	f000 ff16 	bl	8002cd0 <HAL_LCD_Write>

      data = ((Digit[3] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8001ea4:	4b10      	ldr	r3, [pc, #64]	; (8001ee8 <WriteChar+0x254>)
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	019b      	lsls	r3, r3, #6
 8001eaa:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8001eae:	4b0e      	ldr	r3, [pc, #56]	; (8001ee8 <WriteChar+0x254>)
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	085b      	lsrs	r3, r3, #1
 8001eb4:	035b      	lsls	r3, r3, #13
 8001eb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001eba:	431a      	orrs	r2, r3
             | (((Digit[3] & 0x4) >> 2) << LCD_SEG20_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG21_SHIFT);
 8001ebc:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <WriteChar+0x254>)
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	089b      	lsrs	r3, r3, #2
 8001ec2:	031b      	lsls	r3, r3, #12
 8001ec4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ec8:	431a      	orrs	r2, r3
 8001eca:	4b07      	ldr	r3, [pc, #28]	; (8001ee8 <WriteChar+0x254>)
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	08db      	lsrs	r3, r3, #3
 8001ed0:	015b      	lsls	r3, r3, #5
 8001ed2:	f003 0320 	and.w	r3, r3, #32
      data = ((Digit[3] & 0x1) << LCD_SEG2_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG3_SHIFT)
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT2_COM3, LCD_DIGIT2_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	4a05      	ldr	r2, [pc, #20]	; (8001ef4 <WriteChar+0x260>)
 8001ede:	2106      	movs	r1, #6
 8001ee0:	4803      	ldr	r0, [pc, #12]	; (8001ef0 <WriteChar+0x25c>)
 8001ee2:	f000 fef5 	bl	8002cd0 <HAL_LCD_Write>
      break;
 8001ee6:	e24a      	b.n	800237e <WriteChar+0x6ea>
 8001ee8:	20000280 	.word	0x20000280
 8001eec:	ff3fffe7 	.word	0xff3fffe7
 8001ef0:	20000244 	.word	0x20000244
 8001ef4:	ffffcf9f 	.word	0xffffcf9f

      /* Position 3 on LCD (Digit3)*/
    case LCD_DIGIT_POSITION_3:
      data = ((Digit[0] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8001ef8:	4b88      	ldr	r3, [pc, #544]	; (800211c <WriteChar+0x488>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	03db      	lsls	r3, r3, #15
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	4b86      	ldr	r3, [pc, #536]	; (800211c <WriteChar+0x488>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	085b      	lsrs	r3, r3, #1
 8001f06:	075b      	lsls	r3, r3, #29
 8001f08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f0c:	431a      	orrs	r2, r3
             | (((Digit[0] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 8001f0e:	4b83      	ldr	r3, [pc, #524]	; (800211c <WriteChar+0x488>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	089b      	lsrs	r3, r3, #2
 8001f14:	071b      	lsls	r3, r3, #28
 8001f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f1a:	431a      	orrs	r2, r3
 8001f1c:	4b7f      	ldr	r3, [pc, #508]	; (800211c <WriteChar+0x488>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	08db      	lsrs	r3, r3, #3
 8001f22:	039b      	lsls	r3, r3, #14
 8001f24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
      data = ((Digit[0] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT3_COM0, LCD_DIGIT3_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	4a7c      	ldr	r2, [pc, #496]	; (8002120 <WriteChar+0x48c>)
 8001f30:	2100      	movs	r1, #0
 8001f32:	487c      	ldr	r0, [pc, #496]	; (8002124 <WriteChar+0x490>)
 8001f34:	f000 fecc 	bl	8002cd0 <HAL_LCD_Write>

      data = ((Digit[1] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8001f38:	4b78      	ldr	r3, [pc, #480]	; (800211c <WriteChar+0x488>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	03db      	lsls	r3, r3, #15
 8001f3e:	b29a      	uxth	r2, r3
 8001f40:	4b76      	ldr	r3, [pc, #472]	; (800211c <WriteChar+0x488>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	085b      	lsrs	r3, r3, #1
 8001f46:	075b      	lsls	r3, r3, #29
 8001f48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f4c:	431a      	orrs	r2, r3
             | (((Digit[1] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 8001f4e:	4b73      	ldr	r3, [pc, #460]	; (800211c <WriteChar+0x488>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	089b      	lsrs	r3, r3, #2
 8001f54:	071b      	lsls	r3, r3, #28
 8001f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5a:	431a      	orrs	r2, r3
 8001f5c:	4b6f      	ldr	r3, [pc, #444]	; (800211c <WriteChar+0x488>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	08db      	lsrs	r3, r3, #3
 8001f62:	039b      	lsls	r3, r3, #14
 8001f64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
      data = ((Digit[1] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT3_COM1, LCD_DIGIT3_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	4a6c      	ldr	r2, [pc, #432]	; (8002120 <WriteChar+0x48c>)
 8001f70:	2102      	movs	r1, #2
 8001f72:	486c      	ldr	r0, [pc, #432]	; (8002124 <WriteChar+0x490>)
 8001f74:	f000 feac 	bl	8002cd0 <HAL_LCD_Write>

      data = ((Digit[2] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8001f78:	4b68      	ldr	r3, [pc, #416]	; (800211c <WriteChar+0x488>)
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	03db      	lsls	r3, r3, #15
 8001f7e:	b29a      	uxth	r2, r3
 8001f80:	4b66      	ldr	r3, [pc, #408]	; (800211c <WriteChar+0x488>)
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	085b      	lsrs	r3, r3, #1
 8001f86:	075b      	lsls	r3, r3, #29
 8001f88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f8c:	431a      	orrs	r2, r3
             | (((Digit[2] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 8001f8e:	4b63      	ldr	r3, [pc, #396]	; (800211c <WriteChar+0x488>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	089b      	lsrs	r3, r3, #2
 8001f94:	071b      	lsls	r3, r3, #28
 8001f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f9a:	431a      	orrs	r2, r3
 8001f9c:	4b5f      	ldr	r3, [pc, #380]	; (800211c <WriteChar+0x488>)
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	08db      	lsrs	r3, r3, #3
 8001fa2:	039b      	lsls	r3, r3, #14
 8001fa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
      data = ((Digit[2] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT3_COM2, LCD_DIGIT3_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	4a5c      	ldr	r2, [pc, #368]	; (8002120 <WriteChar+0x48c>)
 8001fb0:	2104      	movs	r1, #4
 8001fb2:	485c      	ldr	r0, [pc, #368]	; (8002124 <WriteChar+0x490>)
 8001fb4:	f000 fe8c 	bl	8002cd0 <HAL_LCD_Write>

      data = ((Digit[3] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8001fb8:	4b58      	ldr	r3, [pc, #352]	; (800211c <WriteChar+0x488>)
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	03db      	lsls	r3, r3, #15
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	4b56      	ldr	r3, [pc, #344]	; (800211c <WriteChar+0x488>)
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	085b      	lsrs	r3, r3, #1
 8001fc6:	075b      	lsls	r3, r3, #29
 8001fc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001fcc:	431a      	orrs	r2, r3
             | (((Digit[3] & 0x4) >> 2) << LCD_SEG18_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG19_SHIFT);
 8001fce:	4b53      	ldr	r3, [pc, #332]	; (800211c <WriteChar+0x488>)
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	089b      	lsrs	r3, r3, #2
 8001fd4:	071b      	lsls	r3, r3, #28
 8001fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	4b4f      	ldr	r3, [pc, #316]	; (800211c <WriteChar+0x488>)
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	08db      	lsrs	r3, r3, #3
 8001fe2:	039b      	lsls	r3, r3, #14
 8001fe4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
      data = ((Digit[3] & 0x1) << LCD_SEG4_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG5_SHIFT)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT3_COM3, LCD_DIGIT3_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	4a4c      	ldr	r2, [pc, #304]	; (8002120 <WriteChar+0x48c>)
 8001ff0:	2106      	movs	r1, #6
 8001ff2:	484c      	ldr	r0, [pc, #304]	; (8002124 <WriteChar+0x490>)
 8001ff4:	f000 fe6c 	bl	8002cd0 <HAL_LCD_Write>
      break;
 8001ff8:	e1c1      	b.n	800237e <WriteChar+0x6ea>

      /* Position 4 on LCD (Digit4)*/
    case LCD_DIGIT_POSITION_4:
      data = ((Digit[0] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG17_SHIFT);
 8001ffa:	4b48      	ldr	r3, [pc, #288]	; (800211c <WriteChar+0x488>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	07da      	lsls	r2, r3, #31
 8002000:	4b46      	ldr	r3, [pc, #280]	; (800211c <WriteChar+0x488>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	08db      	lsrs	r3, r3, #3
 8002006:	079b      	lsls	r3, r3, #30
 8002008:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800200c:	4313      	orrs	r3, r2
 800200e:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM0, LCD_DIGIT4_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8002016:	2100      	movs	r1, #0
 8002018:	4842      	ldr	r0, [pc, #264]	; (8002124 <WriteChar+0x490>)
 800201a:	f000 fe59 	bl	8002cd0 <HAL_LCD_Write>

      data = (((Digit[0] & 0x2) >> 1) << LCD_SEG7_SHIFT) | (((Digit[0] & 0x4) >> 2) << LCD_SEG16_SHIFT);
 800201e:	4b3f      	ldr	r3, [pc, #252]	; (800211c <WriteChar+0x488>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0202 	and.w	r2, r3, #2
 8002026:	4b3d      	ldr	r3, [pc, #244]	; (800211c <WriteChar+0x488>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	089b      	lsrs	r3, r3, #2
 800202c:	f003 0301 	and.w	r3, r3, #1
 8002030:	4313      	orrs	r3, r2
 8002032:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM0_1, LCD_DIGIT4_COM0_1_SEG_MASK, data); /* 1G 1B 1M 1E */
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f06f 0203 	mvn.w	r2, #3
 800203a:	2101      	movs	r1, #1
 800203c:	4839      	ldr	r0, [pc, #228]	; (8002124 <WriteChar+0x490>)
 800203e:	f000 fe47 	bl	8002cd0 <HAL_LCD_Write>

      data = ((Digit[1] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG17_SHIFT);
 8002042:	4b36      	ldr	r3, [pc, #216]	; (800211c <WriteChar+0x488>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	07da      	lsls	r2, r3, #31
 8002048:	4b34      	ldr	r3, [pc, #208]	; (800211c <WriteChar+0x488>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	08db      	lsrs	r3, r3, #3
 800204e:	079b      	lsls	r3, r3, #30
 8002050:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002054:	4313      	orrs	r3, r2
 8002056:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM1, LCD_DIGIT4_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 800205e:	2102      	movs	r1, #2
 8002060:	4830      	ldr	r0, [pc, #192]	; (8002124 <WriteChar+0x490>)
 8002062:	f000 fe35 	bl	8002cd0 <HAL_LCD_Write>

      data = (((Digit[1] & 0x2) >> 1) << LCD_SEG7_SHIFT) | (((Digit[1] & 0x4) >> 2) << LCD_SEG16_SHIFT);
 8002066:	4b2d      	ldr	r3, [pc, #180]	; (800211c <WriteChar+0x488>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f003 0202 	and.w	r2, r3, #2
 800206e:	4b2b      	ldr	r3, [pc, #172]	; (800211c <WriteChar+0x488>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	089b      	lsrs	r3, r3, #2
 8002074:	f003 0301 	and.w	r3, r3, #1
 8002078:	4313      	orrs	r3, r2
 800207a:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM1_1, LCD_DIGIT4_COM1_1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f06f 0203 	mvn.w	r2, #3
 8002082:	2103      	movs	r1, #3
 8002084:	4827      	ldr	r0, [pc, #156]	; (8002124 <WriteChar+0x490>)
 8002086:	f000 fe23 	bl	8002cd0 <HAL_LCD_Write>

      data = ((Digit[2] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG17_SHIFT);
 800208a:	4b24      	ldr	r3, [pc, #144]	; (800211c <WriteChar+0x488>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	07da      	lsls	r2, r3, #31
 8002090:	4b22      	ldr	r3, [pc, #136]	; (800211c <WriteChar+0x488>)
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	08db      	lsrs	r3, r3, #3
 8002096:	079b      	lsls	r3, r3, #30
 8002098:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800209c:	4313      	orrs	r3, r2
 800209e:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM2, LCD_DIGIT4_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 80020a6:	2104      	movs	r1, #4
 80020a8:	481e      	ldr	r0, [pc, #120]	; (8002124 <WriteChar+0x490>)
 80020aa:	f000 fe11 	bl	8002cd0 <HAL_LCD_Write>

      data = (((Digit[2] & 0x2) >> 1) << LCD_SEG7_SHIFT) | (((Digit[2] & 0x4) >> 2) << LCD_SEG16_SHIFT);
 80020ae:	4b1b      	ldr	r3, [pc, #108]	; (800211c <WriteChar+0x488>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f003 0202 	and.w	r2, r3, #2
 80020b6:	4b19      	ldr	r3, [pc, #100]	; (800211c <WriteChar+0x488>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	089b      	lsrs	r3, r3, #2
 80020bc:	f003 0301 	and.w	r3, r3, #1
 80020c0:	4313      	orrs	r3, r2
 80020c2:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM2_1, LCD_DIGIT4_COM2_1_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f06f 0203 	mvn.w	r2, #3
 80020ca:	2105      	movs	r1, #5
 80020cc:	4815      	ldr	r0, [pc, #84]	; (8002124 <WriteChar+0x490>)
 80020ce:	f000 fdff 	bl	8002cd0 <HAL_LCD_Write>

      data = ((Digit[3] & 0x1) << LCD_SEG6_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG17_SHIFT);
 80020d2:	4b12      	ldr	r3, [pc, #72]	; (800211c <WriteChar+0x488>)
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	07da      	lsls	r2, r3, #31
 80020d8:	4b10      	ldr	r3, [pc, #64]	; (800211c <WriteChar+0x488>)
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	08db      	lsrs	r3, r3, #3
 80020de:	079b      	lsls	r3, r3, #30
 80020e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80020e4:	4313      	orrs	r3, r2
 80020e6:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM3, LCD_DIGIT4_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 80020ee:	2106      	movs	r1, #6
 80020f0:	480c      	ldr	r0, [pc, #48]	; (8002124 <WriteChar+0x490>)
 80020f2:	f000 fded 	bl	8002cd0 <HAL_LCD_Write>

      data = (((Digit[3] & 0x2) >> 1) << LCD_SEG7_SHIFT) | (((Digit[3] & 0x4) >> 2) << LCD_SEG16_SHIFT);
 80020f6:	4b09      	ldr	r3, [pc, #36]	; (800211c <WriteChar+0x488>)
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	f003 0202 	and.w	r2, r3, #2
 80020fe:	4b07      	ldr	r3, [pc, #28]	; (800211c <WriteChar+0x488>)
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	089b      	lsrs	r3, r3, #2
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	4313      	orrs	r3, r2
 800210a:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT4_COM3_1, LCD_DIGIT4_COM3_1_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f06f 0203 	mvn.w	r2, #3
 8002112:	2107      	movs	r1, #7
 8002114:	4803      	ldr	r0, [pc, #12]	; (8002124 <WriteChar+0x490>)
 8002116:	f000 fddb 	bl	8002cd0 <HAL_LCD_Write>
      break;
 800211a:	e130      	b.n	800237e <WriteChar+0x6ea>
 800211c:	20000280 	.word	0x20000280
 8002120:	cfff3fff 	.word	0xcfff3fff
 8002124:	20000244 	.word	0x20000244

      /* Position 5 on LCD (Digit5)*/
    case LCD_DIGIT_POSITION_5:
      data = (((Digit[0] & 0x2) >> 1) << LCD_SEG9_SHIFT) | (((Digit[0] & 0x4) >> 2) << LCD_SEG14_SHIFT);
 8002128:	4b97      	ldr	r3, [pc, #604]	; (8002388 <WriteChar+0x6f4>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	085b      	lsrs	r3, r3, #1
 800212e:	065b      	lsls	r3, r3, #25
 8002130:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 8002134:	4b94      	ldr	r3, [pc, #592]	; (8002388 <WriteChar+0x6f4>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	089b      	lsrs	r3, r3, #2
 800213a:	061b      	lsls	r3, r3, #24
 800213c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002140:	4313      	orrs	r3, r2
 8002142:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM0, LCD_DIGIT5_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f06f 7240 	mvn.w	r2, #50331648	; 0x3000000
 800214a:	2100      	movs	r1, #0
 800214c:	488f      	ldr	r0, [pc, #572]	; (800238c <WriteChar+0x6f8>)
 800214e:	f000 fdbf 	bl	8002cd0 <HAL_LCD_Write>

      data = ((Digit[0] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG15_SHIFT);
 8002152:	4b8d      	ldr	r3, [pc, #564]	; (8002388 <WriteChar+0x6f4>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	f003 0208 	and.w	r2, r3, #8
 800215c:	4b8a      	ldr	r3, [pc, #552]	; (8002388 <WriteChar+0x6f4>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	08db      	lsrs	r3, r3, #3
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	f003 0304 	and.w	r3, r3, #4
 8002168:	4313      	orrs	r3, r2
 800216a:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM0_1, LCD_DIGIT5_COM0_1_SEG_MASK, data); /* 1G 1B 1M 1E */
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f06f 020c 	mvn.w	r2, #12
 8002172:	2101      	movs	r1, #1
 8002174:	4885      	ldr	r0, [pc, #532]	; (800238c <WriteChar+0x6f8>)
 8002176:	f000 fdab 	bl	8002cd0 <HAL_LCD_Write>

      data = (((Digit[1] & 0x2) >> 1) << LCD_SEG9_SHIFT) | (((Digit[1] & 0x4) >> 2) << LCD_SEG14_SHIFT);
 800217a:	4b83      	ldr	r3, [pc, #524]	; (8002388 <WriteChar+0x6f4>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	085b      	lsrs	r3, r3, #1
 8002180:	065b      	lsls	r3, r3, #25
 8002182:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 8002186:	4b80      	ldr	r3, [pc, #512]	; (8002388 <WriteChar+0x6f4>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	089b      	lsrs	r3, r3, #2
 800218c:	061b      	lsls	r3, r3, #24
 800218e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002192:	4313      	orrs	r3, r2
 8002194:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM1, LCD_DIGIT5_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f06f 7240 	mvn.w	r2, #50331648	; 0x3000000
 800219c:	2102      	movs	r1, #2
 800219e:	487b      	ldr	r0, [pc, #492]	; (800238c <WriteChar+0x6f8>)
 80021a0:	f000 fd96 	bl	8002cd0 <HAL_LCD_Write>

      data = ((Digit[1] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG15_SHIFT);
 80021a4:	4b78      	ldr	r3, [pc, #480]	; (8002388 <WriteChar+0x6f4>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	f003 0208 	and.w	r2, r3, #8
 80021ae:	4b76      	ldr	r3, [pc, #472]	; (8002388 <WriteChar+0x6f4>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	08db      	lsrs	r3, r3, #3
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	f003 0304 	and.w	r3, r3, #4
 80021ba:	4313      	orrs	r3, r2
 80021bc:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM1_1, LCD_DIGIT5_COM1_1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f06f 020c 	mvn.w	r2, #12
 80021c4:	2103      	movs	r1, #3
 80021c6:	4871      	ldr	r0, [pc, #452]	; (800238c <WriteChar+0x6f8>)
 80021c8:	f000 fd82 	bl	8002cd0 <HAL_LCD_Write>

      data = (((Digit[2] & 0x2) >> 1) << LCD_SEG9_SHIFT) | (((Digit[2] & 0x4) >> 2) << LCD_SEG14_SHIFT);
 80021cc:	4b6e      	ldr	r3, [pc, #440]	; (8002388 <WriteChar+0x6f4>)
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	085b      	lsrs	r3, r3, #1
 80021d2:	065b      	lsls	r3, r3, #25
 80021d4:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 80021d8:	4b6b      	ldr	r3, [pc, #428]	; (8002388 <WriteChar+0x6f4>)
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	089b      	lsrs	r3, r3, #2
 80021de:	061b      	lsls	r3, r3, #24
 80021e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021e4:	4313      	orrs	r3, r2
 80021e6:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM2, LCD_DIGIT5_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f06f 7240 	mvn.w	r2, #50331648	; 0x3000000
 80021ee:	2104      	movs	r1, #4
 80021f0:	4866      	ldr	r0, [pc, #408]	; (800238c <WriteChar+0x6f8>)
 80021f2:	f000 fd6d 	bl	8002cd0 <HAL_LCD_Write>

      data = ((Digit[2] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG15_SHIFT);
 80021f6:	4b64      	ldr	r3, [pc, #400]	; (8002388 <WriteChar+0x6f4>)
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	f003 0208 	and.w	r2, r3, #8
 8002200:	4b61      	ldr	r3, [pc, #388]	; (8002388 <WriteChar+0x6f4>)
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	08db      	lsrs	r3, r3, #3
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	f003 0304 	and.w	r3, r3, #4
 800220c:	4313      	orrs	r3, r2
 800220e:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM2_1, LCD_DIGIT5_COM2_1_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f06f 020c 	mvn.w	r2, #12
 8002216:	2105      	movs	r1, #5
 8002218:	485c      	ldr	r0, [pc, #368]	; (800238c <WriteChar+0x6f8>)
 800221a:	f000 fd59 	bl	8002cd0 <HAL_LCD_Write>

      data = (((Digit[3] & 0x2) >> 1) << LCD_SEG9_SHIFT) | (((Digit[3] & 0x4) >> 2) << LCD_SEG14_SHIFT);
 800221e:	4b5a      	ldr	r3, [pc, #360]	; (8002388 <WriteChar+0x6f4>)
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	085b      	lsrs	r3, r3, #1
 8002224:	065b      	lsls	r3, r3, #25
 8002226:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 800222a:	4b57      	ldr	r3, [pc, #348]	; (8002388 <WriteChar+0x6f4>)
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	089b      	lsrs	r3, r3, #2
 8002230:	061b      	lsls	r3, r3, #24
 8002232:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002236:	4313      	orrs	r3, r2
 8002238:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM3, LCD_DIGIT5_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f06f 7240 	mvn.w	r2, #50331648	; 0x3000000
 8002240:	2106      	movs	r1, #6
 8002242:	4852      	ldr	r0, [pc, #328]	; (800238c <WriteChar+0x6f8>)
 8002244:	f000 fd44 	bl	8002cd0 <HAL_LCD_Write>

      data = ((Digit[3] & 0x1) << LCD_SEG8_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG15_SHIFT);
 8002248:	4b4f      	ldr	r3, [pc, #316]	; (8002388 <WriteChar+0x6f4>)
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	f003 0208 	and.w	r2, r3, #8
 8002252:	4b4d      	ldr	r3, [pc, #308]	; (8002388 <WriteChar+0x6f4>)
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	08db      	lsrs	r3, r3, #3
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	f003 0304 	and.w	r3, r3, #4
 800225e:	4313      	orrs	r3, r2
 8002260:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT5_COM3_1, LCD_DIGIT5_COM3_1_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f06f 020c 	mvn.w	r2, #12
 8002268:	2107      	movs	r1, #7
 800226a:	4848      	ldr	r0, [pc, #288]	; (800238c <WriteChar+0x6f8>)
 800226c:	f000 fd30 	bl	8002cd0 <HAL_LCD_Write>
      break;
 8002270:	e085      	b.n	800237e <WriteChar+0x6ea>

      /* Position 6 on LCD (Digit6)*/
    case LCD_DIGIT_POSITION_6:
      data = ((Digit[0] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8002272:	4b45      	ldr	r3, [pc, #276]	; (8002388 <WriteChar+0x6f4>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	045b      	lsls	r3, r3, #17
 8002278:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 800227c:	4b42      	ldr	r3, [pc, #264]	; (8002388 <WriteChar+0x6f4>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	085b      	lsrs	r3, r3, #1
 8002282:	021b      	lsls	r3, r3, #8
 8002284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002288:	431a      	orrs	r2, r3
             | (((Digit[0] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[0] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 800228a:	4b3f      	ldr	r3, [pc, #252]	; (8002388 <WriteChar+0x6f4>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	089b      	lsrs	r3, r3, #2
 8002290:	025b      	lsls	r3, r3, #9
 8002292:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002296:	431a      	orrs	r2, r3
 8002298:	4b3b      	ldr	r3, [pc, #236]	; (8002388 <WriteChar+0x6f4>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	08db      	lsrs	r3, r3, #3
 800229e:	069b      	lsls	r3, r3, #26
 80022a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
      data = ((Digit[0] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[0] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM0, LCD_DIGIT6_COM0_SEG_MASK, data); /* 1G 1B 1M 1E */
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	4a39      	ldr	r2, [pc, #228]	; (8002390 <WriteChar+0x6fc>)
 80022ac:	2100      	movs	r1, #0
 80022ae:	4837      	ldr	r0, [pc, #220]	; (800238c <WriteChar+0x6f8>)
 80022b0:	f000 fd0e 	bl	8002cd0 <HAL_LCD_Write>

      data = ((Digit[1] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 80022b4:	4b34      	ldr	r3, [pc, #208]	; (8002388 <WriteChar+0x6f4>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	045b      	lsls	r3, r3, #17
 80022ba:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 80022be:	4b32      	ldr	r3, [pc, #200]	; (8002388 <WriteChar+0x6f4>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	085b      	lsrs	r3, r3, #1
 80022c4:	021b      	lsls	r3, r3, #8
 80022c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ca:	431a      	orrs	r2, r3
             | (((Digit[1] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[1] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 80022cc:	4b2e      	ldr	r3, [pc, #184]	; (8002388 <WriteChar+0x6f4>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	089b      	lsrs	r3, r3, #2
 80022d2:	025b      	lsls	r3, r3, #9
 80022d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022d8:	431a      	orrs	r2, r3
 80022da:	4b2b      	ldr	r3, [pc, #172]	; (8002388 <WriteChar+0x6f4>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	08db      	lsrs	r3, r3, #3
 80022e0:	069b      	lsls	r3, r3, #26
 80022e2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
      data = ((Digit[1] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[1] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM1, LCD_DIGIT6_COM1_SEG_MASK, data) ; /* 1F 1A 1C 1D  */
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	4a28      	ldr	r2, [pc, #160]	; (8002390 <WriteChar+0x6fc>)
 80022ee:	2102      	movs	r1, #2
 80022f0:	4826      	ldr	r0, [pc, #152]	; (800238c <WriteChar+0x6f8>)
 80022f2:	f000 fced 	bl	8002cd0 <HAL_LCD_Write>

      data = ((Digit[2] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 80022f6:	4b24      	ldr	r3, [pc, #144]	; (8002388 <WriteChar+0x6f4>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	045b      	lsls	r3, r3, #17
 80022fc:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 8002300:	4b21      	ldr	r3, [pc, #132]	; (8002388 <WriteChar+0x6f4>)
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	085b      	lsrs	r3, r3, #1
 8002306:	021b      	lsls	r3, r3, #8
 8002308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800230c:	431a      	orrs	r2, r3
             | (((Digit[2] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[2] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 800230e:	4b1e      	ldr	r3, [pc, #120]	; (8002388 <WriteChar+0x6f4>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	089b      	lsrs	r3, r3, #2
 8002314:	025b      	lsls	r3, r3, #9
 8002316:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800231a:	431a      	orrs	r2, r3
 800231c:	4b1a      	ldr	r3, [pc, #104]	; (8002388 <WriteChar+0x6f4>)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	08db      	lsrs	r3, r3, #3
 8002322:	069b      	lsls	r3, r3, #26
 8002324:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
      data = ((Digit[2] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[2] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8002328:	4313      	orrs	r3, r2
 800232a:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM2, LCD_DIGIT6_COM2_SEG_MASK, data) ; /* 1Q 1K 1Col 1P  */
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	4a18      	ldr	r2, [pc, #96]	; (8002390 <WriteChar+0x6fc>)
 8002330:	2104      	movs	r1, #4
 8002332:	4816      	ldr	r0, [pc, #88]	; (800238c <WriteChar+0x6f8>)
 8002334:	f000 fccc 	bl	8002cd0 <HAL_LCD_Write>

      data = ((Digit[3] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 8002338:	4b13      	ldr	r3, [pc, #76]	; (8002388 <WriteChar+0x6f4>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	045b      	lsls	r3, r3, #17
 800233e:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 8002342:	4b11      	ldr	r3, [pc, #68]	; (8002388 <WriteChar+0x6f4>)
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	085b      	lsrs	r3, r3, #1
 8002348:	021b      	lsls	r3, r3, #8
 800234a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800234e:	431a      	orrs	r2, r3
             | (((Digit[3] & 0x4) >> 2) << LCD_SEG12_SHIFT) | (((Digit[3] & 0x8) >> 3) << LCD_SEG13_SHIFT);
 8002350:	4b0d      	ldr	r3, [pc, #52]	; (8002388 <WriteChar+0x6f4>)
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	089b      	lsrs	r3, r3, #2
 8002356:	025b      	lsls	r3, r3, #9
 8002358:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800235c:	431a      	orrs	r2, r3
 800235e:	4b0a      	ldr	r3, [pc, #40]	; (8002388 <WriteChar+0x6f4>)
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	08db      	lsrs	r3, r3, #3
 8002364:	069b      	lsls	r3, r3, #26
 8002366:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
      data = ((Digit[3] & 0x1) << LCD_SEG10_SHIFT) | (((Digit[3] & 0x2) >> 1) << LCD_SEG11_SHIFT)
 800236a:	4313      	orrs	r3, r2
 800236c:	60fb      	str	r3, [r7, #12]
      HAL_LCD_Write(&LCDHandle, LCD_DIGIT6_COM3, LCD_DIGIT6_COM3_SEG_MASK, data) ; /* 1H 1J 1DP 1N  */
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	4a07      	ldr	r2, [pc, #28]	; (8002390 <WriteChar+0x6fc>)
 8002372:	2106      	movs	r1, #6
 8002374:	4805      	ldr	r0, [pc, #20]	; (800238c <WriteChar+0x6f8>)
 8002376:	f000 fcab 	bl	8002cd0 <HAL_LCD_Write>
      break;
 800237a:	e000      	b.n	800237e <WriteChar+0x6ea>

    default:
      break;
 800237c:	bf00      	nop
  }
}
 800237e:	bf00      	nop
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	20000280 	.word	0x20000280
 800238c:	20000244 	.word	0x20000244
 8002390:	fbfdfcff 	.word	0xfbfdfcff

08002394 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800239e:	2300      	movs	r3, #0
 80023a0:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef L3GD20_InitStructure;
  GYRO_FilterConfigTypeDef L3GD20_FilterStructure = {0, 0};
 80023a2:	2300      	movs	r3, #0
 80023a4:	703b      	strb	r3, [r7, #0]
 80023a6:	2300      	movs	r3, #0
 80023a8:	707b      	strb	r3, [r7, #1]

  if ((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 80023aa:	4b2d      	ldr	r3, [pc, #180]	; (8002460 <BSP_GYRO_Init+0xcc>)
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	4798      	blx	r3
 80023b0:	4603      	mov	r3, r0
 80023b2:	2bd4      	cmp	r3, #212	; 0xd4
 80023b4:	d005      	beq.n	80023c2 <BSP_GYRO_Init+0x2e>
 80023b6:	4b2a      	ldr	r3, [pc, #168]	; (8002460 <BSP_GYRO_Init+0xcc>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	4798      	blx	r3
 80023bc:	4603      	mov	r3, r0
 80023be:	2bd5      	cmp	r3, #213	; 0xd5
 80023c0:	d146      	bne.n	8002450 <BSP_GYRO_Init+0xbc>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 80023c2:	4b28      	ldr	r3, [pc, #160]	; (8002464 <BSP_GYRO_Init+0xd0>)
 80023c4:	4a26      	ldr	r2, [pc, #152]	; (8002460 <BSP_GYRO_Init+0xcc>)
 80023c6:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    L3GD20_InitStructure.Power_Mode = L3GD20_MODE_ACTIVE;
 80023c8:	2308      	movs	r3, #8
 80023ca:	713b      	strb	r3, [r7, #4]
    L3GD20_InitStructure.Output_DataRate = L3GD20_OUTPUT_DATARATE_1;
 80023cc:	2300      	movs	r3, #0
 80023ce:	717b      	strb	r3, [r7, #5]
    L3GD20_InitStructure.Axes_Enable = L3GD20_AXES_ENABLE;
 80023d0:	2307      	movs	r3, #7
 80023d2:	71bb      	strb	r3, [r7, #6]
    L3GD20_InitStructure.Band_Width = L3GD20_BANDWIDTH_4;
 80023d4:	2330      	movs	r3, #48	; 0x30
 80023d6:	71fb      	strb	r3, [r7, #7]
    L3GD20_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 80023d8:	2300      	movs	r3, #0
 80023da:	723b      	strb	r3, [r7, #8]
    L3GD20_InitStructure.Endianness = L3GD20_BLE_LSB;
 80023dc:	2300      	movs	r3, #0
 80023de:	727b      	strb	r3, [r7, #9]
    L3GD20_InitStructure.Full_Scale = L3GD20_FULLSCALE_500;
 80023e0:	2310      	movs	r3, #16
 80023e2:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t)(L3GD20_InitStructure.Power_Mode | L3GD20_InitStructure.Output_DataRate | \
 80023e4:	793a      	ldrb	r2, [r7, #4]
 80023e6:	797b      	ldrb	r3, [r7, #5]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	b2da      	uxtb	r2, r3
                      L3GD20_InitStructure.Axes_Enable | L3GD20_InitStructure.Band_Width);
 80023ec:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t)(L3GD20_InitStructure.Power_Mode | L3GD20_InitStructure.Output_DataRate | \
 80023ee:	4313      	orrs	r3, r2
 80023f0:	b2da      	uxtb	r2, r3
                      L3GD20_InitStructure.Axes_Enable | L3GD20_InitStructure.Band_Width);
 80023f2:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t)(L3GD20_InitStructure.Power_Mode | L3GD20_InitStructure.Output_DataRate | \
 80023f4:	4313      	orrs	r3, r2
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t)((L3GD20_InitStructure.BlockData_Update | L3GD20_InitStructure.Endianness | \
 80023fa:	7a3a      	ldrb	r2, [r7, #8]
 80023fc:	7a7b      	ldrb	r3, [r7, #9]
 80023fe:	4313      	orrs	r3, r2
 8002400:	b2da      	uxtb	r2, r3
                        L3GD20_InitStructure.Full_Scale) << 8);
 8002402:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t)((L3GD20_InitStructure.BlockData_Update | L3GD20_InitStructure.Endianness | \
 8002404:	4313      	orrs	r3, r2
 8002406:	b2db      	uxtb	r3, r3
 8002408:	b29b      	uxth	r3, r3
 800240a:	021b      	lsls	r3, r3, #8
 800240c:	b29a      	uxth	r2, r3
 800240e:	89bb      	ldrh	r3, [r7, #12]
 8002410:	4313      	orrs	r3, r2
 8002412:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 8002414:	4b13      	ldr	r3, [pc, #76]	; (8002464 <BSP_GYRO_Init+0xd0>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	89ba      	ldrh	r2, [r7, #12]
 800241c:	4610      	mov	r0, r2
 800241e:	4798      	blx	r3

    L3GD20_FilterStructure.HighPassFilter_Mode_Selection = L3GD20_HPM_NORMAL_MODE_RES;
 8002420:	2300      	movs	r3, #0
 8002422:	703b      	strb	r3, [r7, #0]
    L3GD20_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 8002424:	2300      	movs	r3, #0
 8002426:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t)((L3GD20_FilterStructure.HighPassFilter_Mode_Selection | \
 8002428:	783a      	ldrb	r2, [r7, #0]
                      L3GD20_FilterStructure.HighPassFilter_CutOff_Frequency));
 800242a:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t)((L3GD20_FilterStructure.HighPassFilter_Mode_Selection | \
 800242c:	4313      	orrs	r3, r2
 800242e:	b2db      	uxtb	r3, r3
 8002430:	81bb      	strh	r3, [r7, #12]

    /* Configure component filter */
    GyroscopeDrv->FilterConfig(ctrl) ;
 8002432:	4b0c      	ldr	r3, [pc, #48]	; (8002464 <BSP_GYRO_Init+0xd0>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002438:	89ba      	ldrh	r2, [r7, #12]
 800243a:	b2d2      	uxtb	r2, r2
 800243c:	4610      	mov	r0, r2
 800243e:	4798      	blx	r3

    /* Enable component filter */
    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 8002440:	4b08      	ldr	r3, [pc, #32]	; (8002464 <BSP_GYRO_Init+0xd0>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002446:	2010      	movs	r0, #16
 8002448:	4798      	blx	r3

    ret = GYRO_OK;
 800244a:	2300      	movs	r3, #0
 800244c:	73fb      	strb	r3, [r7, #15]
 800244e:	e001      	b.n	8002454 <BSP_GYRO_Init+0xc0>
  }
  else
  {
    ret = GYRO_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002454:	7bfb      	ldrb	r3, [r7, #15]
}
 8002456:	4618      	mov	r0, r3
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	20000004 	.word	0x20000004
 8002464:	20000290 	.word	0x20000290

08002468 <BSP_GYRO_GetXYZ>:
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array
  * @retval None
  */
void BSP_GYRO_GetXYZ(float *pfData)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  if (GyroscopeDrv->GetXYZ != NULL)
 8002470:	4b06      	ldr	r3, [pc, #24]	; (800248c <BSP_GYRO_GetXYZ+0x24>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002476:	2b00      	cmp	r3, #0
 8002478:	d004      	beq.n	8002484 <BSP_GYRO_GetXYZ+0x1c>
  {
    GyroscopeDrv->GetXYZ(pfData);
 800247a:	4b04      	ldr	r3, [pc, #16]	; (800248c <BSP_GYRO_GetXYZ+0x24>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	4798      	blx	r3
  }
}
 8002484:	bf00      	nop
 8002486:	3708      	adds	r7, #8
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	20000290 	.word	0x20000290

08002490 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002496:	2300      	movs	r3, #0
 8002498:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800249a:	4b0c      	ldr	r3, [pc, #48]	; (80024cc <HAL_Init+0x3c>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a0b      	ldr	r2, [pc, #44]	; (80024cc <HAL_Init+0x3c>)
 80024a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024a4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024a6:	2003      	movs	r0, #3
 80024a8:	f000 f944 	bl	8002734 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024ac:	2000      	movs	r0, #0
 80024ae:	f000 f80f 	bl	80024d0 <HAL_InitTick>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d002      	beq.n	80024be <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	71fb      	strb	r3, [r7, #7]
 80024bc:	e001      	b.n	80024c2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80024be:	f7fe fb8b 	bl	8000bd8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80024c2:	79fb      	ldrb	r3, [r7, #7]
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3708      	adds	r7, #8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40022000 	.word	0x40022000

080024d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80024d8:	2300      	movs	r3, #0
 80024da:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80024dc:	4b17      	ldr	r3, [pc, #92]	; (800253c <HAL_InitTick+0x6c>)
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d023      	beq.n	800252c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80024e4:	4b16      	ldr	r3, [pc, #88]	; (8002540 <HAL_InitTick+0x70>)
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	4b14      	ldr	r3, [pc, #80]	; (800253c <HAL_InitTick+0x6c>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	4619      	mov	r1, r3
 80024ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80024f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024fa:	4618      	mov	r0, r3
 80024fc:	f000 f941 	bl	8002782 <HAL_SYSTICK_Config>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d10f      	bne.n	8002526 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2b0f      	cmp	r3, #15
 800250a:	d809      	bhi.n	8002520 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800250c:	2200      	movs	r2, #0
 800250e:	6879      	ldr	r1, [r7, #4]
 8002510:	f04f 30ff 	mov.w	r0, #4294967295
 8002514:	f000 f919 	bl	800274a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002518:	4a0a      	ldr	r2, [pc, #40]	; (8002544 <HAL_InitTick+0x74>)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6013      	str	r3, [r2, #0]
 800251e:	e007      	b.n	8002530 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	73fb      	strb	r3, [r7, #15]
 8002524:	e004      	b.n	8002530 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	73fb      	strb	r3, [r7, #15]
 800252a:	e001      	b.n	8002530 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002530:	7bfb      	ldrb	r3, [r7, #15]
}
 8002532:	4618      	mov	r0, r3
 8002534:	3710      	adds	r7, #16
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	2000003c 	.word	0x2000003c
 8002540:	20000000 	.word	0x20000000
 8002544:	20000038 	.word	0x20000038

08002548 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800254c:	4b06      	ldr	r3, [pc, #24]	; (8002568 <HAL_IncTick+0x20>)
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	461a      	mov	r2, r3
 8002552:	4b06      	ldr	r3, [pc, #24]	; (800256c <HAL_IncTick+0x24>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4413      	add	r3, r2
 8002558:	4a04      	ldr	r2, [pc, #16]	; (800256c <HAL_IncTick+0x24>)
 800255a:	6013      	str	r3, [r2, #0]
}
 800255c:	bf00      	nop
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	2000003c 	.word	0x2000003c
 800256c:	20000294 	.word	0x20000294

08002570 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  return uwTick;
 8002574:	4b03      	ldr	r3, [pc, #12]	; (8002584 <HAL_GetTick+0x14>)
 8002576:	681b      	ldr	r3, [r3, #0]
}
 8002578:	4618      	mov	r0, r3
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	20000294 	.word	0x20000294

08002588 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002590:	f7ff ffee 	bl	8002570 <HAL_GetTick>
 8002594:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a0:	d005      	beq.n	80025ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80025a2:	4b0a      	ldr	r3, [pc, #40]	; (80025cc <HAL_Delay+0x44>)
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	461a      	mov	r2, r3
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	4413      	add	r3, r2
 80025ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025ae:	bf00      	nop
 80025b0:	f7ff ffde 	bl	8002570 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d8f7      	bhi.n	80025b0 <HAL_Delay+0x28>
  {
  }
}
 80025c0:	bf00      	nop
 80025c2:	bf00      	nop
 80025c4:	3710      	adds	r7, #16
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	2000003c 	.word	0x2000003c

080025d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f003 0307 	and.w	r3, r3, #7
 80025de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025e0:	4b0c      	ldr	r3, [pc, #48]	; (8002614 <__NVIC_SetPriorityGrouping+0x44>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025e6:	68ba      	ldr	r2, [r7, #8]
 80025e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025ec:	4013      	ands	r3, r2
 80025ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002600:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002602:	4a04      	ldr	r2, [pc, #16]	; (8002614 <__NVIC_SetPriorityGrouping+0x44>)
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	60d3      	str	r3, [r2, #12]
}
 8002608:	bf00      	nop
 800260a:	3714      	adds	r7, #20
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr
 8002614:	e000ed00 	.word	0xe000ed00

08002618 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800261c:	4b04      	ldr	r3, [pc, #16]	; (8002630 <__NVIC_GetPriorityGrouping+0x18>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	0a1b      	lsrs	r3, r3, #8
 8002622:	f003 0307 	and.w	r3, r3, #7
}
 8002626:	4618      	mov	r0, r3
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	e000ed00 	.word	0xe000ed00

08002634 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	4603      	mov	r3, r0
 800263c:	6039      	str	r1, [r7, #0]
 800263e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002644:	2b00      	cmp	r3, #0
 8002646:	db0a      	blt.n	800265e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	b2da      	uxtb	r2, r3
 800264c:	490c      	ldr	r1, [pc, #48]	; (8002680 <__NVIC_SetPriority+0x4c>)
 800264e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002652:	0112      	lsls	r2, r2, #4
 8002654:	b2d2      	uxtb	r2, r2
 8002656:	440b      	add	r3, r1
 8002658:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800265c:	e00a      	b.n	8002674 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	b2da      	uxtb	r2, r3
 8002662:	4908      	ldr	r1, [pc, #32]	; (8002684 <__NVIC_SetPriority+0x50>)
 8002664:	79fb      	ldrb	r3, [r7, #7]
 8002666:	f003 030f 	and.w	r3, r3, #15
 800266a:	3b04      	subs	r3, #4
 800266c:	0112      	lsls	r2, r2, #4
 800266e:	b2d2      	uxtb	r2, r2
 8002670:	440b      	add	r3, r1
 8002672:	761a      	strb	r2, [r3, #24]
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	e000e100 	.word	0xe000e100
 8002684:	e000ed00 	.word	0xe000ed00

08002688 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002688:	b480      	push	{r7}
 800268a:	b089      	sub	sp, #36	; 0x24
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f003 0307 	and.w	r3, r3, #7
 800269a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	f1c3 0307 	rsb	r3, r3, #7
 80026a2:	2b04      	cmp	r3, #4
 80026a4:	bf28      	it	cs
 80026a6:	2304      	movcs	r3, #4
 80026a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	3304      	adds	r3, #4
 80026ae:	2b06      	cmp	r3, #6
 80026b0:	d902      	bls.n	80026b8 <NVIC_EncodePriority+0x30>
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	3b03      	subs	r3, #3
 80026b6:	e000      	b.n	80026ba <NVIC_EncodePriority+0x32>
 80026b8:	2300      	movs	r3, #0
 80026ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026bc:	f04f 32ff 	mov.w	r2, #4294967295
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	43da      	mvns	r2, r3
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	401a      	ands	r2, r3
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026d0:	f04f 31ff 	mov.w	r1, #4294967295
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	fa01 f303 	lsl.w	r3, r1, r3
 80026da:	43d9      	mvns	r1, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026e0:	4313      	orrs	r3, r2
         );
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3724      	adds	r7, #36	; 0x24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
	...

080026f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	3b01      	subs	r3, #1
 80026fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002700:	d301      	bcc.n	8002706 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002702:	2301      	movs	r3, #1
 8002704:	e00f      	b.n	8002726 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002706:	4a0a      	ldr	r2, [pc, #40]	; (8002730 <SysTick_Config+0x40>)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	3b01      	subs	r3, #1
 800270c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800270e:	210f      	movs	r1, #15
 8002710:	f04f 30ff 	mov.w	r0, #4294967295
 8002714:	f7ff ff8e 	bl	8002634 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002718:	4b05      	ldr	r3, [pc, #20]	; (8002730 <SysTick_Config+0x40>)
 800271a:	2200      	movs	r2, #0
 800271c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800271e:	4b04      	ldr	r3, [pc, #16]	; (8002730 <SysTick_Config+0x40>)
 8002720:	2207      	movs	r2, #7
 8002722:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	e000e010 	.word	0xe000e010

08002734 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f7ff ff47 	bl	80025d0 <__NVIC_SetPriorityGrouping>
}
 8002742:	bf00      	nop
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b086      	sub	sp, #24
 800274e:	af00      	add	r7, sp, #0
 8002750:	4603      	mov	r3, r0
 8002752:	60b9      	str	r1, [r7, #8]
 8002754:	607a      	str	r2, [r7, #4]
 8002756:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002758:	2300      	movs	r3, #0
 800275a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800275c:	f7ff ff5c 	bl	8002618 <__NVIC_GetPriorityGrouping>
 8002760:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	68b9      	ldr	r1, [r7, #8]
 8002766:	6978      	ldr	r0, [r7, #20]
 8002768:	f7ff ff8e 	bl	8002688 <NVIC_EncodePriority>
 800276c:	4602      	mov	r2, r0
 800276e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002772:	4611      	mov	r1, r2
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff ff5d 	bl	8002634 <__NVIC_SetPriority>
}
 800277a:	bf00      	nop
 800277c:	3718      	adds	r7, #24
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b082      	sub	sp, #8
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f7ff ffb0 	bl	80026f0 <SysTick_Config>
 8002790:	4603      	mov	r3, r0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
	...

0800279c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800279c:	b480      	push	{r7}
 800279e:	b087      	sub	sp, #28
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027a6:	2300      	movs	r3, #0
 80027a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027aa:	e17f      	b.n	8002aac <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	2101      	movs	r1, #1
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	fa01 f303 	lsl.w	r3, r1, r3
 80027b8:	4013      	ands	r3, r2
 80027ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f000 8171 	beq.w	8002aa6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f003 0303 	and.w	r3, r3, #3
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d005      	beq.n	80027dc <HAL_GPIO_Init+0x40>
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f003 0303 	and.w	r3, r3, #3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d130      	bne.n	800283e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	2203      	movs	r2, #3
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	43db      	mvns	r3, r3
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	4013      	ands	r3, r2
 80027f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	68da      	ldr	r2, [r3, #12]
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	4313      	orrs	r3, r2
 8002804:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	693a      	ldr	r2, [r7, #16]
 800280a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002812:	2201      	movs	r2, #1
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	43db      	mvns	r3, r3
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	4013      	ands	r3, r2
 8002820:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	091b      	lsrs	r3, r3, #4
 8002828:	f003 0201 	and.w	r2, r3, #1
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	fa02 f303 	lsl.w	r3, r2, r3
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	4313      	orrs	r3, r2
 8002836:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	693a      	ldr	r2, [r7, #16]
 800283c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f003 0303 	and.w	r3, r3, #3
 8002846:	2b03      	cmp	r3, #3
 8002848:	d118      	bne.n	800287c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002850:	2201      	movs	r2, #1
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	43db      	mvns	r3, r3
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	4013      	ands	r3, r2
 800285e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	08db      	lsrs	r3, r3, #3
 8002866:	f003 0201 	and.w	r2, r3, #1
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	4313      	orrs	r3, r2
 8002874:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f003 0303 	and.w	r3, r3, #3
 8002884:	2b03      	cmp	r3, #3
 8002886:	d017      	beq.n	80028b8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	2203      	movs	r2, #3
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	43db      	mvns	r3, r3
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	4013      	ands	r3, r2
 800289e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f003 0303 	and.w	r3, r3, #3
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d123      	bne.n	800290c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	08da      	lsrs	r2, r3, #3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	3208      	adds	r2, #8
 80028cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	f003 0307 	and.w	r3, r3, #7
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	220f      	movs	r2, #15
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	43db      	mvns	r3, r3
 80028e2:	693a      	ldr	r2, [r7, #16]
 80028e4:	4013      	ands	r3, r2
 80028e6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	691a      	ldr	r2, [r3, #16]
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	f003 0307 	and.w	r3, r3, #7
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	693a      	ldr	r2, [r7, #16]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	08da      	lsrs	r2, r3, #3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	3208      	adds	r2, #8
 8002906:	6939      	ldr	r1, [r7, #16]
 8002908:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	2203      	movs	r2, #3
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	43db      	mvns	r3, r3
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	4013      	ands	r3, r2
 8002922:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f003 0203 	and.w	r2, r3, #3
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	4313      	orrs	r3, r2
 8002938:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002948:	2b00      	cmp	r3, #0
 800294a:	f000 80ac 	beq.w	8002aa6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800294e:	4b5f      	ldr	r3, [pc, #380]	; (8002acc <HAL_GPIO_Init+0x330>)
 8002950:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002952:	4a5e      	ldr	r2, [pc, #376]	; (8002acc <HAL_GPIO_Init+0x330>)
 8002954:	f043 0301 	orr.w	r3, r3, #1
 8002958:	6613      	str	r3, [r2, #96]	; 0x60
 800295a:	4b5c      	ldr	r3, [pc, #368]	; (8002acc <HAL_GPIO_Init+0x330>)
 800295c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	60bb      	str	r3, [r7, #8]
 8002964:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002966:	4a5a      	ldr	r2, [pc, #360]	; (8002ad0 <HAL_GPIO_Init+0x334>)
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	089b      	lsrs	r3, r3, #2
 800296c:	3302      	adds	r3, #2
 800296e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002972:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	f003 0303 	and.w	r3, r3, #3
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	220f      	movs	r2, #15
 800297e:	fa02 f303 	lsl.w	r3, r2, r3
 8002982:	43db      	mvns	r3, r3
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	4013      	ands	r3, r2
 8002988:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002990:	d025      	beq.n	80029de <HAL_GPIO_Init+0x242>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a4f      	ldr	r2, [pc, #316]	; (8002ad4 <HAL_GPIO_Init+0x338>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d01f      	beq.n	80029da <HAL_GPIO_Init+0x23e>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a4e      	ldr	r2, [pc, #312]	; (8002ad8 <HAL_GPIO_Init+0x33c>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d019      	beq.n	80029d6 <HAL_GPIO_Init+0x23a>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a4d      	ldr	r2, [pc, #308]	; (8002adc <HAL_GPIO_Init+0x340>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d013      	beq.n	80029d2 <HAL_GPIO_Init+0x236>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a4c      	ldr	r2, [pc, #304]	; (8002ae0 <HAL_GPIO_Init+0x344>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d00d      	beq.n	80029ce <HAL_GPIO_Init+0x232>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a4b      	ldr	r2, [pc, #300]	; (8002ae4 <HAL_GPIO_Init+0x348>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d007      	beq.n	80029ca <HAL_GPIO_Init+0x22e>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a4a      	ldr	r2, [pc, #296]	; (8002ae8 <HAL_GPIO_Init+0x34c>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d101      	bne.n	80029c6 <HAL_GPIO_Init+0x22a>
 80029c2:	2306      	movs	r3, #6
 80029c4:	e00c      	b.n	80029e0 <HAL_GPIO_Init+0x244>
 80029c6:	2307      	movs	r3, #7
 80029c8:	e00a      	b.n	80029e0 <HAL_GPIO_Init+0x244>
 80029ca:	2305      	movs	r3, #5
 80029cc:	e008      	b.n	80029e0 <HAL_GPIO_Init+0x244>
 80029ce:	2304      	movs	r3, #4
 80029d0:	e006      	b.n	80029e0 <HAL_GPIO_Init+0x244>
 80029d2:	2303      	movs	r3, #3
 80029d4:	e004      	b.n	80029e0 <HAL_GPIO_Init+0x244>
 80029d6:	2302      	movs	r3, #2
 80029d8:	e002      	b.n	80029e0 <HAL_GPIO_Init+0x244>
 80029da:	2301      	movs	r3, #1
 80029dc:	e000      	b.n	80029e0 <HAL_GPIO_Init+0x244>
 80029de:	2300      	movs	r3, #0
 80029e0:	697a      	ldr	r2, [r7, #20]
 80029e2:	f002 0203 	and.w	r2, r2, #3
 80029e6:	0092      	lsls	r2, r2, #2
 80029e8:	4093      	lsls	r3, r2
 80029ea:	693a      	ldr	r2, [r7, #16]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80029f0:	4937      	ldr	r1, [pc, #220]	; (8002ad0 <HAL_GPIO_Init+0x334>)
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	089b      	lsrs	r3, r3, #2
 80029f6:	3302      	adds	r3, #2
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029fe:	4b3b      	ldr	r3, [pc, #236]	; (8002aec <HAL_GPIO_Init+0x350>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	43db      	mvns	r3, r3
 8002a08:	693a      	ldr	r2, [r7, #16]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d003      	beq.n	8002a22 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a22:	4a32      	ldr	r2, [pc, #200]	; (8002aec <HAL_GPIO_Init+0x350>)
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a28:	4b30      	ldr	r3, [pc, #192]	; (8002aec <HAL_GPIO_Init+0x350>)
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	43db      	mvns	r3, r3
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	4013      	ands	r3, r2
 8002a36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d003      	beq.n	8002a4c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002a44:	693a      	ldr	r2, [r7, #16]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a4c:	4a27      	ldr	r2, [pc, #156]	; (8002aec <HAL_GPIO_Init+0x350>)
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002a52:	4b26      	ldr	r3, [pc, #152]	; (8002aec <HAL_GPIO_Init+0x350>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	43db      	mvns	r3, r3
 8002a5c:	693a      	ldr	r2, [r7, #16]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d003      	beq.n	8002a76 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a76:	4a1d      	ldr	r2, [pc, #116]	; (8002aec <HAL_GPIO_Init+0x350>)
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002a7c:	4b1b      	ldr	r3, [pc, #108]	; (8002aec <HAL_GPIO_Init+0x350>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	43db      	mvns	r3, r3
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d003      	beq.n	8002aa0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002aa0:	4a12      	ldr	r2, [pc, #72]	; (8002aec <HAL_GPIO_Init+0x350>)
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f47f ae78 	bne.w	80027ac <HAL_GPIO_Init+0x10>
  }
}
 8002abc:	bf00      	nop
 8002abe:	bf00      	nop
 8002ac0:	371c      	adds	r7, #28
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	40021000 	.word	0x40021000
 8002ad0:	40010000 	.word	0x40010000
 8002ad4:	48000400 	.word	0x48000400
 8002ad8:	48000800 	.word	0x48000800
 8002adc:	48000c00 	.word	0x48000c00
 8002ae0:	48001000 	.word	0x48001000
 8002ae4:	48001400 	.word	0x48001400
 8002ae8:	48001800 	.word	0x48001800
 8002aec:	40010400 	.word	0x40010400

08002af0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	460b      	mov	r3, r1
 8002afa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	691a      	ldr	r2, [r3, #16]
 8002b00:	887b      	ldrh	r3, [r7, #2]
 8002b02:	4013      	ands	r3, r2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d002      	beq.n	8002b0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	73fb      	strb	r3, [r7, #15]
 8002b0c:	e001      	b.n	8002b12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3714      	adds	r7, #20
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	460b      	mov	r3, r1
 8002b2a:	807b      	strh	r3, [r7, #2]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b30:	787b      	ldrb	r3, [r7, #1]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d003      	beq.n	8002b3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b36:	887a      	ldrh	r2, [r7, #2]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b3c:	e002      	b.n	8002b44 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b3e:	887a      	ldrh	r2, [r7, #2]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <HAL_LCD_Init>:
  * @note   This function can be used only when the LCD is disabled.
  * @param hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Init(LCD_HandleTypeDef *hlcd)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t counter;
  HAL_StatusTypeDef status;

  /* Check the LCD handle allocation */
  if (hlcd == NULL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_LCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e0af      	b.n	8002cc2 <HAL_LCD_Init+0x172>
  assert_param(IS_LCD_CONTRAST(hlcd->Init.Contrast));
  assert_param(IS_LCD_BLINK_FREQUENCY(hlcd->Init.BlinkFrequency));
  assert_param(IS_LCD_BLINK_MODE(hlcd->Init.BlinkMode));
  assert_param(IS_LCD_MUX_SEGMENT(hlcd->Init.MuxSegment));

  if (hlcd->State == HAL_LCD_STATE_RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d106      	bne.n	8002b7c <HAL_LCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hlcd->Lock = HAL_UNLOCKED;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize the low level hardware (MSP) */
    HAL_LCD_MspInit(hlcd);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f7fd fe0e 	bl	8000798 <HAL_LCD_MspInit>
  }

  hlcd->State = HAL_LCD_STATE_BUSY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2202      	movs	r2, #2
 8002b80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable the peripheral */
  __HAL_LCD_DISABLE(hlcd);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f022 0201 	bic.w	r2, r2, #1
 8002b92:	601a      	str	r2, [r3, #0]

  /* Clear the LCD_RAM registers and enable the display request by setting the UDR bit
     in the LCD_SR register */
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8002b94:	2300      	movs	r3, #0
 8002b96:	617b      	str	r3, [r7, #20]
 8002b98:	e00a      	b.n	8002bb0 <HAL_LCD_Init+0x60>
  {
    hlcd->Instance->RAM[counter] = 0;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	3304      	adds	r3, #4
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	4413      	add	r3, r2
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	605a      	str	r2, [r3, #4]
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	3301      	adds	r3, #1
 8002bae:	617b      	str	r3, [r7, #20]
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	2b0f      	cmp	r3, #15
 8002bb4:	d9f1      	bls.n	8002b9a <HAL_LCD_Init+0x4a>
  }
  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	689a      	ldr	r2, [r3, #8]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f042 0204 	orr.w	r2, r2, #4
 8002bc4:	609a      	str	r2, [r3, #8]
     Set BLINKF[2:0] bits according to hlcd->Init.BlinkFrequency value
     Set DEAD[2:0] bits according to hlcd->Init.DeadTime value
     Set PON[2:0] bits according to hlcd->Init.PulseOnDuration value
     Set CC[2:0] bits according to hlcd->Init.Contrast value
     Set HD bit according to hlcd->Init.HighDrive value */
  MODIFY_REG(hlcd->Instance->FCR, \
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	685a      	ldr	r2, [r3, #4]
 8002bcc:	4b3f      	ldr	r3, [pc, #252]	; (8002ccc <HAL_LCD_Init+0x17c>)
 8002bce:	4013      	ands	r3, r2
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	6851      	ldr	r1, [r2, #4]
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	6892      	ldr	r2, [r2, #8]
 8002bd8:	4311      	orrs	r1, r2
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002bde:	4311      	orrs	r1, r2
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002be4:	4311      	orrs	r1, r2
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	69d2      	ldr	r2, [r2, #28]
 8002bea:	4311      	orrs	r1, r2
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	6a12      	ldr	r2, [r2, #32]
 8002bf0:	4311      	orrs	r1, r2
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	6992      	ldr	r2, [r2, #24]
 8002bf6:	4311      	orrs	r1, r2
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002bfc:	4311      	orrs	r1, r2
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	6812      	ldr	r2, [r2, #0]
 8002c02:	430b      	orrs	r3, r1
 8002c04:	6053      	str	r3, [r2, #4]
              hlcd->Init.DeadTime | hlcd->Init.PulseOnDuration | hlcd->Init.Contrast | hlcd->Init.HighDrive));

  /* Wait until LCD Frame Control Register Synchronization flag (FCRSF) is set in the LCD_SR register
     This bit is set by hardware each time the LCD_FCR register is updated in the LCDCLK
     domain. It is cleared by hardware when writing to the LCD_FCR register.*/
  status = LCD_WaitForSynchro(hlcd);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 f94c 	bl	8002ea4 <LCD_WaitForSynchro>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	74fb      	strb	r3, [r7, #19]
  if (status != HAL_OK)
 8002c10:	7cfb      	ldrb	r3, [r7, #19]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <HAL_LCD_Init+0xca>
  {
    return status;
 8002c16:	7cfb      	ldrb	r3, [r7, #19]
 8002c18:	e053      	b.n	8002cc2 <HAL_LCD_Init+0x172>
  /* Configure the LCD Duty, Bias, Voltage Source, Dead Time, Pulse On Duration and Contrast:
     Set DUTY[2:0] bits according to hlcd->Init.Duty value
     Set BIAS[1:0] bits according to hlcd->Init.Bias value
     Set VSEL bit according to hlcd->Init.VoltageSource value
     Set MUX_SEG bit according to hlcd->Init.MuxSegment value */
  MODIFY_REG(hlcd->Instance->CR, \
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f023 01fe 	bic.w	r1, r3, #254	; 0xfe
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	68da      	ldr	r2, [r3, #12]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	431a      	orrs	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	695b      	ldr	r3, [r3, #20]
 8002c32:	431a      	orrs	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c38:	431a      	orrs	r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	601a      	str	r2, [r3, #0]
             (LCD_CR_DUTY | LCD_CR_BIAS | LCD_CR_VSEL | LCD_CR_MUX_SEG), \
             (hlcd->Init.Duty | hlcd->Init.Bias | hlcd->Init.VoltageSource | hlcd->Init.MuxSegment));

  /* Enable the peripheral */
  __HAL_LCD_ENABLE(hlcd);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f042 0201 	orr.w	r2, r2, #1
 8002c50:	601a      	str	r2, [r3, #0]

  /* Get timeout */
  tickstart = HAL_GetTick();
 8002c52:	f7ff fc8d 	bl	8002570 <HAL_GetTick>
 8002c56:	60f8      	str	r0, [r7, #12]

  /* Wait Until the LCD is enabled */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8002c58:	e00c      	b.n	8002c74 <HAL_LCD_Init+0x124>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8002c5a:	f7ff fc89 	bl	8002570 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c68:	d904      	bls.n	8002c74 <HAL_LCD_Init+0x124>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_ENS;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2208      	movs	r2, #8
 8002c6e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e026      	b.n	8002cc2 <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f003 0301 	and.w	r3, r3, #1
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d1eb      	bne.n	8002c5a <HAL_LCD_Init+0x10a>
    }
  }

  /* Get timeout */
  tickstart = HAL_GetTick();
 8002c82:	f7ff fc75 	bl	8002570 <HAL_GetTick>
 8002c86:	60f8      	str	r0, [r7, #12]

  /*!< Wait Until the LCD Booster is ready */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8002c88:	e00c      	b.n	8002ca4 <HAL_LCD_Init+0x154>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8002c8a:	f7ff fc71 	bl	8002570 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c98:	d904      	bls.n	8002ca4 <HAL_LCD_Init+0x154>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2210      	movs	r2, #16
 8002c9e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e00e      	b.n	8002cc2 <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f003 0310 	and.w	r3, r3, #16
 8002cae:	2b10      	cmp	r3, #16
 8002cb0:	d1eb      	bne.n	8002c8a <HAL_LCD_Init+0x13a>
    }
  }

  /* Initialize the LCD state */
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	639a      	str	r2, [r3, #56]	; 0x38
  hlcd->State = HAL_LCD_STATE_READY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return status;
 8002cc0:	7cfb      	ldrb	r3, [r7, #19]
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3718      	adds	r7, #24
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	fc00000e 	.word	0xfc00000e

08002cd0 <HAL_LCD_Write>:
  * @param RAMRegisterMask specifies the LCD RAM Register Data Mask.
  * @param Data specifies LCD Data Value to be written.
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Write(LCD_HandleTypeDef *hlcd, uint32_t RAMRegisterIndex, uint32_t RAMRegisterMask, uint32_t Data)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b086      	sub	sp, #24
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	607a      	str	r2, [r7, #4]
 8002cdc:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  HAL_LCD_StateTypeDef state = hlcd->State;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ce4:	75fb      	strb	r3, [r7, #23]
  
  if ((state == HAL_LCD_STATE_READY) || (state == HAL_LCD_STATE_BUSY))
 8002ce6:	7dfb      	ldrb	r3, [r7, #23]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d002      	beq.n	8002cf2 <HAL_LCD_Write+0x22>
 8002cec:	7dfb      	ldrb	r3, [r7, #23]
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d144      	bne.n	8002d7c <HAL_LCD_Write+0xac>
  {
    /* Check the parameters */
    assert_param(IS_LCD_RAM_REGISTER(RAMRegisterIndex));

    if (hlcd->State == HAL_LCD_STATE_READY)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d12a      	bne.n	8002d54 <HAL_LCD_Write+0x84>
    {
      /* Process Locked */
      __HAL_LOCK(hlcd);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d101      	bne.n	8002d0c <HAL_LCD_Write+0x3c>
 8002d08:	2302      	movs	r3, #2
 8002d0a:	e038      	b.n	8002d7e <HAL_LCD_Write+0xae>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hlcd->State = HAL_LCD_STATE_BUSY;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2202      	movs	r2, #2
 8002d18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Get timeout */
      tickstart = HAL_GetTick();
 8002d1c:	f7ff fc28 	bl	8002570 <HAL_GetTick>
 8002d20:	6138      	str	r0, [r7, #16]

      /*!< Wait Until the LCD is ready */
      while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8002d22:	e010      	b.n	8002d46 <HAL_LCD_Write+0x76>
      {
        if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8002d24:	f7ff fc24 	bl	8002570 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d32:	d908      	bls.n	8002d46 <HAL_LCD_Write+0x76>
        {
          hlcd->ErrorCode = HAL_LCD_ERROR_UDR;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2202      	movs	r2, #2
 8002d38:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process Unlocked */
          __HAL_UNLOCK(hlcd);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e01b      	b.n	8002d7e <HAL_LCD_Write+0xae>
      while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f003 0304 	and.w	r3, r3, #4
 8002d50:	2b04      	cmp	r3, #4
 8002d52:	d0e7      	beq.n	8002d24 <HAL_LCD_Write+0x54>
        }
      }
    }

    /* Copy the new Data bytes to LCD RAM register */
    MODIFY_REG(hlcd->Instance->RAM[RAMRegisterIndex], ~(RAMRegisterMask), Data);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	3304      	adds	r3, #4
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	4413      	add	r3, r2
 8002d60:	685a      	ldr	r2, [r3, #4]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	401a      	ands	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6819      	ldr	r1, [r3, #0]
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	431a      	orrs	r2, r3
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	3304      	adds	r3, #4
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	440b      	add	r3, r1
 8002d76:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	e000      	b.n	8002d7e <HAL_LCD_Write+0xae>
  }
  else
  {
    return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
  }
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3718      	adds	r7, #24
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <HAL_LCD_Clear>:
  * @brief Clear the LCD RAM registers.
  * @param hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Clear(LCD_HandleTypeDef *hlcd)
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b086      	sub	sp, #24
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t counter;
  HAL_StatusTypeDef status = HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	74fb      	strb	r3, [r7, #19]
  HAL_LCD_StateTypeDef state = hlcd->State;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d98:	74bb      	strb	r3, [r7, #18]
  
  if ((state == HAL_LCD_STATE_READY) || (state == HAL_LCD_STATE_BUSY))
 8002d9a:	7cbb      	ldrb	r3, [r7, #18]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d002      	beq.n	8002da6 <HAL_LCD_Clear+0x20>
 8002da0:	7cbb      	ldrb	r3, [r7, #18]
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d140      	bne.n	8002e28 <HAL_LCD_Clear+0xa2>
  {
    /* Process Locked */
    __HAL_LOCK(hlcd);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d101      	bne.n	8002db4 <HAL_LCD_Clear+0x2e>
 8002db0:	2302      	movs	r3, #2
 8002db2:	e03a      	b.n	8002e2a <HAL_LCD_Clear+0xa4>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    hlcd->State = HAL_LCD_STATE_BUSY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get timeout */
    tickstart = HAL_GetTick();
 8002dc4:	f7ff fbd4 	bl	8002570 <HAL_GetTick>
 8002dc8:	60f8      	str	r0, [r7, #12]

    /*!< Wait Until the LCD is ready */
    while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8002dca:	e010      	b.n	8002dee <HAL_LCD_Clear+0x68>
    {
      if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8002dcc:	f7ff fbd0 	bl	8002570 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002dda:	d908      	bls.n	8002dee <HAL_LCD_Clear+0x68>
      {
        hlcd->ErrorCode = HAL_LCD_ERROR_UDR;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2202      	movs	r2, #2
 8002de0:	639a      	str	r2, [r3, #56]	; 0x38

        /* Process Unlocked */
        __HAL_UNLOCK(hlcd);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e01d      	b.n	8002e2a <HAL_LCD_Clear+0xa4>
    while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f003 0304 	and.w	r3, r3, #4
 8002df8:	2b04      	cmp	r3, #4
 8002dfa:	d0e7      	beq.n	8002dcc <HAL_LCD_Clear+0x46>
      }
    }
    /* Clear the LCD_RAM registers */
    for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	617b      	str	r3, [r7, #20]
 8002e00:	e00a      	b.n	8002e18 <HAL_LCD_Clear+0x92>
    {
      hlcd->Instance->RAM[counter] = 0;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	3304      	adds	r3, #4
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	4413      	add	r3, r2
 8002e0e:	2200      	movs	r2, #0
 8002e10:	605a      	str	r2, [r3, #4]
    for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	3301      	adds	r3, #1
 8002e16:	617b      	str	r3, [r7, #20]
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	2b0f      	cmp	r3, #15
 8002e1c:	d9f1      	bls.n	8002e02 <HAL_LCD_Clear+0x7c>
    }

    /* Update the LCD display */
    status = HAL_LCD_UpdateDisplayRequest(hlcd);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f000 f807 	bl	8002e32 <HAL_LCD_UpdateDisplayRequest>
 8002e24:	4603      	mov	r3, r0
 8002e26:	74fb      	strb	r3, [r7, #19]
  }
  return status;
 8002e28:	7cfb      	ldrb	r3, [r7, #19]
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3718      	adds	r7, #24
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <HAL_LCD_UpdateDisplayRequest>:
  *         for which commons are active (depending on DUTY). For example if
  *         DUTY = 1/2, only the LCD_DISPLAY of COM0 and COM1 will be updated.
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_UpdateDisplayRequest(LCD_HandleTypeDef *hlcd)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b084      	sub	sp, #16
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear the Update Display Done flag before starting the update display request */
  __HAL_LCD_CLEAR_FLAG(hlcd, LCD_FLAG_UDD);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2208      	movs	r2, #8
 8002e40:	60da      	str	r2, [r3, #12]

  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	689a      	ldr	r2, [r3, #8]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f042 0204 	orr.w	r2, r2, #4
 8002e50:	609a      	str	r2, [r3, #8]

  /* Get timeout */
  tickstart = HAL_GetTick();
 8002e52:	f7ff fb8d 	bl	8002570 <HAL_GetTick>
 8002e56:	60f8      	str	r0, [r7, #12]

  /*!< Wait Until the LCD display is done */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
 8002e58:	e010      	b.n	8002e7c <HAL_LCD_UpdateDisplayRequest+0x4a>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8002e5a:	f7ff fb89 	bl	8002570 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e68:	d908      	bls.n	8002e7c <HAL_LCD_UpdateDisplayRequest+0x4a>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_UDD;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2204      	movs	r2, #4
 8002e6e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hlcd);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e00f      	b.n	8002e9c <HAL_LCD_UpdateDisplayRequest+0x6a>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 0308 	and.w	r3, r3, #8
 8002e86:	2b08      	cmp	r3, #8
 8002e88:	d1e7      	bne.n	8002e5a <HAL_LCD_UpdateDisplayRequest+0x28>
    }
  }

  hlcd->State = HAL_LCD_STATE_READY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hlcd);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3710      	adds	r7, #16
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <LCD_WaitForSynchro>:
  * @brief  Wait until the LCD FCR register is synchronized in the LCDCLK domain.
  *   This function must be called after any write operation to LCD_FCR register.
  * @retval None
  */
HAL_StatusTypeDef LCD_WaitForSynchro(LCD_HandleTypeDef *hlcd)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 8002eac:	f7ff fb60 	bl	8002570 <HAL_GetTick>
 8002eb0:	60f8      	str	r0, [r7, #12]

  /* Loop until FCRSF flag is set */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8002eb2:	e00c      	b.n	8002ece <LCD_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8002eb4:	f7ff fb5c 	bl	8002570 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ec2:	d904      	bls.n	8002ece <LCD_WaitForSynchro+0x2a>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e007      	b.n	8002ede <LCD_WaitForSynchro+0x3a>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f003 0320 	and.w	r3, r3, #32
 8002ed8:	2b20      	cmp	r3, #32
 8002eda:	d1eb      	bne.n	8002eb4 <LCD_WaitForSynchro+0x10>
    }
  }

  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3710      	adds	r7, #16
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
	...

08002ee8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002eec:	4b04      	ldr	r3, [pc, #16]	; (8002f00 <HAL_PWREx_GetVoltageRange+0x18>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	40007000 	.word	0x40007000

08002f04 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f12:	d130      	bne.n	8002f76 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f14:	4b23      	ldr	r3, [pc, #140]	; (8002fa4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f20:	d038      	beq.n	8002f94 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f22:	4b20      	ldr	r3, [pc, #128]	; (8002fa4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f2a:	4a1e      	ldr	r2, [pc, #120]	; (8002fa4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f30:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f32:	4b1d      	ldr	r3, [pc, #116]	; (8002fa8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2232      	movs	r2, #50	; 0x32
 8002f38:	fb02 f303 	mul.w	r3, r2, r3
 8002f3c:	4a1b      	ldr	r2, [pc, #108]	; (8002fac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f42:	0c9b      	lsrs	r3, r3, #18
 8002f44:	3301      	adds	r3, #1
 8002f46:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f48:	e002      	b.n	8002f50 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f50:	4b14      	ldr	r3, [pc, #80]	; (8002fa4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f5c:	d102      	bne.n	8002f64 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d1f2      	bne.n	8002f4a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f64:	4b0f      	ldr	r3, [pc, #60]	; (8002fa4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f66:	695b      	ldr	r3, [r3, #20]
 8002f68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f70:	d110      	bne.n	8002f94 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e00f      	b.n	8002f96 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f76:	4b0b      	ldr	r3, [pc, #44]	; (8002fa4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f82:	d007      	beq.n	8002f94 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f84:	4b07      	ldr	r3, [pc, #28]	; (8002fa4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f8c:	4a05      	ldr	r2, [pc, #20]	; (8002fa4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f92:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3714      	adds	r7, #20
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	40007000 	.word	0x40007000
 8002fa8:	20000000 	.word	0x20000000
 8002fac:	431bde83 	.word	0x431bde83

08002fb0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b088      	sub	sp, #32
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e3ca      	b.n	8003758 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fc2:	4b97      	ldr	r3, [pc, #604]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f003 030c 	and.w	r3, r3, #12
 8002fca:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fcc:	4b94      	ldr	r3, [pc, #592]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	f003 0303 	and.w	r3, r3, #3
 8002fd4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0310 	and.w	r3, r3, #16
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	f000 80e4 	beq.w	80031ac <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d007      	beq.n	8002ffa <HAL_RCC_OscConfig+0x4a>
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	2b0c      	cmp	r3, #12
 8002fee:	f040 808b 	bne.w	8003108 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	f040 8087 	bne.w	8003108 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ffa:	4b89      	ldr	r3, [pc, #548]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d005      	beq.n	8003012 <HAL_RCC_OscConfig+0x62>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e3a2      	b.n	8003758 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a1a      	ldr	r2, [r3, #32]
 8003016:	4b82      	ldr	r3, [pc, #520]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0308 	and.w	r3, r3, #8
 800301e:	2b00      	cmp	r3, #0
 8003020:	d004      	beq.n	800302c <HAL_RCC_OscConfig+0x7c>
 8003022:	4b7f      	ldr	r3, [pc, #508]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800302a:	e005      	b.n	8003038 <HAL_RCC_OscConfig+0x88>
 800302c:	4b7c      	ldr	r3, [pc, #496]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 800302e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003032:	091b      	lsrs	r3, r3, #4
 8003034:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003038:	4293      	cmp	r3, r2
 800303a:	d223      	bcs.n	8003084 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a1b      	ldr	r3, [r3, #32]
 8003040:	4618      	mov	r0, r3
 8003042:	f000 fd55 	bl	8003af0 <RCC_SetFlashLatencyFromMSIRange>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d001      	beq.n	8003050 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e383      	b.n	8003758 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003050:	4b73      	ldr	r3, [pc, #460]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a72      	ldr	r2, [pc, #456]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 8003056:	f043 0308 	orr.w	r3, r3, #8
 800305a:	6013      	str	r3, [r2, #0]
 800305c:	4b70      	ldr	r3, [pc, #448]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a1b      	ldr	r3, [r3, #32]
 8003068:	496d      	ldr	r1, [pc, #436]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 800306a:	4313      	orrs	r3, r2
 800306c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800306e:	4b6c      	ldr	r3, [pc, #432]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	69db      	ldr	r3, [r3, #28]
 800307a:	021b      	lsls	r3, r3, #8
 800307c:	4968      	ldr	r1, [pc, #416]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 800307e:	4313      	orrs	r3, r2
 8003080:	604b      	str	r3, [r1, #4]
 8003082:	e025      	b.n	80030d0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003084:	4b66      	ldr	r3, [pc, #408]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a65      	ldr	r2, [pc, #404]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 800308a:	f043 0308 	orr.w	r3, r3, #8
 800308e:	6013      	str	r3, [r2, #0]
 8003090:	4b63      	ldr	r3, [pc, #396]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a1b      	ldr	r3, [r3, #32]
 800309c:	4960      	ldr	r1, [pc, #384]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030a2:	4b5f      	ldr	r3, [pc, #380]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	69db      	ldr	r3, [r3, #28]
 80030ae:	021b      	lsls	r3, r3, #8
 80030b0:	495b      	ldr	r1, [pc, #364]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d109      	bne.n	80030d0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a1b      	ldr	r3, [r3, #32]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f000 fd15 	bl	8003af0 <RCC_SetFlashLatencyFromMSIRange>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e343      	b.n	8003758 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030d0:	f000 fc4a 	bl	8003968 <HAL_RCC_GetSysClockFreq>
 80030d4:	4602      	mov	r2, r0
 80030d6:	4b52      	ldr	r3, [pc, #328]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	091b      	lsrs	r3, r3, #4
 80030dc:	f003 030f 	and.w	r3, r3, #15
 80030e0:	4950      	ldr	r1, [pc, #320]	; (8003224 <HAL_RCC_OscConfig+0x274>)
 80030e2:	5ccb      	ldrb	r3, [r1, r3]
 80030e4:	f003 031f 	and.w	r3, r3, #31
 80030e8:	fa22 f303 	lsr.w	r3, r2, r3
 80030ec:	4a4e      	ldr	r2, [pc, #312]	; (8003228 <HAL_RCC_OscConfig+0x278>)
 80030ee:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80030f0:	4b4e      	ldr	r3, [pc, #312]	; (800322c <HAL_RCC_OscConfig+0x27c>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7ff f9eb 	bl	80024d0 <HAL_InitTick>
 80030fa:	4603      	mov	r3, r0
 80030fc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80030fe:	7bfb      	ldrb	r3, [r7, #15]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d052      	beq.n	80031aa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003104:	7bfb      	ldrb	r3, [r7, #15]
 8003106:	e327      	b.n	8003758 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d032      	beq.n	8003176 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003110:	4b43      	ldr	r3, [pc, #268]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a42      	ldr	r2, [pc, #264]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 8003116:	f043 0301 	orr.w	r3, r3, #1
 800311a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800311c:	f7ff fa28 	bl	8002570 <HAL_GetTick>
 8003120:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003122:	e008      	b.n	8003136 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003124:	f7ff fa24 	bl	8002570 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b02      	cmp	r3, #2
 8003130:	d901      	bls.n	8003136 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e310      	b.n	8003758 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003136:	4b3a      	ldr	r3, [pc, #232]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	2b00      	cmp	r3, #0
 8003140:	d0f0      	beq.n	8003124 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003142:	4b37      	ldr	r3, [pc, #220]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a36      	ldr	r2, [pc, #216]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 8003148:	f043 0308 	orr.w	r3, r3, #8
 800314c:	6013      	str	r3, [r2, #0]
 800314e:	4b34      	ldr	r3, [pc, #208]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a1b      	ldr	r3, [r3, #32]
 800315a:	4931      	ldr	r1, [pc, #196]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 800315c:	4313      	orrs	r3, r2
 800315e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003160:	4b2f      	ldr	r3, [pc, #188]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	69db      	ldr	r3, [r3, #28]
 800316c:	021b      	lsls	r3, r3, #8
 800316e:	492c      	ldr	r1, [pc, #176]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 8003170:	4313      	orrs	r3, r2
 8003172:	604b      	str	r3, [r1, #4]
 8003174:	e01a      	b.n	80031ac <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003176:	4b2a      	ldr	r3, [pc, #168]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a29      	ldr	r2, [pc, #164]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 800317c:	f023 0301 	bic.w	r3, r3, #1
 8003180:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003182:	f7ff f9f5 	bl	8002570 <HAL_GetTick>
 8003186:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003188:	e008      	b.n	800319c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800318a:	f7ff f9f1 	bl	8002570 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	2b02      	cmp	r3, #2
 8003196:	d901      	bls.n	800319c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e2dd      	b.n	8003758 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800319c:	4b20      	ldr	r3, [pc, #128]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d1f0      	bne.n	800318a <HAL_RCC_OscConfig+0x1da>
 80031a8:	e000      	b.n	80031ac <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80031aa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0301 	and.w	r3, r3, #1
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d074      	beq.n	80032a2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	2b08      	cmp	r3, #8
 80031bc:	d005      	beq.n	80031ca <HAL_RCC_OscConfig+0x21a>
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	2b0c      	cmp	r3, #12
 80031c2:	d10e      	bne.n	80031e2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	2b03      	cmp	r3, #3
 80031c8:	d10b      	bne.n	80031e2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031ca:	4b15      	ldr	r3, [pc, #84]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d064      	beq.n	80032a0 <HAL_RCC_OscConfig+0x2f0>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d160      	bne.n	80032a0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e2ba      	b.n	8003758 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ea:	d106      	bne.n	80031fa <HAL_RCC_OscConfig+0x24a>
 80031ec:	4b0c      	ldr	r3, [pc, #48]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a0b      	ldr	r2, [pc, #44]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 80031f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031f6:	6013      	str	r3, [r2, #0]
 80031f8:	e026      	b.n	8003248 <HAL_RCC_OscConfig+0x298>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003202:	d115      	bne.n	8003230 <HAL_RCC_OscConfig+0x280>
 8003204:	4b06      	ldr	r3, [pc, #24]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a05      	ldr	r2, [pc, #20]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 800320a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800320e:	6013      	str	r3, [r2, #0]
 8003210:	4b03      	ldr	r3, [pc, #12]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a02      	ldr	r2, [pc, #8]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 8003216:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800321a:	6013      	str	r3, [r2, #0]
 800321c:	e014      	b.n	8003248 <HAL_RCC_OscConfig+0x298>
 800321e:	bf00      	nop
 8003220:	40021000 	.word	0x40021000
 8003224:	08005d00 	.word	0x08005d00
 8003228:	20000000 	.word	0x20000000
 800322c:	20000038 	.word	0x20000038
 8003230:	4ba0      	ldr	r3, [pc, #640]	; (80034b4 <HAL_RCC_OscConfig+0x504>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a9f      	ldr	r2, [pc, #636]	; (80034b4 <HAL_RCC_OscConfig+0x504>)
 8003236:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800323a:	6013      	str	r3, [r2, #0]
 800323c:	4b9d      	ldr	r3, [pc, #628]	; (80034b4 <HAL_RCC_OscConfig+0x504>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a9c      	ldr	r2, [pc, #624]	; (80034b4 <HAL_RCC_OscConfig+0x504>)
 8003242:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003246:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d013      	beq.n	8003278 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003250:	f7ff f98e 	bl	8002570 <HAL_GetTick>
 8003254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003256:	e008      	b.n	800326a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003258:	f7ff f98a 	bl	8002570 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b64      	cmp	r3, #100	; 0x64
 8003264:	d901      	bls.n	800326a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e276      	b.n	8003758 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800326a:	4b92      	ldr	r3, [pc, #584]	; (80034b4 <HAL_RCC_OscConfig+0x504>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d0f0      	beq.n	8003258 <HAL_RCC_OscConfig+0x2a8>
 8003276:	e014      	b.n	80032a2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003278:	f7ff f97a 	bl	8002570 <HAL_GetTick>
 800327c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800327e:	e008      	b.n	8003292 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003280:	f7ff f976 	bl	8002570 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b64      	cmp	r3, #100	; 0x64
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e262      	b.n	8003758 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003292:	4b88      	ldr	r3, [pc, #544]	; (80034b4 <HAL_RCC_OscConfig+0x504>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1f0      	bne.n	8003280 <HAL_RCC_OscConfig+0x2d0>
 800329e:	e000      	b.n	80032a2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d060      	beq.n	8003370 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	2b04      	cmp	r3, #4
 80032b2:	d005      	beq.n	80032c0 <HAL_RCC_OscConfig+0x310>
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	2b0c      	cmp	r3, #12
 80032b8:	d119      	bne.n	80032ee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d116      	bne.n	80032ee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032c0:	4b7c      	ldr	r3, [pc, #496]	; (80034b4 <HAL_RCC_OscConfig+0x504>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d005      	beq.n	80032d8 <HAL_RCC_OscConfig+0x328>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d101      	bne.n	80032d8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e23f      	b.n	8003758 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032d8:	4b76      	ldr	r3, [pc, #472]	; (80034b4 <HAL_RCC_OscConfig+0x504>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	691b      	ldr	r3, [r3, #16]
 80032e4:	061b      	lsls	r3, r3, #24
 80032e6:	4973      	ldr	r1, [pc, #460]	; (80034b4 <HAL_RCC_OscConfig+0x504>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032ec:	e040      	b.n	8003370 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d023      	beq.n	800333e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032f6:	4b6f      	ldr	r3, [pc, #444]	; (80034b4 <HAL_RCC_OscConfig+0x504>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a6e      	ldr	r2, [pc, #440]	; (80034b4 <HAL_RCC_OscConfig+0x504>)
 80032fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003300:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003302:	f7ff f935 	bl	8002570 <HAL_GetTick>
 8003306:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003308:	e008      	b.n	800331c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800330a:	f7ff f931 	bl	8002570 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	2b02      	cmp	r3, #2
 8003316:	d901      	bls.n	800331c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e21d      	b.n	8003758 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800331c:	4b65      	ldr	r3, [pc, #404]	; (80034b4 <HAL_RCC_OscConfig+0x504>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003324:	2b00      	cmp	r3, #0
 8003326:	d0f0      	beq.n	800330a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003328:	4b62      	ldr	r3, [pc, #392]	; (80034b4 <HAL_RCC_OscConfig+0x504>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	061b      	lsls	r3, r3, #24
 8003336:	495f      	ldr	r1, [pc, #380]	; (80034b4 <HAL_RCC_OscConfig+0x504>)
 8003338:	4313      	orrs	r3, r2
 800333a:	604b      	str	r3, [r1, #4]
 800333c:	e018      	b.n	8003370 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800333e:	4b5d      	ldr	r3, [pc, #372]	; (80034b4 <HAL_RCC_OscConfig+0x504>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a5c      	ldr	r2, [pc, #368]	; (80034b4 <HAL_RCC_OscConfig+0x504>)
 8003344:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003348:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800334a:	f7ff f911 	bl	8002570 <HAL_GetTick>
 800334e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003350:	e008      	b.n	8003364 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003352:	f7ff f90d 	bl	8002570 <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	2b02      	cmp	r3, #2
 800335e:	d901      	bls.n	8003364 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e1f9      	b.n	8003758 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003364:	4b53      	ldr	r3, [pc, #332]	; (80034b4 <HAL_RCC_OscConfig+0x504>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800336c:	2b00      	cmp	r3, #0
 800336e:	d1f0      	bne.n	8003352 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0308 	and.w	r3, r3, #8
 8003378:	2b00      	cmp	r3, #0
 800337a:	d03c      	beq.n	80033f6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	695b      	ldr	r3, [r3, #20]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d01c      	beq.n	80033be <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003384:	4b4b      	ldr	r3, [pc, #300]	; (80034b4 <HAL_RCC_OscConfig+0x504>)
 8003386:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800338a:	4a4a      	ldr	r2, [pc, #296]	; (80034b4 <HAL_RCC_OscConfig+0x504>)
 800338c:	f043 0301 	orr.w	r3, r3, #1
 8003390:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003394:	f7ff f8ec 	bl	8002570 <HAL_GetTick>
 8003398:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800339a:	e008      	b.n	80033ae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800339c:	f7ff f8e8 	bl	8002570 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e1d4      	b.n	8003758 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033ae:	4b41      	ldr	r3, [pc, #260]	; (80034b4 <HAL_RCC_OscConfig+0x504>)
 80033b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d0ef      	beq.n	800339c <HAL_RCC_OscConfig+0x3ec>
 80033bc:	e01b      	b.n	80033f6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033be:	4b3d      	ldr	r3, [pc, #244]	; (80034b4 <HAL_RCC_OscConfig+0x504>)
 80033c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033c4:	4a3b      	ldr	r2, [pc, #236]	; (80034b4 <HAL_RCC_OscConfig+0x504>)
 80033c6:	f023 0301 	bic.w	r3, r3, #1
 80033ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ce:	f7ff f8cf 	bl	8002570 <HAL_GetTick>
 80033d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033d4:	e008      	b.n	80033e8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033d6:	f7ff f8cb 	bl	8002570 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d901      	bls.n	80033e8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e1b7      	b.n	8003758 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033e8:	4b32      	ldr	r3, [pc, #200]	; (80034b4 <HAL_RCC_OscConfig+0x504>)
 80033ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1ef      	bne.n	80033d6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0304 	and.w	r3, r3, #4
 80033fe:	2b00      	cmp	r3, #0
 8003400:	f000 80a6 	beq.w	8003550 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003404:	2300      	movs	r3, #0
 8003406:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003408:	4b2a      	ldr	r3, [pc, #168]	; (80034b4 <HAL_RCC_OscConfig+0x504>)
 800340a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800340c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d10d      	bne.n	8003430 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003414:	4b27      	ldr	r3, [pc, #156]	; (80034b4 <HAL_RCC_OscConfig+0x504>)
 8003416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003418:	4a26      	ldr	r2, [pc, #152]	; (80034b4 <HAL_RCC_OscConfig+0x504>)
 800341a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800341e:	6593      	str	r3, [r2, #88]	; 0x58
 8003420:	4b24      	ldr	r3, [pc, #144]	; (80034b4 <HAL_RCC_OscConfig+0x504>)
 8003422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003424:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003428:	60bb      	str	r3, [r7, #8]
 800342a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800342c:	2301      	movs	r3, #1
 800342e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003430:	4b21      	ldr	r3, [pc, #132]	; (80034b8 <HAL_RCC_OscConfig+0x508>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003438:	2b00      	cmp	r3, #0
 800343a:	d118      	bne.n	800346e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800343c:	4b1e      	ldr	r3, [pc, #120]	; (80034b8 <HAL_RCC_OscConfig+0x508>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a1d      	ldr	r2, [pc, #116]	; (80034b8 <HAL_RCC_OscConfig+0x508>)
 8003442:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003446:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003448:	f7ff f892 	bl	8002570 <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800344e:	e008      	b.n	8003462 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003450:	f7ff f88e 	bl	8002570 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b02      	cmp	r3, #2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e17a      	b.n	8003758 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003462:	4b15      	ldr	r3, [pc, #84]	; (80034b8 <HAL_RCC_OscConfig+0x508>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800346a:	2b00      	cmp	r3, #0
 800346c:	d0f0      	beq.n	8003450 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d108      	bne.n	8003488 <HAL_RCC_OscConfig+0x4d8>
 8003476:	4b0f      	ldr	r3, [pc, #60]	; (80034b4 <HAL_RCC_OscConfig+0x504>)
 8003478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800347c:	4a0d      	ldr	r2, [pc, #52]	; (80034b4 <HAL_RCC_OscConfig+0x504>)
 800347e:	f043 0301 	orr.w	r3, r3, #1
 8003482:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003486:	e029      	b.n	80034dc <HAL_RCC_OscConfig+0x52c>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	2b05      	cmp	r3, #5
 800348e:	d115      	bne.n	80034bc <HAL_RCC_OscConfig+0x50c>
 8003490:	4b08      	ldr	r3, [pc, #32]	; (80034b4 <HAL_RCC_OscConfig+0x504>)
 8003492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003496:	4a07      	ldr	r2, [pc, #28]	; (80034b4 <HAL_RCC_OscConfig+0x504>)
 8003498:	f043 0304 	orr.w	r3, r3, #4
 800349c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034a0:	4b04      	ldr	r3, [pc, #16]	; (80034b4 <HAL_RCC_OscConfig+0x504>)
 80034a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a6:	4a03      	ldr	r2, [pc, #12]	; (80034b4 <HAL_RCC_OscConfig+0x504>)
 80034a8:	f043 0301 	orr.w	r3, r3, #1
 80034ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034b0:	e014      	b.n	80034dc <HAL_RCC_OscConfig+0x52c>
 80034b2:	bf00      	nop
 80034b4:	40021000 	.word	0x40021000
 80034b8:	40007000 	.word	0x40007000
 80034bc:	4b9c      	ldr	r3, [pc, #624]	; (8003730 <HAL_RCC_OscConfig+0x780>)
 80034be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c2:	4a9b      	ldr	r2, [pc, #620]	; (8003730 <HAL_RCC_OscConfig+0x780>)
 80034c4:	f023 0301 	bic.w	r3, r3, #1
 80034c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034cc:	4b98      	ldr	r3, [pc, #608]	; (8003730 <HAL_RCC_OscConfig+0x780>)
 80034ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d2:	4a97      	ldr	r2, [pc, #604]	; (8003730 <HAL_RCC_OscConfig+0x780>)
 80034d4:	f023 0304 	bic.w	r3, r3, #4
 80034d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d016      	beq.n	8003512 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e4:	f7ff f844 	bl	8002570 <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034ea:	e00a      	b.n	8003502 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ec:	f7ff f840 	bl	8002570 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e12a      	b.n	8003758 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003502:	4b8b      	ldr	r3, [pc, #556]	; (8003730 <HAL_RCC_OscConfig+0x780>)
 8003504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d0ed      	beq.n	80034ec <HAL_RCC_OscConfig+0x53c>
 8003510:	e015      	b.n	800353e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003512:	f7ff f82d 	bl	8002570 <HAL_GetTick>
 8003516:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003518:	e00a      	b.n	8003530 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800351a:	f7ff f829 	bl	8002570 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	f241 3288 	movw	r2, #5000	; 0x1388
 8003528:	4293      	cmp	r3, r2
 800352a:	d901      	bls.n	8003530 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e113      	b.n	8003758 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003530:	4b7f      	ldr	r3, [pc, #508]	; (8003730 <HAL_RCC_OscConfig+0x780>)
 8003532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1ed      	bne.n	800351a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800353e:	7ffb      	ldrb	r3, [r7, #31]
 8003540:	2b01      	cmp	r3, #1
 8003542:	d105      	bne.n	8003550 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003544:	4b7a      	ldr	r3, [pc, #488]	; (8003730 <HAL_RCC_OscConfig+0x780>)
 8003546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003548:	4a79      	ldr	r2, [pc, #484]	; (8003730 <HAL_RCC_OscConfig+0x780>)
 800354a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800354e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003554:	2b00      	cmp	r3, #0
 8003556:	f000 80fe 	beq.w	8003756 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355e:	2b02      	cmp	r3, #2
 8003560:	f040 80d0 	bne.w	8003704 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003564:	4b72      	ldr	r3, [pc, #456]	; (8003730 <HAL_RCC_OscConfig+0x780>)
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	f003 0203 	and.w	r2, r3, #3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003574:	429a      	cmp	r2, r3
 8003576:	d130      	bne.n	80035da <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003582:	3b01      	subs	r3, #1
 8003584:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003586:	429a      	cmp	r2, r3
 8003588:	d127      	bne.n	80035da <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003594:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003596:	429a      	cmp	r2, r3
 8003598:	d11f      	bne.n	80035da <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80035a4:	2a07      	cmp	r2, #7
 80035a6:	bf14      	ite	ne
 80035a8:	2201      	movne	r2, #1
 80035aa:	2200      	moveq	r2, #0
 80035ac:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d113      	bne.n	80035da <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035bc:	085b      	lsrs	r3, r3, #1
 80035be:	3b01      	subs	r3, #1
 80035c0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d109      	bne.n	80035da <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d0:	085b      	lsrs	r3, r3, #1
 80035d2:	3b01      	subs	r3, #1
 80035d4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d06e      	beq.n	80036b8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	2b0c      	cmp	r3, #12
 80035de:	d069      	beq.n	80036b4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80035e0:	4b53      	ldr	r3, [pc, #332]	; (8003730 <HAL_RCC_OscConfig+0x780>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d105      	bne.n	80035f8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80035ec:	4b50      	ldr	r3, [pc, #320]	; (8003730 <HAL_RCC_OscConfig+0x780>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d001      	beq.n	80035fc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e0ad      	b.n	8003758 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80035fc:	4b4c      	ldr	r3, [pc, #304]	; (8003730 <HAL_RCC_OscConfig+0x780>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a4b      	ldr	r2, [pc, #300]	; (8003730 <HAL_RCC_OscConfig+0x780>)
 8003602:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003606:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003608:	f7fe ffb2 	bl	8002570 <HAL_GetTick>
 800360c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800360e:	e008      	b.n	8003622 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003610:	f7fe ffae 	bl	8002570 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b02      	cmp	r3, #2
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e09a      	b.n	8003758 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003622:	4b43      	ldr	r3, [pc, #268]	; (8003730 <HAL_RCC_OscConfig+0x780>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1f0      	bne.n	8003610 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800362e:	4b40      	ldr	r3, [pc, #256]	; (8003730 <HAL_RCC_OscConfig+0x780>)
 8003630:	68da      	ldr	r2, [r3, #12]
 8003632:	4b40      	ldr	r3, [pc, #256]	; (8003734 <HAL_RCC_OscConfig+0x784>)
 8003634:	4013      	ands	r3, r2
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800363e:	3a01      	subs	r2, #1
 8003640:	0112      	lsls	r2, r2, #4
 8003642:	4311      	orrs	r1, r2
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003648:	0212      	lsls	r2, r2, #8
 800364a:	4311      	orrs	r1, r2
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003650:	0852      	lsrs	r2, r2, #1
 8003652:	3a01      	subs	r2, #1
 8003654:	0552      	lsls	r2, r2, #21
 8003656:	4311      	orrs	r1, r2
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800365c:	0852      	lsrs	r2, r2, #1
 800365e:	3a01      	subs	r2, #1
 8003660:	0652      	lsls	r2, r2, #25
 8003662:	4311      	orrs	r1, r2
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003668:	0912      	lsrs	r2, r2, #4
 800366a:	0452      	lsls	r2, r2, #17
 800366c:	430a      	orrs	r2, r1
 800366e:	4930      	ldr	r1, [pc, #192]	; (8003730 <HAL_RCC_OscConfig+0x780>)
 8003670:	4313      	orrs	r3, r2
 8003672:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003674:	4b2e      	ldr	r3, [pc, #184]	; (8003730 <HAL_RCC_OscConfig+0x780>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a2d      	ldr	r2, [pc, #180]	; (8003730 <HAL_RCC_OscConfig+0x780>)
 800367a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800367e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003680:	4b2b      	ldr	r3, [pc, #172]	; (8003730 <HAL_RCC_OscConfig+0x780>)
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	4a2a      	ldr	r2, [pc, #168]	; (8003730 <HAL_RCC_OscConfig+0x780>)
 8003686:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800368a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800368c:	f7fe ff70 	bl	8002570 <HAL_GetTick>
 8003690:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003692:	e008      	b.n	80036a6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003694:	f7fe ff6c 	bl	8002570 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d901      	bls.n	80036a6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e058      	b.n	8003758 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036a6:	4b22      	ldr	r3, [pc, #136]	; (8003730 <HAL_RCC_OscConfig+0x780>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d0f0      	beq.n	8003694 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036b2:	e050      	b.n	8003756 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e04f      	b.n	8003758 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036b8:	4b1d      	ldr	r3, [pc, #116]	; (8003730 <HAL_RCC_OscConfig+0x780>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d148      	bne.n	8003756 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80036c4:	4b1a      	ldr	r3, [pc, #104]	; (8003730 <HAL_RCC_OscConfig+0x780>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a19      	ldr	r2, [pc, #100]	; (8003730 <HAL_RCC_OscConfig+0x780>)
 80036ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036ce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036d0:	4b17      	ldr	r3, [pc, #92]	; (8003730 <HAL_RCC_OscConfig+0x780>)
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	4a16      	ldr	r2, [pc, #88]	; (8003730 <HAL_RCC_OscConfig+0x780>)
 80036d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036da:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80036dc:	f7fe ff48 	bl	8002570 <HAL_GetTick>
 80036e0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036e2:	e008      	b.n	80036f6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036e4:	f7fe ff44 	bl	8002570 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e030      	b.n	8003758 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036f6:	4b0e      	ldr	r3, [pc, #56]	; (8003730 <HAL_RCC_OscConfig+0x780>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d0f0      	beq.n	80036e4 <HAL_RCC_OscConfig+0x734>
 8003702:	e028      	b.n	8003756 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	2b0c      	cmp	r3, #12
 8003708:	d023      	beq.n	8003752 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800370a:	4b09      	ldr	r3, [pc, #36]	; (8003730 <HAL_RCC_OscConfig+0x780>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a08      	ldr	r2, [pc, #32]	; (8003730 <HAL_RCC_OscConfig+0x780>)
 8003710:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003714:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003716:	f7fe ff2b 	bl	8002570 <HAL_GetTick>
 800371a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800371c:	e00c      	b.n	8003738 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800371e:	f7fe ff27 	bl	8002570 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	2b02      	cmp	r3, #2
 800372a:	d905      	bls.n	8003738 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e013      	b.n	8003758 <HAL_RCC_OscConfig+0x7a8>
 8003730:	40021000 	.word	0x40021000
 8003734:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003738:	4b09      	ldr	r3, [pc, #36]	; (8003760 <HAL_RCC_OscConfig+0x7b0>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1ec      	bne.n	800371e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003744:	4b06      	ldr	r3, [pc, #24]	; (8003760 <HAL_RCC_OscConfig+0x7b0>)
 8003746:	68da      	ldr	r2, [r3, #12]
 8003748:	4905      	ldr	r1, [pc, #20]	; (8003760 <HAL_RCC_OscConfig+0x7b0>)
 800374a:	4b06      	ldr	r3, [pc, #24]	; (8003764 <HAL_RCC_OscConfig+0x7b4>)
 800374c:	4013      	ands	r3, r2
 800374e:	60cb      	str	r3, [r1, #12]
 8003750:	e001      	b.n	8003756 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e000      	b.n	8003758 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	3720      	adds	r7, #32
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	40021000 	.word	0x40021000
 8003764:	feeefffc 	.word	0xfeeefffc

08003768 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d101      	bne.n	800377c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e0e7      	b.n	800394c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800377c:	4b75      	ldr	r3, [pc, #468]	; (8003954 <HAL_RCC_ClockConfig+0x1ec>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0307 	and.w	r3, r3, #7
 8003784:	683a      	ldr	r2, [r7, #0]
 8003786:	429a      	cmp	r2, r3
 8003788:	d910      	bls.n	80037ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800378a:	4b72      	ldr	r3, [pc, #456]	; (8003954 <HAL_RCC_ClockConfig+0x1ec>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f023 0207 	bic.w	r2, r3, #7
 8003792:	4970      	ldr	r1, [pc, #448]	; (8003954 <HAL_RCC_ClockConfig+0x1ec>)
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	4313      	orrs	r3, r2
 8003798:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800379a:	4b6e      	ldr	r3, [pc, #440]	; (8003954 <HAL_RCC_ClockConfig+0x1ec>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0307 	and.w	r3, r3, #7
 80037a2:	683a      	ldr	r2, [r7, #0]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d001      	beq.n	80037ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e0cf      	b.n	800394c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0302 	and.w	r3, r3, #2
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d010      	beq.n	80037da <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	689a      	ldr	r2, [r3, #8]
 80037bc:	4b66      	ldr	r3, [pc, #408]	; (8003958 <HAL_RCC_ClockConfig+0x1f0>)
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d908      	bls.n	80037da <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037c8:	4b63      	ldr	r3, [pc, #396]	; (8003958 <HAL_RCC_ClockConfig+0x1f0>)
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	4960      	ldr	r1, [pc, #384]	; (8003958 <HAL_RCC_ClockConfig+0x1f0>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d04c      	beq.n	8003880 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	2b03      	cmp	r3, #3
 80037ec:	d107      	bne.n	80037fe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037ee:	4b5a      	ldr	r3, [pc, #360]	; (8003958 <HAL_RCC_ClockConfig+0x1f0>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d121      	bne.n	800383e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e0a6      	b.n	800394c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	2b02      	cmp	r3, #2
 8003804:	d107      	bne.n	8003816 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003806:	4b54      	ldr	r3, [pc, #336]	; (8003958 <HAL_RCC_ClockConfig+0x1f0>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d115      	bne.n	800383e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e09a      	b.n	800394c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d107      	bne.n	800382e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800381e:	4b4e      	ldr	r3, [pc, #312]	; (8003958 <HAL_RCC_ClockConfig+0x1f0>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d109      	bne.n	800383e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e08e      	b.n	800394c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800382e:	4b4a      	ldr	r3, [pc, #296]	; (8003958 <HAL_RCC_ClockConfig+0x1f0>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003836:	2b00      	cmp	r3, #0
 8003838:	d101      	bne.n	800383e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e086      	b.n	800394c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800383e:	4b46      	ldr	r3, [pc, #280]	; (8003958 <HAL_RCC_ClockConfig+0x1f0>)
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f023 0203 	bic.w	r2, r3, #3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	4943      	ldr	r1, [pc, #268]	; (8003958 <HAL_RCC_ClockConfig+0x1f0>)
 800384c:	4313      	orrs	r3, r2
 800384e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003850:	f7fe fe8e 	bl	8002570 <HAL_GetTick>
 8003854:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003856:	e00a      	b.n	800386e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003858:	f7fe fe8a 	bl	8002570 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	f241 3288 	movw	r2, #5000	; 0x1388
 8003866:	4293      	cmp	r3, r2
 8003868:	d901      	bls.n	800386e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e06e      	b.n	800394c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800386e:	4b3a      	ldr	r3, [pc, #232]	; (8003958 <HAL_RCC_ClockConfig+0x1f0>)
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f003 020c 	and.w	r2, r3, #12
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	429a      	cmp	r2, r3
 800387e:	d1eb      	bne.n	8003858 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0302 	and.w	r3, r3, #2
 8003888:	2b00      	cmp	r3, #0
 800388a:	d010      	beq.n	80038ae <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689a      	ldr	r2, [r3, #8]
 8003890:	4b31      	ldr	r3, [pc, #196]	; (8003958 <HAL_RCC_ClockConfig+0x1f0>)
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003898:	429a      	cmp	r2, r3
 800389a:	d208      	bcs.n	80038ae <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800389c:	4b2e      	ldr	r3, [pc, #184]	; (8003958 <HAL_RCC_ClockConfig+0x1f0>)
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	492b      	ldr	r1, [pc, #172]	; (8003958 <HAL_RCC_ClockConfig+0x1f0>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038ae:	4b29      	ldr	r3, [pc, #164]	; (8003954 <HAL_RCC_ClockConfig+0x1ec>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0307 	and.w	r3, r3, #7
 80038b6:	683a      	ldr	r2, [r7, #0]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d210      	bcs.n	80038de <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038bc:	4b25      	ldr	r3, [pc, #148]	; (8003954 <HAL_RCC_ClockConfig+0x1ec>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f023 0207 	bic.w	r2, r3, #7
 80038c4:	4923      	ldr	r1, [pc, #140]	; (8003954 <HAL_RCC_ClockConfig+0x1ec>)
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038cc:	4b21      	ldr	r3, [pc, #132]	; (8003954 <HAL_RCC_ClockConfig+0x1ec>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0307 	and.w	r3, r3, #7
 80038d4:	683a      	ldr	r2, [r7, #0]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d001      	beq.n	80038de <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e036      	b.n	800394c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0304 	and.w	r3, r3, #4
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d008      	beq.n	80038fc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038ea:	4b1b      	ldr	r3, [pc, #108]	; (8003958 <HAL_RCC_ClockConfig+0x1f0>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	4918      	ldr	r1, [pc, #96]	; (8003958 <HAL_RCC_ClockConfig+0x1f0>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0308 	and.w	r3, r3, #8
 8003904:	2b00      	cmp	r3, #0
 8003906:	d009      	beq.n	800391c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003908:	4b13      	ldr	r3, [pc, #76]	; (8003958 <HAL_RCC_ClockConfig+0x1f0>)
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	00db      	lsls	r3, r3, #3
 8003916:	4910      	ldr	r1, [pc, #64]	; (8003958 <HAL_RCC_ClockConfig+0x1f0>)
 8003918:	4313      	orrs	r3, r2
 800391a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800391c:	f000 f824 	bl	8003968 <HAL_RCC_GetSysClockFreq>
 8003920:	4602      	mov	r2, r0
 8003922:	4b0d      	ldr	r3, [pc, #52]	; (8003958 <HAL_RCC_ClockConfig+0x1f0>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	091b      	lsrs	r3, r3, #4
 8003928:	f003 030f 	and.w	r3, r3, #15
 800392c:	490b      	ldr	r1, [pc, #44]	; (800395c <HAL_RCC_ClockConfig+0x1f4>)
 800392e:	5ccb      	ldrb	r3, [r1, r3]
 8003930:	f003 031f 	and.w	r3, r3, #31
 8003934:	fa22 f303 	lsr.w	r3, r2, r3
 8003938:	4a09      	ldr	r2, [pc, #36]	; (8003960 <HAL_RCC_ClockConfig+0x1f8>)
 800393a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800393c:	4b09      	ldr	r3, [pc, #36]	; (8003964 <HAL_RCC_ClockConfig+0x1fc>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4618      	mov	r0, r3
 8003942:	f7fe fdc5 	bl	80024d0 <HAL_InitTick>
 8003946:	4603      	mov	r3, r0
 8003948:	72fb      	strb	r3, [r7, #11]

  return status;
 800394a:	7afb      	ldrb	r3, [r7, #11]
}
 800394c:	4618      	mov	r0, r3
 800394e:	3710      	adds	r7, #16
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	40022000 	.word	0x40022000
 8003958:	40021000 	.word	0x40021000
 800395c:	08005d00 	.word	0x08005d00
 8003960:	20000000 	.word	0x20000000
 8003964:	20000038 	.word	0x20000038

08003968 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003968:	b480      	push	{r7}
 800396a:	b089      	sub	sp, #36	; 0x24
 800396c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800396e:	2300      	movs	r3, #0
 8003970:	61fb      	str	r3, [r7, #28]
 8003972:	2300      	movs	r3, #0
 8003974:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003976:	4b3e      	ldr	r3, [pc, #248]	; (8003a70 <HAL_RCC_GetSysClockFreq+0x108>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f003 030c 	and.w	r3, r3, #12
 800397e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003980:	4b3b      	ldr	r3, [pc, #236]	; (8003a70 <HAL_RCC_GetSysClockFreq+0x108>)
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	f003 0303 	and.w	r3, r3, #3
 8003988:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d005      	beq.n	800399c <HAL_RCC_GetSysClockFreq+0x34>
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	2b0c      	cmp	r3, #12
 8003994:	d121      	bne.n	80039da <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2b01      	cmp	r3, #1
 800399a:	d11e      	bne.n	80039da <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800399c:	4b34      	ldr	r3, [pc, #208]	; (8003a70 <HAL_RCC_GetSysClockFreq+0x108>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0308 	and.w	r3, r3, #8
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d107      	bne.n	80039b8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80039a8:	4b31      	ldr	r3, [pc, #196]	; (8003a70 <HAL_RCC_GetSysClockFreq+0x108>)
 80039aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039ae:	0a1b      	lsrs	r3, r3, #8
 80039b0:	f003 030f 	and.w	r3, r3, #15
 80039b4:	61fb      	str	r3, [r7, #28]
 80039b6:	e005      	b.n	80039c4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80039b8:	4b2d      	ldr	r3, [pc, #180]	; (8003a70 <HAL_RCC_GetSysClockFreq+0x108>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	091b      	lsrs	r3, r3, #4
 80039be:	f003 030f 	and.w	r3, r3, #15
 80039c2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80039c4:	4a2b      	ldr	r2, [pc, #172]	; (8003a74 <HAL_RCC_GetSysClockFreq+0x10c>)
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039cc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d10d      	bne.n	80039f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039d8:	e00a      	b.n	80039f0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	2b04      	cmp	r3, #4
 80039de:	d102      	bne.n	80039e6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80039e0:	4b25      	ldr	r3, [pc, #148]	; (8003a78 <HAL_RCC_GetSysClockFreq+0x110>)
 80039e2:	61bb      	str	r3, [r7, #24]
 80039e4:	e004      	b.n	80039f0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	2b08      	cmp	r3, #8
 80039ea:	d101      	bne.n	80039f0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80039ec:	4b23      	ldr	r3, [pc, #140]	; (8003a7c <HAL_RCC_GetSysClockFreq+0x114>)
 80039ee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	2b0c      	cmp	r3, #12
 80039f4:	d134      	bne.n	8003a60 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80039f6:	4b1e      	ldr	r3, [pc, #120]	; (8003a70 <HAL_RCC_GetSysClockFreq+0x108>)
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	f003 0303 	and.w	r3, r3, #3
 80039fe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d003      	beq.n	8003a0e <HAL_RCC_GetSysClockFreq+0xa6>
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	2b03      	cmp	r3, #3
 8003a0a:	d003      	beq.n	8003a14 <HAL_RCC_GetSysClockFreq+0xac>
 8003a0c:	e005      	b.n	8003a1a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003a0e:	4b1a      	ldr	r3, [pc, #104]	; (8003a78 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a10:	617b      	str	r3, [r7, #20]
      break;
 8003a12:	e005      	b.n	8003a20 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003a14:	4b19      	ldr	r3, [pc, #100]	; (8003a7c <HAL_RCC_GetSysClockFreq+0x114>)
 8003a16:	617b      	str	r3, [r7, #20]
      break;
 8003a18:	e002      	b.n	8003a20 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	617b      	str	r3, [r7, #20]
      break;
 8003a1e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a20:	4b13      	ldr	r3, [pc, #76]	; (8003a70 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	091b      	lsrs	r3, r3, #4
 8003a26:	f003 0307 	and.w	r3, r3, #7
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003a2e:	4b10      	ldr	r3, [pc, #64]	; (8003a70 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	0a1b      	lsrs	r3, r3, #8
 8003a34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	fb03 f202 	mul.w	r2, r3, r2
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a44:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a46:	4b0a      	ldr	r3, [pc, #40]	; (8003a70 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	0e5b      	lsrs	r3, r3, #25
 8003a4c:	f003 0303 	and.w	r3, r3, #3
 8003a50:	3301      	adds	r3, #1
 8003a52:	005b      	lsls	r3, r3, #1
 8003a54:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a5e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003a60:	69bb      	ldr	r3, [r7, #24]
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3724      	adds	r7, #36	; 0x24
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	40021000 	.word	0x40021000
 8003a74:	08005d18 	.word	0x08005d18
 8003a78:	00f42400 	.word	0x00f42400
 8003a7c:	007a1200 	.word	0x007a1200

08003a80 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a80:	b480      	push	{r7}
 8003a82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a84:	4b03      	ldr	r3, [pc, #12]	; (8003a94 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a86:	681b      	ldr	r3, [r3, #0]
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	20000000 	.word	0x20000000

08003a98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a9c:	f7ff fff0 	bl	8003a80 <HAL_RCC_GetHCLKFreq>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	4b06      	ldr	r3, [pc, #24]	; (8003abc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	0a1b      	lsrs	r3, r3, #8
 8003aa8:	f003 0307 	and.w	r3, r3, #7
 8003aac:	4904      	ldr	r1, [pc, #16]	; (8003ac0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003aae:	5ccb      	ldrb	r3, [r1, r3]
 8003ab0:	f003 031f 	and.w	r3, r3, #31
 8003ab4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	40021000 	.word	0x40021000
 8003ac0:	08005d10 	.word	0x08005d10

08003ac4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003ac8:	f7ff ffda 	bl	8003a80 <HAL_RCC_GetHCLKFreq>
 8003acc:	4602      	mov	r2, r0
 8003ace:	4b06      	ldr	r3, [pc, #24]	; (8003ae8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	0adb      	lsrs	r3, r3, #11
 8003ad4:	f003 0307 	and.w	r3, r3, #7
 8003ad8:	4904      	ldr	r1, [pc, #16]	; (8003aec <HAL_RCC_GetPCLK2Freq+0x28>)
 8003ada:	5ccb      	ldrb	r3, [r1, r3]
 8003adc:	f003 031f 	and.w	r3, r3, #31
 8003ae0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	40021000 	.word	0x40021000
 8003aec:	08005d10 	.word	0x08005d10

08003af0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b086      	sub	sp, #24
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003af8:	2300      	movs	r3, #0
 8003afa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003afc:	4b2a      	ldr	r3, [pc, #168]	; (8003ba8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d003      	beq.n	8003b10 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003b08:	f7ff f9ee 	bl	8002ee8 <HAL_PWREx_GetVoltageRange>
 8003b0c:	6178      	str	r0, [r7, #20]
 8003b0e:	e014      	b.n	8003b3a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b10:	4b25      	ldr	r3, [pc, #148]	; (8003ba8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b14:	4a24      	ldr	r2, [pc, #144]	; (8003ba8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b1a:	6593      	str	r3, [r2, #88]	; 0x58
 8003b1c:	4b22      	ldr	r3, [pc, #136]	; (8003ba8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b24:	60fb      	str	r3, [r7, #12]
 8003b26:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003b28:	f7ff f9de 	bl	8002ee8 <HAL_PWREx_GetVoltageRange>
 8003b2c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003b2e:	4b1e      	ldr	r3, [pc, #120]	; (8003ba8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b32:	4a1d      	ldr	r2, [pc, #116]	; (8003ba8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b38:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b40:	d10b      	bne.n	8003b5a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2b80      	cmp	r3, #128	; 0x80
 8003b46:	d919      	bls.n	8003b7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2ba0      	cmp	r3, #160	; 0xa0
 8003b4c:	d902      	bls.n	8003b54 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b4e:	2302      	movs	r3, #2
 8003b50:	613b      	str	r3, [r7, #16]
 8003b52:	e013      	b.n	8003b7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b54:	2301      	movs	r3, #1
 8003b56:	613b      	str	r3, [r7, #16]
 8003b58:	e010      	b.n	8003b7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2b80      	cmp	r3, #128	; 0x80
 8003b5e:	d902      	bls.n	8003b66 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003b60:	2303      	movs	r3, #3
 8003b62:	613b      	str	r3, [r7, #16]
 8003b64:	e00a      	b.n	8003b7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2b80      	cmp	r3, #128	; 0x80
 8003b6a:	d102      	bne.n	8003b72 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	613b      	str	r3, [r7, #16]
 8003b70:	e004      	b.n	8003b7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2b70      	cmp	r3, #112	; 0x70
 8003b76:	d101      	bne.n	8003b7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b78:	2301      	movs	r3, #1
 8003b7a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003b7c:	4b0b      	ldr	r3, [pc, #44]	; (8003bac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f023 0207 	bic.w	r2, r3, #7
 8003b84:	4909      	ldr	r1, [pc, #36]	; (8003bac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003b8c:	4b07      	ldr	r3, [pc, #28]	; (8003bac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0307 	and.w	r3, r3, #7
 8003b94:	693a      	ldr	r2, [r7, #16]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d001      	beq.n	8003b9e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e000      	b.n	8003ba0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003b9e:	2300      	movs	r3, #0
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3718      	adds	r7, #24
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	40021000 	.word	0x40021000
 8003bac:	40022000 	.word	0x40022000

08003bb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b086      	sub	sp, #24
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003bb8:	2300      	movs	r3, #0
 8003bba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d041      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bd0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003bd4:	d02a      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003bd6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003bda:	d824      	bhi.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003bdc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003be0:	d008      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003be2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003be6:	d81e      	bhi.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00a      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003bec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bf0:	d010      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003bf2:	e018      	b.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003bf4:	4b86      	ldr	r3, [pc, #536]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	4a85      	ldr	r2, [pc, #532]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bfe:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c00:	e015      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	3304      	adds	r3, #4
 8003c06:	2100      	movs	r1, #0
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f000 fabb 	bl	8004184 <RCCEx_PLLSAI1_Config>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c12:	e00c      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	3320      	adds	r3, #32
 8003c18:	2100      	movs	r1, #0
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f000 fba6 	bl	800436c <RCCEx_PLLSAI2_Config>
 8003c20:	4603      	mov	r3, r0
 8003c22:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c24:	e003      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	74fb      	strb	r3, [r7, #19]
      break;
 8003c2a:	e000      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003c2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c2e:	7cfb      	ldrb	r3, [r7, #19]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d10b      	bne.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c34:	4b76      	ldr	r3, [pc, #472]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c3a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c42:	4973      	ldr	r1, [pc, #460]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003c4a:	e001      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c4c:	7cfb      	ldrb	r3, [r7, #19]
 8003c4e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d041      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c60:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003c64:	d02a      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003c66:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003c6a:	d824      	bhi.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c70:	d008      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003c72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c76:	d81e      	bhi.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d00a      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003c7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c80:	d010      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003c82:	e018      	b.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c84:	4b62      	ldr	r3, [pc, #392]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	4a61      	ldr	r2, [pc, #388]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c8e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c90:	e015      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	3304      	adds	r3, #4
 8003c96:	2100      	movs	r1, #0
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f000 fa73 	bl	8004184 <RCCEx_PLLSAI1_Config>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ca2:	e00c      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	3320      	adds	r3, #32
 8003ca8:	2100      	movs	r1, #0
 8003caa:	4618      	mov	r0, r3
 8003cac:	f000 fb5e 	bl	800436c <RCCEx_PLLSAI2_Config>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003cb4:	e003      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	74fb      	strb	r3, [r7, #19]
      break;
 8003cba:	e000      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003cbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cbe:	7cfb      	ldrb	r3, [r7, #19]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d10b      	bne.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003cc4:	4b52      	ldr	r3, [pc, #328]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cca:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cd2:	494f      	ldr	r1, [pc, #316]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003cda:	e001      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cdc:	7cfb      	ldrb	r3, [r7, #19]
 8003cde:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f000 80a0 	beq.w	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003cf2:	4b47      	ldr	r3, [pc, #284]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d101      	bne.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e000      	b.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003d02:	2300      	movs	r3, #0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d00d      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d08:	4b41      	ldr	r3, [pc, #260]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d0c:	4a40      	ldr	r2, [pc, #256]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d12:	6593      	str	r3, [r2, #88]	; 0x58
 8003d14:	4b3e      	ldr	r3, [pc, #248]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d1c:	60bb      	str	r3, [r7, #8]
 8003d1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d20:	2301      	movs	r3, #1
 8003d22:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d24:	4b3b      	ldr	r3, [pc, #236]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a3a      	ldr	r2, [pc, #232]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d2e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d30:	f7fe fc1e 	bl	8002570 <HAL_GetTick>
 8003d34:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d36:	e009      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d38:	f7fe fc1a 	bl	8002570 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d902      	bls.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	74fb      	strb	r3, [r7, #19]
        break;
 8003d4a:	e005      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d4c:	4b31      	ldr	r3, [pc, #196]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d0ef      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003d58:	7cfb      	ldrb	r3, [r7, #19]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d15c      	bne.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d5e:	4b2c      	ldr	r3, [pc, #176]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d68:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d01f      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d76:	697a      	ldr	r2, [r7, #20]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d019      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d7c:	4b24      	ldr	r3, [pc, #144]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d86:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d88:	4b21      	ldr	r3, [pc, #132]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d8e:	4a20      	ldr	r2, [pc, #128]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d98:	4b1d      	ldr	r3, [pc, #116]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d9e:	4a1c      	ldr	r2, [pc, #112]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003da0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003da4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003da8:	4a19      	ldr	r2, [pc, #100]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d016      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dba:	f7fe fbd9 	bl	8002570 <HAL_GetTick>
 8003dbe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dc0:	e00b      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dc2:	f7fe fbd5 	bl	8002570 <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d902      	bls.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	74fb      	strb	r3, [r7, #19]
            break;
 8003dd8:	e006      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dda:	4b0d      	ldr	r3, [pc, #52]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de0:	f003 0302 	and.w	r3, r3, #2
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d0ec      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003de8:	7cfb      	ldrb	r3, [r7, #19]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d10c      	bne.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dee:	4b08      	ldr	r3, [pc, #32]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dfe:	4904      	ldr	r1, [pc, #16]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003e06:	e009      	b.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e08:	7cfb      	ldrb	r3, [r7, #19]
 8003e0a:	74bb      	strb	r3, [r7, #18]
 8003e0c:	e006      	b.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003e0e:	bf00      	nop
 8003e10:	40021000 	.word	0x40021000
 8003e14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e18:	7cfb      	ldrb	r3, [r7, #19]
 8003e1a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e1c:	7c7b      	ldrb	r3, [r7, #17]
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d105      	bne.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e22:	4b9e      	ldr	r3, [pc, #632]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e26:	4a9d      	ldr	r2, [pc, #628]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e2c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0301 	and.w	r3, r3, #1
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00a      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e3a:	4b98      	ldr	r3, [pc, #608]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e40:	f023 0203 	bic.w	r2, r3, #3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e48:	4994      	ldr	r1, [pc, #592]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00a      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e5c:	4b8f      	ldr	r3, [pc, #572]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e62:	f023 020c 	bic.w	r2, r3, #12
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e6a:	498c      	ldr	r1, [pc, #560]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0304 	and.w	r3, r3, #4
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00a      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e7e:	4b87      	ldr	r3, [pc, #540]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e84:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8c:	4983      	ldr	r1, [pc, #524]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0308 	and.w	r3, r3, #8
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00a      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ea0:	4b7e      	ldr	r3, [pc, #504]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eae:	497b      	ldr	r1, [pc, #492]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0310 	and.w	r3, r3, #16
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00a      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ec2:	4b76      	ldr	r3, [pc, #472]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ed0:	4972      	ldr	r1, [pc, #456]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0320 	and.w	r3, r3, #32
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00a      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ee4:	4b6d      	ldr	r3, [pc, #436]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ef2:	496a      	ldr	r1, [pc, #424]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00a      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f06:	4b65      	ldr	r3, [pc, #404]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f0c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f14:	4961      	ldr	r1, [pc, #388]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00a      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f28:	4b5c      	ldr	r3, [pc, #368]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f2e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f36:	4959      	ldr	r1, [pc, #356]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00a      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f4a:	4b54      	ldr	r3, [pc, #336]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f50:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f58:	4950      	ldr	r1, [pc, #320]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d00a      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f6c:	4b4b      	ldr	r3, [pc, #300]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f72:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f7a:	4948      	ldr	r1, [pc, #288]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00a      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f8e:	4b43      	ldr	r3, [pc, #268]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f9c:	493f      	ldr	r1, [pc, #252]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d028      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003fb0:	4b3a      	ldr	r3, [pc, #232]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fbe:	4937      	ldr	r1, [pc, #220]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fce:	d106      	bne.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fd0:	4b32      	ldr	r3, [pc, #200]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	4a31      	ldr	r2, [pc, #196]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fda:	60d3      	str	r3, [r2, #12]
 8003fdc:	e011      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fe2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fe6:	d10c      	bne.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	3304      	adds	r3, #4
 8003fec:	2101      	movs	r1, #1
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f000 f8c8 	bl	8004184 <RCCEx_PLLSAI1_Config>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003ff8:	7cfb      	ldrb	r3, [r7, #19]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d001      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003ffe:	7cfb      	ldrb	r3, [r7, #19]
 8004000:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d028      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800400e:	4b23      	ldr	r3, [pc, #140]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004014:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800401c:	491f      	ldr	r1, [pc, #124]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800401e:	4313      	orrs	r3, r2
 8004020:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004028:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800402c:	d106      	bne.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800402e:	4b1b      	ldr	r3, [pc, #108]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	4a1a      	ldr	r2, [pc, #104]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004034:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004038:	60d3      	str	r3, [r2, #12]
 800403a:	e011      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004040:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004044:	d10c      	bne.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	3304      	adds	r3, #4
 800404a:	2101      	movs	r1, #1
 800404c:	4618      	mov	r0, r3
 800404e:	f000 f899 	bl	8004184 <RCCEx_PLLSAI1_Config>
 8004052:	4603      	mov	r3, r0
 8004054:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004056:	7cfb      	ldrb	r3, [r7, #19]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d001      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800405c:	7cfb      	ldrb	r3, [r7, #19]
 800405e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d02b      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800406c:	4b0b      	ldr	r3, [pc, #44]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800406e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004072:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800407a:	4908      	ldr	r1, [pc, #32]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800407c:	4313      	orrs	r3, r2
 800407e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004086:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800408a:	d109      	bne.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800408c:	4b03      	ldr	r3, [pc, #12]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	4a02      	ldr	r2, [pc, #8]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004092:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004096:	60d3      	str	r3, [r2, #12]
 8004098:	e014      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800409a:	bf00      	nop
 800409c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040a8:	d10c      	bne.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	3304      	adds	r3, #4
 80040ae:	2101      	movs	r1, #1
 80040b0:	4618      	mov	r0, r3
 80040b2:	f000 f867 	bl	8004184 <RCCEx_PLLSAI1_Config>
 80040b6:	4603      	mov	r3, r0
 80040b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040ba:	7cfb      	ldrb	r3, [r7, #19]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d001      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80040c0:	7cfb      	ldrb	r3, [r7, #19]
 80040c2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d02f      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040d0:	4b2b      	ldr	r3, [pc, #172]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040de:	4928      	ldr	r1, [pc, #160]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040ee:	d10d      	bne.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	3304      	adds	r3, #4
 80040f4:	2102      	movs	r1, #2
 80040f6:	4618      	mov	r0, r3
 80040f8:	f000 f844 	bl	8004184 <RCCEx_PLLSAI1_Config>
 80040fc:	4603      	mov	r3, r0
 80040fe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004100:	7cfb      	ldrb	r3, [r7, #19]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d014      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004106:	7cfb      	ldrb	r3, [r7, #19]
 8004108:	74bb      	strb	r3, [r7, #18]
 800410a:	e011      	b.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004110:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004114:	d10c      	bne.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	3320      	adds	r3, #32
 800411a:	2102      	movs	r1, #2
 800411c:	4618      	mov	r0, r3
 800411e:	f000 f925 	bl	800436c <RCCEx_PLLSAI2_Config>
 8004122:	4603      	mov	r3, r0
 8004124:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004126:	7cfb      	ldrb	r3, [r7, #19]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d001      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800412c:	7cfb      	ldrb	r3, [r7, #19]
 800412e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00a      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800413c:	4b10      	ldr	r3, [pc, #64]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800413e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004142:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800414a:	490d      	ldr	r1, [pc, #52]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800414c:	4313      	orrs	r3, r2
 800414e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00b      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800415e:	4b08      	ldr	r3, [pc, #32]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004160:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004164:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800416e:	4904      	ldr	r1, [pc, #16]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004170:	4313      	orrs	r3, r2
 8004172:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004176:	7cbb      	ldrb	r3, [r7, #18]
}
 8004178:	4618      	mov	r0, r3
 800417a:	3718      	adds	r7, #24
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	40021000 	.word	0x40021000

08004184 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800418e:	2300      	movs	r3, #0
 8004190:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004192:	4b75      	ldr	r3, [pc, #468]	; (8004368 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	f003 0303 	and.w	r3, r3, #3
 800419a:	2b00      	cmp	r3, #0
 800419c:	d018      	beq.n	80041d0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800419e:	4b72      	ldr	r3, [pc, #456]	; (8004368 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	f003 0203 	and.w	r2, r3, #3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d10d      	bne.n	80041ca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
       ||
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d009      	beq.n	80041ca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80041b6:	4b6c      	ldr	r3, [pc, #432]	; (8004368 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	091b      	lsrs	r3, r3, #4
 80041bc:	f003 0307 	and.w	r3, r3, #7
 80041c0:	1c5a      	adds	r2, r3, #1
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
       ||
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d047      	beq.n	800425a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	73fb      	strb	r3, [r7, #15]
 80041ce:	e044      	b.n	800425a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2b03      	cmp	r3, #3
 80041d6:	d018      	beq.n	800420a <RCCEx_PLLSAI1_Config+0x86>
 80041d8:	2b03      	cmp	r3, #3
 80041da:	d825      	bhi.n	8004228 <RCCEx_PLLSAI1_Config+0xa4>
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d002      	beq.n	80041e6 <RCCEx_PLLSAI1_Config+0x62>
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d009      	beq.n	80041f8 <RCCEx_PLLSAI1_Config+0x74>
 80041e4:	e020      	b.n	8004228 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80041e6:	4b60      	ldr	r3, [pc, #384]	; (8004368 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d11d      	bne.n	800422e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041f6:	e01a      	b.n	800422e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80041f8:	4b5b      	ldr	r3, [pc, #364]	; (8004368 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004200:	2b00      	cmp	r3, #0
 8004202:	d116      	bne.n	8004232 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004208:	e013      	b.n	8004232 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800420a:	4b57      	ldr	r3, [pc, #348]	; (8004368 <RCCEx_PLLSAI1_Config+0x1e4>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d10f      	bne.n	8004236 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004216:	4b54      	ldr	r3, [pc, #336]	; (8004368 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d109      	bne.n	8004236 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004226:	e006      	b.n	8004236 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	73fb      	strb	r3, [r7, #15]
      break;
 800422c:	e004      	b.n	8004238 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800422e:	bf00      	nop
 8004230:	e002      	b.n	8004238 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004232:	bf00      	nop
 8004234:	e000      	b.n	8004238 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004236:	bf00      	nop
    }

    if(status == HAL_OK)
 8004238:	7bfb      	ldrb	r3, [r7, #15]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d10d      	bne.n	800425a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800423e:	4b4a      	ldr	r3, [pc, #296]	; (8004368 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6819      	ldr	r1, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	3b01      	subs	r3, #1
 8004250:	011b      	lsls	r3, r3, #4
 8004252:	430b      	orrs	r3, r1
 8004254:	4944      	ldr	r1, [pc, #272]	; (8004368 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004256:	4313      	orrs	r3, r2
 8004258:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800425a:	7bfb      	ldrb	r3, [r7, #15]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d17d      	bne.n	800435c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004260:	4b41      	ldr	r3, [pc, #260]	; (8004368 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a40      	ldr	r2, [pc, #256]	; (8004368 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004266:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800426a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800426c:	f7fe f980 	bl	8002570 <HAL_GetTick>
 8004270:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004272:	e009      	b.n	8004288 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004274:	f7fe f97c 	bl	8002570 <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	2b02      	cmp	r3, #2
 8004280:	d902      	bls.n	8004288 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	73fb      	strb	r3, [r7, #15]
        break;
 8004286:	e005      	b.n	8004294 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004288:	4b37      	ldr	r3, [pc, #220]	; (8004368 <RCCEx_PLLSAI1_Config+0x1e4>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d1ef      	bne.n	8004274 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004294:	7bfb      	ldrb	r3, [r7, #15]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d160      	bne.n	800435c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d111      	bne.n	80042c4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042a0:	4b31      	ldr	r3, [pc, #196]	; (8004368 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80042a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	6892      	ldr	r2, [r2, #8]
 80042b0:	0211      	lsls	r1, r2, #8
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	68d2      	ldr	r2, [r2, #12]
 80042b6:	0912      	lsrs	r2, r2, #4
 80042b8:	0452      	lsls	r2, r2, #17
 80042ba:	430a      	orrs	r2, r1
 80042bc:	492a      	ldr	r1, [pc, #168]	; (8004368 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	610b      	str	r3, [r1, #16]
 80042c2:	e027      	b.n	8004314 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d112      	bne.n	80042f0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042ca:	4b27      	ldr	r3, [pc, #156]	; (8004368 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80042d2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	6892      	ldr	r2, [r2, #8]
 80042da:	0211      	lsls	r1, r2, #8
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	6912      	ldr	r2, [r2, #16]
 80042e0:	0852      	lsrs	r2, r2, #1
 80042e2:	3a01      	subs	r2, #1
 80042e4:	0552      	lsls	r2, r2, #21
 80042e6:	430a      	orrs	r2, r1
 80042e8:	491f      	ldr	r1, [pc, #124]	; (8004368 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	610b      	str	r3, [r1, #16]
 80042ee:	e011      	b.n	8004314 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042f0:	4b1d      	ldr	r3, [pc, #116]	; (8004368 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80042f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	6892      	ldr	r2, [r2, #8]
 8004300:	0211      	lsls	r1, r2, #8
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	6952      	ldr	r2, [r2, #20]
 8004306:	0852      	lsrs	r2, r2, #1
 8004308:	3a01      	subs	r2, #1
 800430a:	0652      	lsls	r2, r2, #25
 800430c:	430a      	orrs	r2, r1
 800430e:	4916      	ldr	r1, [pc, #88]	; (8004368 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004310:	4313      	orrs	r3, r2
 8004312:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004314:	4b14      	ldr	r3, [pc, #80]	; (8004368 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a13      	ldr	r2, [pc, #76]	; (8004368 <RCCEx_PLLSAI1_Config+0x1e4>)
 800431a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800431e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004320:	f7fe f926 	bl	8002570 <HAL_GetTick>
 8004324:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004326:	e009      	b.n	800433c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004328:	f7fe f922 	bl	8002570 <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	2b02      	cmp	r3, #2
 8004334:	d902      	bls.n	800433c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	73fb      	strb	r3, [r7, #15]
          break;
 800433a:	e005      	b.n	8004348 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800433c:	4b0a      	ldr	r3, [pc, #40]	; (8004368 <RCCEx_PLLSAI1_Config+0x1e4>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d0ef      	beq.n	8004328 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004348:	7bfb      	ldrb	r3, [r7, #15]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d106      	bne.n	800435c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800434e:	4b06      	ldr	r3, [pc, #24]	; (8004368 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004350:	691a      	ldr	r2, [r3, #16]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	4904      	ldr	r1, [pc, #16]	; (8004368 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004358:	4313      	orrs	r3, r2
 800435a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800435c:	7bfb      	ldrb	r3, [r7, #15]
}
 800435e:	4618      	mov	r0, r3
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	40021000 	.word	0x40021000

0800436c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004376:	2300      	movs	r3, #0
 8004378:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800437a:	4b6a      	ldr	r3, [pc, #424]	; (8004524 <RCCEx_PLLSAI2_Config+0x1b8>)
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	f003 0303 	and.w	r3, r3, #3
 8004382:	2b00      	cmp	r3, #0
 8004384:	d018      	beq.n	80043b8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004386:	4b67      	ldr	r3, [pc, #412]	; (8004524 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	f003 0203 	and.w	r2, r3, #3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	429a      	cmp	r2, r3
 8004394:	d10d      	bne.n	80043b2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
       ||
 800439a:	2b00      	cmp	r3, #0
 800439c:	d009      	beq.n	80043b2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800439e:	4b61      	ldr	r3, [pc, #388]	; (8004524 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	091b      	lsrs	r3, r3, #4
 80043a4:	f003 0307 	and.w	r3, r3, #7
 80043a8:	1c5a      	adds	r2, r3, #1
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
       ||
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d047      	beq.n	8004442 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	73fb      	strb	r3, [r7, #15]
 80043b6:	e044      	b.n	8004442 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2b03      	cmp	r3, #3
 80043be:	d018      	beq.n	80043f2 <RCCEx_PLLSAI2_Config+0x86>
 80043c0:	2b03      	cmp	r3, #3
 80043c2:	d825      	bhi.n	8004410 <RCCEx_PLLSAI2_Config+0xa4>
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d002      	beq.n	80043ce <RCCEx_PLLSAI2_Config+0x62>
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d009      	beq.n	80043e0 <RCCEx_PLLSAI2_Config+0x74>
 80043cc:	e020      	b.n	8004410 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80043ce:	4b55      	ldr	r3, [pc, #340]	; (8004524 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0302 	and.w	r3, r3, #2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d11d      	bne.n	8004416 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043de:	e01a      	b.n	8004416 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80043e0:	4b50      	ldr	r3, [pc, #320]	; (8004524 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d116      	bne.n	800441a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043f0:	e013      	b.n	800441a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80043f2:	4b4c      	ldr	r3, [pc, #304]	; (8004524 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d10f      	bne.n	800441e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80043fe:	4b49      	ldr	r3, [pc, #292]	; (8004524 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d109      	bne.n	800441e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800440e:	e006      	b.n	800441e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	73fb      	strb	r3, [r7, #15]
      break;
 8004414:	e004      	b.n	8004420 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004416:	bf00      	nop
 8004418:	e002      	b.n	8004420 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800441a:	bf00      	nop
 800441c:	e000      	b.n	8004420 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800441e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004420:	7bfb      	ldrb	r3, [r7, #15]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d10d      	bne.n	8004442 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004426:	4b3f      	ldr	r3, [pc, #252]	; (8004524 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6819      	ldr	r1, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	3b01      	subs	r3, #1
 8004438:	011b      	lsls	r3, r3, #4
 800443a:	430b      	orrs	r3, r1
 800443c:	4939      	ldr	r1, [pc, #228]	; (8004524 <RCCEx_PLLSAI2_Config+0x1b8>)
 800443e:	4313      	orrs	r3, r2
 8004440:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004442:	7bfb      	ldrb	r3, [r7, #15]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d167      	bne.n	8004518 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004448:	4b36      	ldr	r3, [pc, #216]	; (8004524 <RCCEx_PLLSAI2_Config+0x1b8>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a35      	ldr	r2, [pc, #212]	; (8004524 <RCCEx_PLLSAI2_Config+0x1b8>)
 800444e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004452:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004454:	f7fe f88c 	bl	8002570 <HAL_GetTick>
 8004458:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800445a:	e009      	b.n	8004470 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800445c:	f7fe f888 	bl	8002570 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	2b02      	cmp	r3, #2
 8004468:	d902      	bls.n	8004470 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	73fb      	strb	r3, [r7, #15]
        break;
 800446e:	e005      	b.n	800447c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004470:	4b2c      	ldr	r3, [pc, #176]	; (8004524 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1ef      	bne.n	800445c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800447c:	7bfb      	ldrb	r3, [r7, #15]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d14a      	bne.n	8004518 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d111      	bne.n	80044ac <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004488:	4b26      	ldr	r3, [pc, #152]	; (8004524 <RCCEx_PLLSAI2_Config+0x1b8>)
 800448a:	695b      	ldr	r3, [r3, #20]
 800448c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004490:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	6892      	ldr	r2, [r2, #8]
 8004498:	0211      	lsls	r1, r2, #8
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	68d2      	ldr	r2, [r2, #12]
 800449e:	0912      	lsrs	r2, r2, #4
 80044a0:	0452      	lsls	r2, r2, #17
 80044a2:	430a      	orrs	r2, r1
 80044a4:	491f      	ldr	r1, [pc, #124]	; (8004524 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	614b      	str	r3, [r1, #20]
 80044aa:	e011      	b.n	80044d0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80044ac:	4b1d      	ldr	r3, [pc, #116]	; (8004524 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80044b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	6892      	ldr	r2, [r2, #8]
 80044bc:	0211      	lsls	r1, r2, #8
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	6912      	ldr	r2, [r2, #16]
 80044c2:	0852      	lsrs	r2, r2, #1
 80044c4:	3a01      	subs	r2, #1
 80044c6:	0652      	lsls	r2, r2, #25
 80044c8:	430a      	orrs	r2, r1
 80044ca:	4916      	ldr	r1, [pc, #88]	; (8004524 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80044d0:	4b14      	ldr	r3, [pc, #80]	; (8004524 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a13      	ldr	r2, [pc, #76]	; (8004524 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044dc:	f7fe f848 	bl	8002570 <HAL_GetTick>
 80044e0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80044e2:	e009      	b.n	80044f8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80044e4:	f7fe f844 	bl	8002570 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d902      	bls.n	80044f8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	73fb      	strb	r3, [r7, #15]
          break;
 80044f6:	e005      	b.n	8004504 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80044f8:	4b0a      	ldr	r3, [pc, #40]	; (8004524 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d0ef      	beq.n	80044e4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004504:	7bfb      	ldrb	r3, [r7, #15]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d106      	bne.n	8004518 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800450a:	4b06      	ldr	r3, [pc, #24]	; (8004524 <RCCEx_PLLSAI2_Config+0x1b8>)
 800450c:	695a      	ldr	r2, [r3, #20]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	4904      	ldr	r1, [pc, #16]	; (8004524 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004514:	4313      	orrs	r3, r2
 8004516:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004518:	7bfb      	ldrb	r3, [r7, #15]
}
 800451a:	4618      	mov	r0, r3
 800451c:	3710      	adds	r7, #16
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	40021000 	.word	0x40021000

08004528 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e095      	b.n	8004666 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453e:	2b00      	cmp	r3, #0
 8004540:	d108      	bne.n	8004554 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800454a:	d009      	beq.n	8004560 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	61da      	str	r2, [r3, #28]
 8004552:	e005      	b.n	8004560 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d106      	bne.n	8004580 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f7fc fae8 	bl	8000b50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2202      	movs	r2, #2
 8004584:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004596:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80045a0:	d902      	bls.n	80045a8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80045a2:	2300      	movs	r3, #0
 80045a4:	60fb      	str	r3, [r7, #12]
 80045a6:	e002      	b.n	80045ae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80045a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045ac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80045b6:	d007      	beq.n	80045c8 <HAL_SPI_Init+0xa0>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80045c0:	d002      	beq.n	80045c8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80045d8:	431a      	orrs	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	431a      	orrs	r2, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	695b      	ldr	r3, [r3, #20]
 80045e8:	f003 0301 	and.w	r3, r3, #1
 80045ec:	431a      	orrs	r2, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045f6:	431a      	orrs	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	69db      	ldr	r3, [r3, #28]
 80045fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004600:	431a      	orrs	r2, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800460a:	ea42 0103 	orr.w	r1, r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004612:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	430a      	orrs	r2, r1
 800461c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	0c1b      	lsrs	r3, r3, #16
 8004624:	f003 0204 	and.w	r2, r3, #4
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462c:	f003 0310 	and.w	r3, r3, #16
 8004630:	431a      	orrs	r2, r3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004636:	f003 0308 	and.w	r3, r3, #8
 800463a:	431a      	orrs	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004644:	ea42 0103 	orr.w	r1, r2, r3
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	430a      	orrs	r2, r1
 8004654:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3710      	adds	r7, #16
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800466e:	b480      	push	{r7}
 8004670:	b083      	sub	sp, #12
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800467c:	b2db      	uxtb	r3, r3
}
 800467e:	4618      	mov	r0, r3
 8004680:	370c      	adds	r7, #12
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr

0800468a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800468a:	b580      	push	{r7, lr}
 800468c:	b082      	sub	sp, #8
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d101      	bne.n	800469c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e049      	b.n	8004730 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d106      	bne.n	80046b6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f7fc fba5 	bl	8000e00 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2202      	movs	r2, #2
 80046ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	3304      	adds	r3, #4
 80046c6:	4619      	mov	r1, r3
 80046c8:	4610      	mov	r0, r2
 80046ca:	f000 f949 	bl	8004960 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2201      	movs	r2, #1
 80046d2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2201      	movs	r2, #1
 80046da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2201      	movs	r2, #1
 80046e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2201      	movs	r2, #1
 80046ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2201      	movs	r2, #1
 80046f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2201      	movs	r2, #1
 80046fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2201      	movs	r2, #1
 8004702:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2201      	movs	r2, #1
 800470a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2201      	movs	r2, #1
 8004712:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2201      	movs	r2, #1
 800471a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2201      	movs	r2, #1
 8004722:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2201      	movs	r2, #1
 800472a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800472e:	2300      	movs	r3, #0
}
 8004730:	4618      	mov	r0, r3
 8004732:	3708      	adds	r7, #8
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b086      	sub	sp, #24
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004744:	2300      	movs	r3, #0
 8004746:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800474e:	2b01      	cmp	r3, #1
 8004750:	d101      	bne.n	8004756 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004752:	2302      	movs	r3, #2
 8004754:	e0ff      	b.n	8004956 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2201      	movs	r2, #1
 800475a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2b14      	cmp	r3, #20
 8004762:	f200 80f0 	bhi.w	8004946 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004766:	a201      	add	r2, pc, #4	; (adr r2, 800476c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800476c:	080047c1 	.word	0x080047c1
 8004770:	08004947 	.word	0x08004947
 8004774:	08004947 	.word	0x08004947
 8004778:	08004947 	.word	0x08004947
 800477c:	08004801 	.word	0x08004801
 8004780:	08004947 	.word	0x08004947
 8004784:	08004947 	.word	0x08004947
 8004788:	08004947 	.word	0x08004947
 800478c:	08004843 	.word	0x08004843
 8004790:	08004947 	.word	0x08004947
 8004794:	08004947 	.word	0x08004947
 8004798:	08004947 	.word	0x08004947
 800479c:	08004883 	.word	0x08004883
 80047a0:	08004947 	.word	0x08004947
 80047a4:	08004947 	.word	0x08004947
 80047a8:	08004947 	.word	0x08004947
 80047ac:	080048c5 	.word	0x080048c5
 80047b0:	08004947 	.word	0x08004947
 80047b4:	08004947 	.word	0x08004947
 80047b8:	08004947 	.word	0x08004947
 80047bc:	08004905 	.word	0x08004905
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68b9      	ldr	r1, [r7, #8]
 80047c6:	4618      	mov	r0, r3
 80047c8:	f000 f964 	bl	8004a94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	699a      	ldr	r2, [r3, #24]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f042 0208 	orr.w	r2, r2, #8
 80047da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	699a      	ldr	r2, [r3, #24]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f022 0204 	bic.w	r2, r2, #4
 80047ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	6999      	ldr	r1, [r3, #24]
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	691a      	ldr	r2, [r3, #16]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	430a      	orrs	r2, r1
 80047fc:	619a      	str	r2, [r3, #24]
      break;
 80047fe:	e0a5      	b.n	800494c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68b9      	ldr	r1, [r7, #8]
 8004806:	4618      	mov	r0, r3
 8004808:	f000 f9d4 	bl	8004bb4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	699a      	ldr	r2, [r3, #24]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800481a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	699a      	ldr	r2, [r3, #24]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800482a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	6999      	ldr	r1, [r3, #24]
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	021a      	lsls	r2, r3, #8
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	430a      	orrs	r2, r1
 800483e:	619a      	str	r2, [r3, #24]
      break;
 8004840:	e084      	b.n	800494c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68b9      	ldr	r1, [r7, #8]
 8004848:	4618      	mov	r0, r3
 800484a:	f000 fa3d 	bl	8004cc8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	69da      	ldr	r2, [r3, #28]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f042 0208 	orr.w	r2, r2, #8
 800485c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	69da      	ldr	r2, [r3, #28]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f022 0204 	bic.w	r2, r2, #4
 800486c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	69d9      	ldr	r1, [r3, #28]
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	691a      	ldr	r2, [r3, #16]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	430a      	orrs	r2, r1
 800487e:	61da      	str	r2, [r3, #28]
      break;
 8004880:	e064      	b.n	800494c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68b9      	ldr	r1, [r7, #8]
 8004888:	4618      	mov	r0, r3
 800488a:	f000 faa5 	bl	8004dd8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	69da      	ldr	r2, [r3, #28]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800489c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	69da      	ldr	r2, [r3, #28]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	69d9      	ldr	r1, [r3, #28]
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	691b      	ldr	r3, [r3, #16]
 80048b8:	021a      	lsls	r2, r3, #8
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	430a      	orrs	r2, r1
 80048c0:	61da      	str	r2, [r3, #28]
      break;
 80048c2:	e043      	b.n	800494c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68b9      	ldr	r1, [r7, #8]
 80048ca:	4618      	mov	r0, r3
 80048cc:	f000 faee 	bl	8004eac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f042 0208 	orr.w	r2, r2, #8
 80048de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f022 0204 	bic.w	r2, r2, #4
 80048ee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	691a      	ldr	r2, [r3, #16]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	430a      	orrs	r2, r1
 8004900:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004902:	e023      	b.n	800494c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68b9      	ldr	r1, [r7, #8]
 800490a:	4618      	mov	r0, r3
 800490c:	f000 fb32 	bl	8004f74 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800491e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800492e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	021a      	lsls	r2, r3, #8
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	430a      	orrs	r2, r1
 8004942:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004944:	e002      	b.n	800494c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	75fb      	strb	r3, [r7, #23]
      break;
 800494a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2200      	movs	r2, #0
 8004950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004954:	7dfb      	ldrb	r3, [r7, #23]
}
 8004956:	4618      	mov	r0, r3
 8004958:	3718      	adds	r7, #24
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop

08004960 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004960:	b480      	push	{r7}
 8004962:	b085      	sub	sp, #20
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a40      	ldr	r2, [pc, #256]	; (8004a74 <TIM_Base_SetConfig+0x114>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d013      	beq.n	80049a0 <TIM_Base_SetConfig+0x40>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800497e:	d00f      	beq.n	80049a0 <TIM_Base_SetConfig+0x40>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a3d      	ldr	r2, [pc, #244]	; (8004a78 <TIM_Base_SetConfig+0x118>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d00b      	beq.n	80049a0 <TIM_Base_SetConfig+0x40>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a3c      	ldr	r2, [pc, #240]	; (8004a7c <TIM_Base_SetConfig+0x11c>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d007      	beq.n	80049a0 <TIM_Base_SetConfig+0x40>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a3b      	ldr	r2, [pc, #236]	; (8004a80 <TIM_Base_SetConfig+0x120>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d003      	beq.n	80049a0 <TIM_Base_SetConfig+0x40>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a3a      	ldr	r2, [pc, #232]	; (8004a84 <TIM_Base_SetConfig+0x124>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d108      	bne.n	80049b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a2f      	ldr	r2, [pc, #188]	; (8004a74 <TIM_Base_SetConfig+0x114>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d01f      	beq.n	80049fa <TIM_Base_SetConfig+0x9a>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049c0:	d01b      	beq.n	80049fa <TIM_Base_SetConfig+0x9a>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a2c      	ldr	r2, [pc, #176]	; (8004a78 <TIM_Base_SetConfig+0x118>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d017      	beq.n	80049fa <TIM_Base_SetConfig+0x9a>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a2b      	ldr	r2, [pc, #172]	; (8004a7c <TIM_Base_SetConfig+0x11c>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d013      	beq.n	80049fa <TIM_Base_SetConfig+0x9a>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a2a      	ldr	r2, [pc, #168]	; (8004a80 <TIM_Base_SetConfig+0x120>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d00f      	beq.n	80049fa <TIM_Base_SetConfig+0x9a>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a29      	ldr	r2, [pc, #164]	; (8004a84 <TIM_Base_SetConfig+0x124>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d00b      	beq.n	80049fa <TIM_Base_SetConfig+0x9a>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a28      	ldr	r2, [pc, #160]	; (8004a88 <TIM_Base_SetConfig+0x128>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d007      	beq.n	80049fa <TIM_Base_SetConfig+0x9a>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a27      	ldr	r2, [pc, #156]	; (8004a8c <TIM_Base_SetConfig+0x12c>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d003      	beq.n	80049fa <TIM_Base_SetConfig+0x9a>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a26      	ldr	r2, [pc, #152]	; (8004a90 <TIM_Base_SetConfig+0x130>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d108      	bne.n	8004a0c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	695b      	ldr	r3, [r3, #20]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	689a      	ldr	r2, [r3, #8]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a10      	ldr	r2, [pc, #64]	; (8004a74 <TIM_Base_SetConfig+0x114>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d00f      	beq.n	8004a58 <TIM_Base_SetConfig+0xf8>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a12      	ldr	r2, [pc, #72]	; (8004a84 <TIM_Base_SetConfig+0x124>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d00b      	beq.n	8004a58 <TIM_Base_SetConfig+0xf8>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a11      	ldr	r2, [pc, #68]	; (8004a88 <TIM_Base_SetConfig+0x128>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d007      	beq.n	8004a58 <TIM_Base_SetConfig+0xf8>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a10      	ldr	r2, [pc, #64]	; (8004a8c <TIM_Base_SetConfig+0x12c>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d003      	beq.n	8004a58 <TIM_Base_SetConfig+0xf8>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a0f      	ldr	r2, [pc, #60]	; (8004a90 <TIM_Base_SetConfig+0x130>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d103      	bne.n	8004a60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	691a      	ldr	r2, [r3, #16]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	615a      	str	r2, [r3, #20]
}
 8004a66:	bf00      	nop
 8004a68:	3714      	adds	r7, #20
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	40012c00 	.word	0x40012c00
 8004a78:	40000400 	.word	0x40000400
 8004a7c:	40000800 	.word	0x40000800
 8004a80:	40000c00 	.word	0x40000c00
 8004a84:	40013400 	.word	0x40013400
 8004a88:	40014000 	.word	0x40014000
 8004a8c:	40014400 	.word	0x40014400
 8004a90:	40014800 	.word	0x40014800

08004a94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b087      	sub	sp, #28
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a1b      	ldr	r3, [r3, #32]
 8004aa2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a1b      	ldr	r3, [r3, #32]
 8004aa8:	f023 0201 	bic.w	r2, r3, #1
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ac6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f023 0303 	bic.w	r3, r3, #3
 8004ace:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68fa      	ldr	r2, [r7, #12]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	f023 0302 	bic.w	r3, r3, #2
 8004ae0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	697a      	ldr	r2, [r7, #20]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a2c      	ldr	r2, [pc, #176]	; (8004ba0 <TIM_OC1_SetConfig+0x10c>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d00f      	beq.n	8004b14 <TIM_OC1_SetConfig+0x80>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a2b      	ldr	r2, [pc, #172]	; (8004ba4 <TIM_OC1_SetConfig+0x110>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d00b      	beq.n	8004b14 <TIM_OC1_SetConfig+0x80>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a2a      	ldr	r2, [pc, #168]	; (8004ba8 <TIM_OC1_SetConfig+0x114>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d007      	beq.n	8004b14 <TIM_OC1_SetConfig+0x80>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a29      	ldr	r2, [pc, #164]	; (8004bac <TIM_OC1_SetConfig+0x118>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d003      	beq.n	8004b14 <TIM_OC1_SetConfig+0x80>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4a28      	ldr	r2, [pc, #160]	; (8004bb0 <TIM_OC1_SetConfig+0x11c>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d10c      	bne.n	8004b2e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	f023 0308 	bic.w	r3, r3, #8
 8004b1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	697a      	ldr	r2, [r7, #20]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	f023 0304 	bic.w	r3, r3, #4
 8004b2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a1b      	ldr	r2, [pc, #108]	; (8004ba0 <TIM_OC1_SetConfig+0x10c>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d00f      	beq.n	8004b56 <TIM_OC1_SetConfig+0xc2>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a1a      	ldr	r2, [pc, #104]	; (8004ba4 <TIM_OC1_SetConfig+0x110>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d00b      	beq.n	8004b56 <TIM_OC1_SetConfig+0xc2>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a19      	ldr	r2, [pc, #100]	; (8004ba8 <TIM_OC1_SetConfig+0x114>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d007      	beq.n	8004b56 <TIM_OC1_SetConfig+0xc2>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a18      	ldr	r2, [pc, #96]	; (8004bac <TIM_OC1_SetConfig+0x118>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d003      	beq.n	8004b56 <TIM_OC1_SetConfig+0xc2>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a17      	ldr	r2, [pc, #92]	; (8004bb0 <TIM_OC1_SetConfig+0x11c>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d111      	bne.n	8004b7a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	695b      	ldr	r3, [r3, #20]
 8004b6a:	693a      	ldr	r2, [r7, #16]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	699b      	ldr	r3, [r3, #24]
 8004b74:	693a      	ldr	r2, [r7, #16]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	693a      	ldr	r2, [r7, #16]
 8004b7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	68fa      	ldr	r2, [r7, #12]
 8004b84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	685a      	ldr	r2, [r3, #4]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	697a      	ldr	r2, [r7, #20]
 8004b92:	621a      	str	r2, [r3, #32]
}
 8004b94:	bf00      	nop
 8004b96:	371c      	adds	r7, #28
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr
 8004ba0:	40012c00 	.word	0x40012c00
 8004ba4:	40013400 	.word	0x40013400
 8004ba8:	40014000 	.word	0x40014000
 8004bac:	40014400 	.word	0x40014400
 8004bb0:	40014800 	.word	0x40014800

08004bb4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b087      	sub	sp, #28
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a1b      	ldr	r3, [r3, #32]
 8004bc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a1b      	ldr	r3, [r3, #32]
 8004bc8:	f023 0210 	bic.w	r2, r3, #16
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	699b      	ldr	r3, [r3, #24]
 8004bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004be2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004be6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	021b      	lsls	r3, r3, #8
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	f023 0320 	bic.w	r3, r3, #32
 8004c02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	011b      	lsls	r3, r3, #4
 8004c0a:	697a      	ldr	r2, [r7, #20]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	4a28      	ldr	r2, [pc, #160]	; (8004cb4 <TIM_OC2_SetConfig+0x100>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d003      	beq.n	8004c20 <TIM_OC2_SetConfig+0x6c>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4a27      	ldr	r2, [pc, #156]	; (8004cb8 <TIM_OC2_SetConfig+0x104>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d10d      	bne.n	8004c3c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	011b      	lsls	r3, r3, #4
 8004c2e:	697a      	ldr	r2, [r7, #20]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4a1d      	ldr	r2, [pc, #116]	; (8004cb4 <TIM_OC2_SetConfig+0x100>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d00f      	beq.n	8004c64 <TIM_OC2_SetConfig+0xb0>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4a1c      	ldr	r2, [pc, #112]	; (8004cb8 <TIM_OC2_SetConfig+0x104>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d00b      	beq.n	8004c64 <TIM_OC2_SetConfig+0xb0>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a1b      	ldr	r2, [pc, #108]	; (8004cbc <TIM_OC2_SetConfig+0x108>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d007      	beq.n	8004c64 <TIM_OC2_SetConfig+0xb0>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a1a      	ldr	r2, [pc, #104]	; (8004cc0 <TIM_OC2_SetConfig+0x10c>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d003      	beq.n	8004c64 <TIM_OC2_SetConfig+0xb0>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a19      	ldr	r2, [pc, #100]	; (8004cc4 <TIM_OC2_SetConfig+0x110>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d113      	bne.n	8004c8c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	695b      	ldr	r3, [r3, #20]
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	693a      	ldr	r2, [r7, #16]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	699b      	ldr	r3, [r3, #24]
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	693a      	ldr	r2, [r7, #16]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	693a      	ldr	r2, [r7, #16]
 8004c90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	68fa      	ldr	r2, [r7, #12]
 8004c96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	685a      	ldr	r2, [r3, #4]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	697a      	ldr	r2, [r7, #20]
 8004ca4:	621a      	str	r2, [r3, #32]
}
 8004ca6:	bf00      	nop
 8004ca8:	371c      	adds	r7, #28
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	40012c00 	.word	0x40012c00
 8004cb8:	40013400 	.word	0x40013400
 8004cbc:	40014000 	.word	0x40014000
 8004cc0:	40014400 	.word	0x40014400
 8004cc4:	40014800 	.word	0x40014800

08004cc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b087      	sub	sp, #28
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a1b      	ldr	r3, [r3, #32]
 8004cd6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6a1b      	ldr	r3, [r3, #32]
 8004cdc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	69db      	ldr	r3, [r3, #28]
 8004cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f023 0303 	bic.w	r3, r3, #3
 8004d02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	68fa      	ldr	r2, [r7, #12]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	021b      	lsls	r3, r3, #8
 8004d1c:	697a      	ldr	r2, [r7, #20]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4a27      	ldr	r2, [pc, #156]	; (8004dc4 <TIM_OC3_SetConfig+0xfc>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d003      	beq.n	8004d32 <TIM_OC3_SetConfig+0x6a>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a26      	ldr	r2, [pc, #152]	; (8004dc8 <TIM_OC3_SetConfig+0x100>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d10d      	bne.n	8004d4e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	021b      	lsls	r3, r3, #8
 8004d40:	697a      	ldr	r2, [r7, #20]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a1c      	ldr	r2, [pc, #112]	; (8004dc4 <TIM_OC3_SetConfig+0xfc>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d00f      	beq.n	8004d76 <TIM_OC3_SetConfig+0xae>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a1b      	ldr	r2, [pc, #108]	; (8004dc8 <TIM_OC3_SetConfig+0x100>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d00b      	beq.n	8004d76 <TIM_OC3_SetConfig+0xae>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a1a      	ldr	r2, [pc, #104]	; (8004dcc <TIM_OC3_SetConfig+0x104>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d007      	beq.n	8004d76 <TIM_OC3_SetConfig+0xae>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a19      	ldr	r2, [pc, #100]	; (8004dd0 <TIM_OC3_SetConfig+0x108>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d003      	beq.n	8004d76 <TIM_OC3_SetConfig+0xae>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a18      	ldr	r2, [pc, #96]	; (8004dd4 <TIM_OC3_SetConfig+0x10c>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d113      	bne.n	8004d9e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	011b      	lsls	r3, r3, #4
 8004d8c:	693a      	ldr	r2, [r7, #16]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	011b      	lsls	r3, r3, #4
 8004d98:	693a      	ldr	r2, [r7, #16]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	693a      	ldr	r2, [r7, #16]
 8004da2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	68fa      	ldr	r2, [r7, #12]
 8004da8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	685a      	ldr	r2, [r3, #4]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	697a      	ldr	r2, [r7, #20]
 8004db6:	621a      	str	r2, [r3, #32]
}
 8004db8:	bf00      	nop
 8004dba:	371c      	adds	r7, #28
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr
 8004dc4:	40012c00 	.word	0x40012c00
 8004dc8:	40013400 	.word	0x40013400
 8004dcc:	40014000 	.word	0x40014000
 8004dd0:	40014400 	.word	0x40014400
 8004dd4:	40014800 	.word	0x40014800

08004dd8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b087      	sub	sp, #28
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a1b      	ldr	r3, [r3, #32]
 8004de6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a1b      	ldr	r3, [r3, #32]
 8004dec:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	69db      	ldr	r3, [r3, #28]
 8004dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	021b      	lsls	r3, r3, #8
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	031b      	lsls	r3, r3, #12
 8004e2e:	693a      	ldr	r2, [r7, #16]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4a18      	ldr	r2, [pc, #96]	; (8004e98 <TIM_OC4_SetConfig+0xc0>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d00f      	beq.n	8004e5c <TIM_OC4_SetConfig+0x84>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4a17      	ldr	r2, [pc, #92]	; (8004e9c <TIM_OC4_SetConfig+0xc4>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d00b      	beq.n	8004e5c <TIM_OC4_SetConfig+0x84>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4a16      	ldr	r2, [pc, #88]	; (8004ea0 <TIM_OC4_SetConfig+0xc8>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d007      	beq.n	8004e5c <TIM_OC4_SetConfig+0x84>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a15      	ldr	r2, [pc, #84]	; (8004ea4 <TIM_OC4_SetConfig+0xcc>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d003      	beq.n	8004e5c <TIM_OC4_SetConfig+0x84>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a14      	ldr	r2, [pc, #80]	; (8004ea8 <TIM_OC4_SetConfig+0xd0>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d109      	bne.n	8004e70 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	695b      	ldr	r3, [r3, #20]
 8004e68:	019b      	lsls	r3, r3, #6
 8004e6a:	697a      	ldr	r2, [r7, #20]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	697a      	ldr	r2, [r7, #20]
 8004e74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	685a      	ldr	r2, [r3, #4]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	621a      	str	r2, [r3, #32]
}
 8004e8a:	bf00      	nop
 8004e8c:	371c      	adds	r7, #28
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	40012c00 	.word	0x40012c00
 8004e9c:	40013400 	.word	0x40013400
 8004ea0:	40014000 	.word	0x40014000
 8004ea4:	40014400 	.word	0x40014400
 8004ea8:	40014800 	.word	0x40014800

08004eac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b087      	sub	sp, #28
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a1b      	ldr	r3, [r3, #32]
 8004eba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a1b      	ldr	r3, [r3, #32]
 8004ec0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ede:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68fa      	ldr	r2, [r7, #12]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004ef0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	041b      	lsls	r3, r3, #16
 8004ef8:	693a      	ldr	r2, [r7, #16]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a17      	ldr	r2, [pc, #92]	; (8004f60 <TIM_OC5_SetConfig+0xb4>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d00f      	beq.n	8004f26 <TIM_OC5_SetConfig+0x7a>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a16      	ldr	r2, [pc, #88]	; (8004f64 <TIM_OC5_SetConfig+0xb8>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d00b      	beq.n	8004f26 <TIM_OC5_SetConfig+0x7a>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a15      	ldr	r2, [pc, #84]	; (8004f68 <TIM_OC5_SetConfig+0xbc>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d007      	beq.n	8004f26 <TIM_OC5_SetConfig+0x7a>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a14      	ldr	r2, [pc, #80]	; (8004f6c <TIM_OC5_SetConfig+0xc0>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d003      	beq.n	8004f26 <TIM_OC5_SetConfig+0x7a>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a13      	ldr	r2, [pc, #76]	; (8004f70 <TIM_OC5_SetConfig+0xc4>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d109      	bne.n	8004f3a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f2c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	695b      	ldr	r3, [r3, #20]
 8004f32:	021b      	lsls	r3, r3, #8
 8004f34:	697a      	ldr	r2, [r7, #20]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	697a      	ldr	r2, [r7, #20]
 8004f3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	685a      	ldr	r2, [r3, #4]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	693a      	ldr	r2, [r7, #16]
 8004f52:	621a      	str	r2, [r3, #32]
}
 8004f54:	bf00      	nop
 8004f56:	371c      	adds	r7, #28
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr
 8004f60:	40012c00 	.word	0x40012c00
 8004f64:	40013400 	.word	0x40013400
 8004f68:	40014000 	.word	0x40014000
 8004f6c:	40014400 	.word	0x40014400
 8004f70:	40014800 	.word	0x40014800

08004f74 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b087      	sub	sp, #28
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a1b      	ldr	r3, [r3, #32]
 8004f88:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	021b      	lsls	r3, r3, #8
 8004fae:	68fa      	ldr	r2, [r7, #12]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004fba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	051b      	lsls	r3, r3, #20
 8004fc2:	693a      	ldr	r2, [r7, #16]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a18      	ldr	r2, [pc, #96]	; (800502c <TIM_OC6_SetConfig+0xb8>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d00f      	beq.n	8004ff0 <TIM_OC6_SetConfig+0x7c>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a17      	ldr	r2, [pc, #92]	; (8005030 <TIM_OC6_SetConfig+0xbc>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d00b      	beq.n	8004ff0 <TIM_OC6_SetConfig+0x7c>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a16      	ldr	r2, [pc, #88]	; (8005034 <TIM_OC6_SetConfig+0xc0>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d007      	beq.n	8004ff0 <TIM_OC6_SetConfig+0x7c>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a15      	ldr	r2, [pc, #84]	; (8005038 <TIM_OC6_SetConfig+0xc4>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d003      	beq.n	8004ff0 <TIM_OC6_SetConfig+0x7c>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a14      	ldr	r2, [pc, #80]	; (800503c <TIM_OC6_SetConfig+0xc8>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d109      	bne.n	8005004 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ff6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	695b      	ldr	r3, [r3, #20]
 8004ffc:	029b      	lsls	r3, r3, #10
 8004ffe:	697a      	ldr	r2, [r7, #20]
 8005000:	4313      	orrs	r3, r2
 8005002:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	697a      	ldr	r2, [r7, #20]
 8005008:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	68fa      	ldr	r2, [r7, #12]
 800500e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	685a      	ldr	r2, [r3, #4]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	621a      	str	r2, [r3, #32]
}
 800501e:	bf00      	nop
 8005020:	371c      	adds	r7, #28
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	40012c00 	.word	0x40012c00
 8005030:	40013400 	.word	0x40013400
 8005034:	40014000 	.word	0x40014000
 8005038:	40014400 	.word	0x40014400
 800503c:	40014800 	.word	0x40014800

08005040 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005040:	b480      	push	{r7}
 8005042:	b085      	sub	sp, #20
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005050:	2b01      	cmp	r3, #1
 8005052:	d101      	bne.n	8005058 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005054:	2302      	movs	r3, #2
 8005056:	e068      	b.n	800512a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2202      	movs	r2, #2
 8005064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a2e      	ldr	r2, [pc, #184]	; (8005138 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d004      	beq.n	800508c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a2d      	ldr	r2, [pc, #180]	; (800513c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d108      	bne.n	800509e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005092:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	4313      	orrs	r3, r2
 800509c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68fa      	ldr	r2, [r7, #12]
 80050b6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a1e      	ldr	r2, [pc, #120]	; (8005138 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d01d      	beq.n	80050fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050ca:	d018      	beq.n	80050fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a1b      	ldr	r2, [pc, #108]	; (8005140 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d013      	beq.n	80050fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a1a      	ldr	r2, [pc, #104]	; (8005144 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d00e      	beq.n	80050fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a18      	ldr	r2, [pc, #96]	; (8005148 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d009      	beq.n	80050fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a13      	ldr	r2, [pc, #76]	; (800513c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d004      	beq.n	80050fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a14      	ldr	r2, [pc, #80]	; (800514c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d10c      	bne.n	8005118 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005104:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	68ba      	ldr	r2, [r7, #8]
 800510c:	4313      	orrs	r3, r2
 800510e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68ba      	ldr	r2, [r7, #8]
 8005116:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3714      	adds	r7, #20
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	40012c00 	.word	0x40012c00
 800513c:	40013400 	.word	0x40013400
 8005140:	40000400 	.word	0x40000400
 8005144:	40000800 	.word	0x40000800
 8005148:	40000c00 	.word	0x40000c00
 800514c:	40014000 	.word	0x40014000

08005150 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005150:	b480      	push	{r7}
 8005152:	b085      	sub	sp, #20
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800515a:	2300      	movs	r3, #0
 800515c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005164:	2b01      	cmp	r3, #1
 8005166:	d101      	bne.n	800516c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005168:	2302      	movs	r3, #2
 800516a:	e065      	b.n	8005238 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	4313      	orrs	r3, r2
 8005180:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	4313      	orrs	r3, r2
 800518e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	4313      	orrs	r3, r2
 800519c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	695b      	ldr	r3, [r3, #20]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d2:	4313      	orrs	r3, r2
 80051d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	699b      	ldr	r3, [r3, #24]
 80051e0:	041b      	lsls	r3, r3, #16
 80051e2:	4313      	orrs	r3, r2
 80051e4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a16      	ldr	r2, [pc, #88]	; (8005244 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d004      	beq.n	80051fa <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a14      	ldr	r2, [pc, #80]	; (8005248 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d115      	bne.n	8005226 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005204:	051b      	lsls	r3, r3, #20
 8005206:	4313      	orrs	r3, r2
 8005208:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	69db      	ldr	r3, [r3, #28]
 8005214:	4313      	orrs	r3, r2
 8005216:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	6a1b      	ldr	r3, [r3, #32]
 8005222:	4313      	orrs	r3, r2
 8005224:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005236:	2300      	movs	r3, #0
}
 8005238:	4618      	mov	r0, r3
 800523a:	3714      	adds	r7, #20
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr
 8005244:	40012c00 	.word	0x40012c00
 8005248:	40013400 	.word	0x40013400

0800524c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b082      	sub	sp, #8
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d101      	bne.n	800525e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e040      	b.n	80052e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005262:	2b00      	cmp	r3, #0
 8005264:	d106      	bne.n	8005274 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f7fb fe4e 	bl	8000f10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2224      	movs	r2, #36	; 0x24
 8005278:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f022 0201 	bic.w	r2, r2, #1
 8005288:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528e:	2b00      	cmp	r3, #0
 8005290:	d002      	beq.n	8005298 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 fae0 	bl	8005858 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f000 f825 	bl	80052e8 <UART_SetConfig>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d101      	bne.n	80052a8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e01b      	b.n	80052e0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	685a      	ldr	r2, [r3, #4]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	689a      	ldr	r2, [r3, #8]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f042 0201 	orr.w	r2, r2, #1
 80052d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f000 fb5f 	bl	800599c <UART_CheckIdleState>
 80052de:	4603      	mov	r3, r0
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3708      	adds	r7, #8
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052ec:	b08a      	sub	sp, #40	; 0x28
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80052f2:	2300      	movs	r3, #0
 80052f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	689a      	ldr	r2, [r3, #8]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	431a      	orrs	r2, r3
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	695b      	ldr	r3, [r3, #20]
 8005306:	431a      	orrs	r2, r3
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	69db      	ldr	r3, [r3, #28]
 800530c:	4313      	orrs	r3, r2
 800530e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	4ba4      	ldr	r3, [pc, #656]	; (80055a8 <UART_SetConfig+0x2c0>)
 8005318:	4013      	ands	r3, r2
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	6812      	ldr	r2, [r2, #0]
 800531e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005320:	430b      	orrs	r3, r1
 8005322:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	68da      	ldr	r2, [r3, #12]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	430a      	orrs	r2, r1
 8005338:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	699b      	ldr	r3, [r3, #24]
 800533e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a99      	ldr	r2, [pc, #612]	; (80055ac <UART_SetConfig+0x2c4>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d004      	beq.n	8005354 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6a1b      	ldr	r3, [r3, #32]
 800534e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005350:	4313      	orrs	r3, r2
 8005352:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005364:	430a      	orrs	r2, r1
 8005366:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a90      	ldr	r2, [pc, #576]	; (80055b0 <UART_SetConfig+0x2c8>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d126      	bne.n	80053c0 <UART_SetConfig+0xd8>
 8005372:	4b90      	ldr	r3, [pc, #576]	; (80055b4 <UART_SetConfig+0x2cc>)
 8005374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005378:	f003 0303 	and.w	r3, r3, #3
 800537c:	2b03      	cmp	r3, #3
 800537e:	d81b      	bhi.n	80053b8 <UART_SetConfig+0xd0>
 8005380:	a201      	add	r2, pc, #4	; (adr r2, 8005388 <UART_SetConfig+0xa0>)
 8005382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005386:	bf00      	nop
 8005388:	08005399 	.word	0x08005399
 800538c:	080053a9 	.word	0x080053a9
 8005390:	080053a1 	.word	0x080053a1
 8005394:	080053b1 	.word	0x080053b1
 8005398:	2301      	movs	r3, #1
 800539a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800539e:	e116      	b.n	80055ce <UART_SetConfig+0x2e6>
 80053a0:	2302      	movs	r3, #2
 80053a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053a6:	e112      	b.n	80055ce <UART_SetConfig+0x2e6>
 80053a8:	2304      	movs	r3, #4
 80053aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053ae:	e10e      	b.n	80055ce <UART_SetConfig+0x2e6>
 80053b0:	2308      	movs	r3, #8
 80053b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053b6:	e10a      	b.n	80055ce <UART_SetConfig+0x2e6>
 80053b8:	2310      	movs	r3, #16
 80053ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053be:	e106      	b.n	80055ce <UART_SetConfig+0x2e6>
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a7c      	ldr	r2, [pc, #496]	; (80055b8 <UART_SetConfig+0x2d0>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d138      	bne.n	800543c <UART_SetConfig+0x154>
 80053ca:	4b7a      	ldr	r3, [pc, #488]	; (80055b4 <UART_SetConfig+0x2cc>)
 80053cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053d0:	f003 030c 	and.w	r3, r3, #12
 80053d4:	2b0c      	cmp	r3, #12
 80053d6:	d82d      	bhi.n	8005434 <UART_SetConfig+0x14c>
 80053d8:	a201      	add	r2, pc, #4	; (adr r2, 80053e0 <UART_SetConfig+0xf8>)
 80053da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053de:	bf00      	nop
 80053e0:	08005415 	.word	0x08005415
 80053e4:	08005435 	.word	0x08005435
 80053e8:	08005435 	.word	0x08005435
 80053ec:	08005435 	.word	0x08005435
 80053f0:	08005425 	.word	0x08005425
 80053f4:	08005435 	.word	0x08005435
 80053f8:	08005435 	.word	0x08005435
 80053fc:	08005435 	.word	0x08005435
 8005400:	0800541d 	.word	0x0800541d
 8005404:	08005435 	.word	0x08005435
 8005408:	08005435 	.word	0x08005435
 800540c:	08005435 	.word	0x08005435
 8005410:	0800542d 	.word	0x0800542d
 8005414:	2300      	movs	r3, #0
 8005416:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800541a:	e0d8      	b.n	80055ce <UART_SetConfig+0x2e6>
 800541c:	2302      	movs	r3, #2
 800541e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005422:	e0d4      	b.n	80055ce <UART_SetConfig+0x2e6>
 8005424:	2304      	movs	r3, #4
 8005426:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800542a:	e0d0      	b.n	80055ce <UART_SetConfig+0x2e6>
 800542c:	2308      	movs	r3, #8
 800542e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005432:	e0cc      	b.n	80055ce <UART_SetConfig+0x2e6>
 8005434:	2310      	movs	r3, #16
 8005436:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800543a:	e0c8      	b.n	80055ce <UART_SetConfig+0x2e6>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a5e      	ldr	r2, [pc, #376]	; (80055bc <UART_SetConfig+0x2d4>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d125      	bne.n	8005492 <UART_SetConfig+0x1aa>
 8005446:	4b5b      	ldr	r3, [pc, #364]	; (80055b4 <UART_SetConfig+0x2cc>)
 8005448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800544c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005450:	2b30      	cmp	r3, #48	; 0x30
 8005452:	d016      	beq.n	8005482 <UART_SetConfig+0x19a>
 8005454:	2b30      	cmp	r3, #48	; 0x30
 8005456:	d818      	bhi.n	800548a <UART_SetConfig+0x1a2>
 8005458:	2b20      	cmp	r3, #32
 800545a:	d00a      	beq.n	8005472 <UART_SetConfig+0x18a>
 800545c:	2b20      	cmp	r3, #32
 800545e:	d814      	bhi.n	800548a <UART_SetConfig+0x1a2>
 8005460:	2b00      	cmp	r3, #0
 8005462:	d002      	beq.n	800546a <UART_SetConfig+0x182>
 8005464:	2b10      	cmp	r3, #16
 8005466:	d008      	beq.n	800547a <UART_SetConfig+0x192>
 8005468:	e00f      	b.n	800548a <UART_SetConfig+0x1a2>
 800546a:	2300      	movs	r3, #0
 800546c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005470:	e0ad      	b.n	80055ce <UART_SetConfig+0x2e6>
 8005472:	2302      	movs	r3, #2
 8005474:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005478:	e0a9      	b.n	80055ce <UART_SetConfig+0x2e6>
 800547a:	2304      	movs	r3, #4
 800547c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005480:	e0a5      	b.n	80055ce <UART_SetConfig+0x2e6>
 8005482:	2308      	movs	r3, #8
 8005484:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005488:	e0a1      	b.n	80055ce <UART_SetConfig+0x2e6>
 800548a:	2310      	movs	r3, #16
 800548c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005490:	e09d      	b.n	80055ce <UART_SetConfig+0x2e6>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a4a      	ldr	r2, [pc, #296]	; (80055c0 <UART_SetConfig+0x2d8>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d125      	bne.n	80054e8 <UART_SetConfig+0x200>
 800549c:	4b45      	ldr	r3, [pc, #276]	; (80055b4 <UART_SetConfig+0x2cc>)
 800549e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054a2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80054a6:	2bc0      	cmp	r3, #192	; 0xc0
 80054a8:	d016      	beq.n	80054d8 <UART_SetConfig+0x1f0>
 80054aa:	2bc0      	cmp	r3, #192	; 0xc0
 80054ac:	d818      	bhi.n	80054e0 <UART_SetConfig+0x1f8>
 80054ae:	2b80      	cmp	r3, #128	; 0x80
 80054b0:	d00a      	beq.n	80054c8 <UART_SetConfig+0x1e0>
 80054b2:	2b80      	cmp	r3, #128	; 0x80
 80054b4:	d814      	bhi.n	80054e0 <UART_SetConfig+0x1f8>
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d002      	beq.n	80054c0 <UART_SetConfig+0x1d8>
 80054ba:	2b40      	cmp	r3, #64	; 0x40
 80054bc:	d008      	beq.n	80054d0 <UART_SetConfig+0x1e8>
 80054be:	e00f      	b.n	80054e0 <UART_SetConfig+0x1f8>
 80054c0:	2300      	movs	r3, #0
 80054c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054c6:	e082      	b.n	80055ce <UART_SetConfig+0x2e6>
 80054c8:	2302      	movs	r3, #2
 80054ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054ce:	e07e      	b.n	80055ce <UART_SetConfig+0x2e6>
 80054d0:	2304      	movs	r3, #4
 80054d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054d6:	e07a      	b.n	80055ce <UART_SetConfig+0x2e6>
 80054d8:	2308      	movs	r3, #8
 80054da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054de:	e076      	b.n	80055ce <UART_SetConfig+0x2e6>
 80054e0:	2310      	movs	r3, #16
 80054e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054e6:	e072      	b.n	80055ce <UART_SetConfig+0x2e6>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a35      	ldr	r2, [pc, #212]	; (80055c4 <UART_SetConfig+0x2dc>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d12a      	bne.n	8005548 <UART_SetConfig+0x260>
 80054f2:	4b30      	ldr	r3, [pc, #192]	; (80055b4 <UART_SetConfig+0x2cc>)
 80054f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005500:	d01a      	beq.n	8005538 <UART_SetConfig+0x250>
 8005502:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005506:	d81b      	bhi.n	8005540 <UART_SetConfig+0x258>
 8005508:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800550c:	d00c      	beq.n	8005528 <UART_SetConfig+0x240>
 800550e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005512:	d815      	bhi.n	8005540 <UART_SetConfig+0x258>
 8005514:	2b00      	cmp	r3, #0
 8005516:	d003      	beq.n	8005520 <UART_SetConfig+0x238>
 8005518:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800551c:	d008      	beq.n	8005530 <UART_SetConfig+0x248>
 800551e:	e00f      	b.n	8005540 <UART_SetConfig+0x258>
 8005520:	2300      	movs	r3, #0
 8005522:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005526:	e052      	b.n	80055ce <UART_SetConfig+0x2e6>
 8005528:	2302      	movs	r3, #2
 800552a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800552e:	e04e      	b.n	80055ce <UART_SetConfig+0x2e6>
 8005530:	2304      	movs	r3, #4
 8005532:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005536:	e04a      	b.n	80055ce <UART_SetConfig+0x2e6>
 8005538:	2308      	movs	r3, #8
 800553a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800553e:	e046      	b.n	80055ce <UART_SetConfig+0x2e6>
 8005540:	2310      	movs	r3, #16
 8005542:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005546:	e042      	b.n	80055ce <UART_SetConfig+0x2e6>
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a17      	ldr	r2, [pc, #92]	; (80055ac <UART_SetConfig+0x2c4>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d13a      	bne.n	80055c8 <UART_SetConfig+0x2e0>
 8005552:	4b18      	ldr	r3, [pc, #96]	; (80055b4 <UART_SetConfig+0x2cc>)
 8005554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005558:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800555c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005560:	d01a      	beq.n	8005598 <UART_SetConfig+0x2b0>
 8005562:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005566:	d81b      	bhi.n	80055a0 <UART_SetConfig+0x2b8>
 8005568:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800556c:	d00c      	beq.n	8005588 <UART_SetConfig+0x2a0>
 800556e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005572:	d815      	bhi.n	80055a0 <UART_SetConfig+0x2b8>
 8005574:	2b00      	cmp	r3, #0
 8005576:	d003      	beq.n	8005580 <UART_SetConfig+0x298>
 8005578:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800557c:	d008      	beq.n	8005590 <UART_SetConfig+0x2a8>
 800557e:	e00f      	b.n	80055a0 <UART_SetConfig+0x2b8>
 8005580:	2300      	movs	r3, #0
 8005582:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005586:	e022      	b.n	80055ce <UART_SetConfig+0x2e6>
 8005588:	2302      	movs	r3, #2
 800558a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800558e:	e01e      	b.n	80055ce <UART_SetConfig+0x2e6>
 8005590:	2304      	movs	r3, #4
 8005592:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005596:	e01a      	b.n	80055ce <UART_SetConfig+0x2e6>
 8005598:	2308      	movs	r3, #8
 800559a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800559e:	e016      	b.n	80055ce <UART_SetConfig+0x2e6>
 80055a0:	2310      	movs	r3, #16
 80055a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055a6:	e012      	b.n	80055ce <UART_SetConfig+0x2e6>
 80055a8:	efff69f3 	.word	0xefff69f3
 80055ac:	40008000 	.word	0x40008000
 80055b0:	40013800 	.word	0x40013800
 80055b4:	40021000 	.word	0x40021000
 80055b8:	40004400 	.word	0x40004400
 80055bc:	40004800 	.word	0x40004800
 80055c0:	40004c00 	.word	0x40004c00
 80055c4:	40005000 	.word	0x40005000
 80055c8:	2310      	movs	r3, #16
 80055ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a9f      	ldr	r2, [pc, #636]	; (8005850 <UART_SetConfig+0x568>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d17a      	bne.n	80056ce <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80055d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80055dc:	2b08      	cmp	r3, #8
 80055de:	d824      	bhi.n	800562a <UART_SetConfig+0x342>
 80055e0:	a201      	add	r2, pc, #4	; (adr r2, 80055e8 <UART_SetConfig+0x300>)
 80055e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e6:	bf00      	nop
 80055e8:	0800560d 	.word	0x0800560d
 80055ec:	0800562b 	.word	0x0800562b
 80055f0:	08005615 	.word	0x08005615
 80055f4:	0800562b 	.word	0x0800562b
 80055f8:	0800561b 	.word	0x0800561b
 80055fc:	0800562b 	.word	0x0800562b
 8005600:	0800562b 	.word	0x0800562b
 8005604:	0800562b 	.word	0x0800562b
 8005608:	08005623 	.word	0x08005623
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800560c:	f7fe fa44 	bl	8003a98 <HAL_RCC_GetPCLK1Freq>
 8005610:	61f8      	str	r0, [r7, #28]
        break;
 8005612:	e010      	b.n	8005636 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005614:	4b8f      	ldr	r3, [pc, #572]	; (8005854 <UART_SetConfig+0x56c>)
 8005616:	61fb      	str	r3, [r7, #28]
        break;
 8005618:	e00d      	b.n	8005636 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800561a:	f7fe f9a5 	bl	8003968 <HAL_RCC_GetSysClockFreq>
 800561e:	61f8      	str	r0, [r7, #28]
        break;
 8005620:	e009      	b.n	8005636 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005622:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005626:	61fb      	str	r3, [r7, #28]
        break;
 8005628:	e005      	b.n	8005636 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800562a:	2300      	movs	r3, #0
 800562c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005634:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	2b00      	cmp	r3, #0
 800563a:	f000 80fb 	beq.w	8005834 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	685a      	ldr	r2, [r3, #4]
 8005642:	4613      	mov	r3, r2
 8005644:	005b      	lsls	r3, r3, #1
 8005646:	4413      	add	r3, r2
 8005648:	69fa      	ldr	r2, [r7, #28]
 800564a:	429a      	cmp	r2, r3
 800564c:	d305      	bcc.n	800565a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005654:	69fa      	ldr	r2, [r7, #28]
 8005656:	429a      	cmp	r2, r3
 8005658:	d903      	bls.n	8005662 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005660:	e0e8      	b.n	8005834 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	2200      	movs	r2, #0
 8005666:	461c      	mov	r4, r3
 8005668:	4615      	mov	r5, r2
 800566a:	f04f 0200 	mov.w	r2, #0
 800566e:	f04f 0300 	mov.w	r3, #0
 8005672:	022b      	lsls	r3, r5, #8
 8005674:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005678:	0222      	lsls	r2, r4, #8
 800567a:	68f9      	ldr	r1, [r7, #12]
 800567c:	6849      	ldr	r1, [r1, #4]
 800567e:	0849      	lsrs	r1, r1, #1
 8005680:	2000      	movs	r0, #0
 8005682:	4688      	mov	r8, r1
 8005684:	4681      	mov	r9, r0
 8005686:	eb12 0a08 	adds.w	sl, r2, r8
 800568a:	eb43 0b09 	adc.w	fp, r3, r9
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	603b      	str	r3, [r7, #0]
 8005696:	607a      	str	r2, [r7, #4]
 8005698:	e9d7 2300 	ldrd	r2, r3, [r7]
 800569c:	4650      	mov	r0, sl
 800569e:	4659      	mov	r1, fp
 80056a0:	f7fa fd92 	bl	80001c8 <__aeabi_uldivmod>
 80056a4:	4602      	mov	r2, r0
 80056a6:	460b      	mov	r3, r1
 80056a8:	4613      	mov	r3, r2
 80056aa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056b2:	d308      	bcc.n	80056c6 <UART_SetConfig+0x3de>
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056ba:	d204      	bcs.n	80056c6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	69ba      	ldr	r2, [r7, #24]
 80056c2:	60da      	str	r2, [r3, #12]
 80056c4:	e0b6      	b.n	8005834 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80056cc:	e0b2      	b.n	8005834 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	69db      	ldr	r3, [r3, #28]
 80056d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056d6:	d15e      	bne.n	8005796 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80056d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80056dc:	2b08      	cmp	r3, #8
 80056de:	d828      	bhi.n	8005732 <UART_SetConfig+0x44a>
 80056e0:	a201      	add	r2, pc, #4	; (adr r2, 80056e8 <UART_SetConfig+0x400>)
 80056e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e6:	bf00      	nop
 80056e8:	0800570d 	.word	0x0800570d
 80056ec:	08005715 	.word	0x08005715
 80056f0:	0800571d 	.word	0x0800571d
 80056f4:	08005733 	.word	0x08005733
 80056f8:	08005723 	.word	0x08005723
 80056fc:	08005733 	.word	0x08005733
 8005700:	08005733 	.word	0x08005733
 8005704:	08005733 	.word	0x08005733
 8005708:	0800572b 	.word	0x0800572b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800570c:	f7fe f9c4 	bl	8003a98 <HAL_RCC_GetPCLK1Freq>
 8005710:	61f8      	str	r0, [r7, #28]
        break;
 8005712:	e014      	b.n	800573e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005714:	f7fe f9d6 	bl	8003ac4 <HAL_RCC_GetPCLK2Freq>
 8005718:	61f8      	str	r0, [r7, #28]
        break;
 800571a:	e010      	b.n	800573e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800571c:	4b4d      	ldr	r3, [pc, #308]	; (8005854 <UART_SetConfig+0x56c>)
 800571e:	61fb      	str	r3, [r7, #28]
        break;
 8005720:	e00d      	b.n	800573e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005722:	f7fe f921 	bl	8003968 <HAL_RCC_GetSysClockFreq>
 8005726:	61f8      	str	r0, [r7, #28]
        break;
 8005728:	e009      	b.n	800573e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800572a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800572e:	61fb      	str	r3, [r7, #28]
        break;
 8005730:	e005      	b.n	800573e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005732:	2300      	movs	r3, #0
 8005734:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800573c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d077      	beq.n	8005834 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	005a      	lsls	r2, r3, #1
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	085b      	lsrs	r3, r3, #1
 800574e:	441a      	add	r2, r3
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	fbb2 f3f3 	udiv	r3, r2, r3
 8005758:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	2b0f      	cmp	r3, #15
 800575e:	d916      	bls.n	800578e <UART_SetConfig+0x4a6>
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005766:	d212      	bcs.n	800578e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	b29b      	uxth	r3, r3
 800576c:	f023 030f 	bic.w	r3, r3, #15
 8005770:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005772:	69bb      	ldr	r3, [r7, #24]
 8005774:	085b      	lsrs	r3, r3, #1
 8005776:	b29b      	uxth	r3, r3
 8005778:	f003 0307 	and.w	r3, r3, #7
 800577c:	b29a      	uxth	r2, r3
 800577e:	8afb      	ldrh	r3, [r7, #22]
 8005780:	4313      	orrs	r3, r2
 8005782:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	8afa      	ldrh	r2, [r7, #22]
 800578a:	60da      	str	r2, [r3, #12]
 800578c:	e052      	b.n	8005834 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005794:	e04e      	b.n	8005834 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005796:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800579a:	2b08      	cmp	r3, #8
 800579c:	d827      	bhi.n	80057ee <UART_SetConfig+0x506>
 800579e:	a201      	add	r2, pc, #4	; (adr r2, 80057a4 <UART_SetConfig+0x4bc>)
 80057a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a4:	080057c9 	.word	0x080057c9
 80057a8:	080057d1 	.word	0x080057d1
 80057ac:	080057d9 	.word	0x080057d9
 80057b0:	080057ef 	.word	0x080057ef
 80057b4:	080057df 	.word	0x080057df
 80057b8:	080057ef 	.word	0x080057ef
 80057bc:	080057ef 	.word	0x080057ef
 80057c0:	080057ef 	.word	0x080057ef
 80057c4:	080057e7 	.word	0x080057e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057c8:	f7fe f966 	bl	8003a98 <HAL_RCC_GetPCLK1Freq>
 80057cc:	61f8      	str	r0, [r7, #28]
        break;
 80057ce:	e014      	b.n	80057fa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057d0:	f7fe f978 	bl	8003ac4 <HAL_RCC_GetPCLK2Freq>
 80057d4:	61f8      	str	r0, [r7, #28]
        break;
 80057d6:	e010      	b.n	80057fa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057d8:	4b1e      	ldr	r3, [pc, #120]	; (8005854 <UART_SetConfig+0x56c>)
 80057da:	61fb      	str	r3, [r7, #28]
        break;
 80057dc:	e00d      	b.n	80057fa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057de:	f7fe f8c3 	bl	8003968 <HAL_RCC_GetSysClockFreq>
 80057e2:	61f8      	str	r0, [r7, #28]
        break;
 80057e4:	e009      	b.n	80057fa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057ea:	61fb      	str	r3, [r7, #28]
        break;
 80057ec:	e005      	b.n	80057fa <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80057ee:	2300      	movs	r3, #0
 80057f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80057f8:	bf00      	nop
    }

    if (pclk != 0U)
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d019      	beq.n	8005834 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	085a      	lsrs	r2, r3, #1
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	441a      	add	r2, r3
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005812:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	2b0f      	cmp	r3, #15
 8005818:	d909      	bls.n	800582e <UART_SetConfig+0x546>
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005820:	d205      	bcs.n	800582e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	b29a      	uxth	r2, r3
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	60da      	str	r2, [r3, #12]
 800582c:	e002      	b.n	8005834 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2200      	movs	r2, #0
 8005838:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2200      	movs	r2, #0
 800583e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005840:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005844:	4618      	mov	r0, r3
 8005846:	3728      	adds	r7, #40	; 0x28
 8005848:	46bd      	mov	sp, r7
 800584a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800584e:	bf00      	nop
 8005850:	40008000 	.word	0x40008000
 8005854:	00f42400 	.word	0x00f42400

08005858 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005858:	b480      	push	{r7}
 800585a:	b083      	sub	sp, #12
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005864:	f003 0308 	and.w	r3, r3, #8
 8005868:	2b00      	cmp	r3, #0
 800586a:	d00a      	beq.n	8005882 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	430a      	orrs	r2, r1
 8005880:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005886:	f003 0301 	and.w	r3, r3, #1
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00a      	beq.n	80058a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	430a      	orrs	r2, r1
 80058a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a8:	f003 0302 	and.w	r3, r3, #2
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d00a      	beq.n	80058c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	430a      	orrs	r2, r1
 80058c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ca:	f003 0304 	and.w	r3, r3, #4
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00a      	beq.n	80058e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	430a      	orrs	r2, r1
 80058e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ec:	f003 0310 	and.w	r3, r3, #16
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d00a      	beq.n	800590a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	430a      	orrs	r2, r1
 8005908:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590e:	f003 0320 	and.w	r3, r3, #32
 8005912:	2b00      	cmp	r3, #0
 8005914:	d00a      	beq.n	800592c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	430a      	orrs	r2, r1
 800592a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005934:	2b00      	cmp	r3, #0
 8005936:	d01a      	beq.n	800596e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	430a      	orrs	r2, r1
 800594c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005952:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005956:	d10a      	bne.n	800596e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	430a      	orrs	r2, r1
 800596c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005976:	2b00      	cmp	r3, #0
 8005978:	d00a      	beq.n	8005990 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	430a      	orrs	r2, r1
 800598e:	605a      	str	r2, [r3, #4]
  }
}
 8005990:	bf00      	nop
 8005992:	370c      	adds	r7, #12
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b098      	sub	sp, #96	; 0x60
 80059a0:	af02      	add	r7, sp, #8
 80059a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80059ac:	f7fc fde0 	bl	8002570 <HAL_GetTick>
 80059b0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 0308 	and.w	r3, r3, #8
 80059bc:	2b08      	cmp	r3, #8
 80059be:	d12e      	bne.n	8005a1e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059c4:	9300      	str	r3, [sp, #0]
 80059c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059c8:	2200      	movs	r2, #0
 80059ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 f88c 	bl	8005aec <UART_WaitOnFlagUntilTimeout>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d021      	beq.n	8005a1e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e2:	e853 3f00 	ldrex	r3, [r3]
 80059e6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80059e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059ee:	653b      	str	r3, [r7, #80]	; 0x50
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	461a      	mov	r2, r3
 80059f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059f8:	647b      	str	r3, [r7, #68]	; 0x44
 80059fa:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80059fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a00:	e841 2300 	strex	r3, r2, [r1]
 8005a04:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d1e6      	bne.n	80059da <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2220      	movs	r2, #32
 8005a10:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a1a:	2303      	movs	r3, #3
 8005a1c:	e062      	b.n	8005ae4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 0304 	and.w	r3, r3, #4
 8005a28:	2b04      	cmp	r3, #4
 8005a2a:	d149      	bne.n	8005ac0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a30:	9300      	str	r3, [sp, #0]
 8005a32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a34:	2200      	movs	r2, #0
 8005a36:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 f856 	bl	8005aec <UART_WaitOnFlagUntilTimeout>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d03c      	beq.n	8005ac0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4e:	e853 3f00 	ldrex	r3, [r3]
 8005a52:	623b      	str	r3, [r7, #32]
   return(result);
 8005a54:	6a3b      	ldr	r3, [r7, #32]
 8005a56:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	461a      	mov	r2, r3
 8005a62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a64:	633b      	str	r3, [r7, #48]	; 0x30
 8005a66:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a6c:	e841 2300 	strex	r3, r2, [r1]
 8005a70:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d1e6      	bne.n	8005a46 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	3308      	adds	r3, #8
 8005a7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	e853 3f00 	ldrex	r3, [r3]
 8005a86:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f023 0301 	bic.w	r3, r3, #1
 8005a8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	3308      	adds	r3, #8
 8005a96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a98:	61fa      	str	r2, [r7, #28]
 8005a9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a9c:	69b9      	ldr	r1, [r7, #24]
 8005a9e:	69fa      	ldr	r2, [r7, #28]
 8005aa0:	e841 2300 	strex	r3, r2, [r1]
 8005aa4:	617b      	str	r3, [r7, #20]
   return(result);
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d1e5      	bne.n	8005a78 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2220      	movs	r2, #32
 8005ab0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005abc:	2303      	movs	r3, #3
 8005abe:	e011      	b.n	8005ae4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2220      	movs	r2, #32
 8005ac4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2220      	movs	r2, #32
 8005aca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005ae2:	2300      	movs	r3, #0
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3758      	adds	r7, #88	; 0x58
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}

08005aec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b084      	sub	sp, #16
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	60f8      	str	r0, [r7, #12]
 8005af4:	60b9      	str	r1, [r7, #8]
 8005af6:	603b      	str	r3, [r7, #0]
 8005af8:	4613      	mov	r3, r2
 8005afa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005afc:	e049      	b.n	8005b92 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005afe:	69bb      	ldr	r3, [r7, #24]
 8005b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b04:	d045      	beq.n	8005b92 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b06:	f7fc fd33 	bl	8002570 <HAL_GetTick>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	1ad3      	subs	r3, r2, r3
 8005b10:	69ba      	ldr	r2, [r7, #24]
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d302      	bcc.n	8005b1c <UART_WaitOnFlagUntilTimeout+0x30>
 8005b16:	69bb      	ldr	r3, [r7, #24]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d101      	bne.n	8005b20 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	e048      	b.n	8005bb2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 0304 	and.w	r3, r3, #4
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d031      	beq.n	8005b92 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	69db      	ldr	r3, [r3, #28]
 8005b34:	f003 0308 	and.w	r3, r3, #8
 8005b38:	2b08      	cmp	r3, #8
 8005b3a:	d110      	bne.n	8005b5e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2208      	movs	r2, #8
 8005b42:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b44:	68f8      	ldr	r0, [r7, #12]
 8005b46:	f000 f838 	bl	8005bba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2208      	movs	r2, #8
 8005b4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e029      	b.n	8005bb2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	69db      	ldr	r3, [r3, #28]
 8005b64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b6c:	d111      	bne.n	8005b92 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b78:	68f8      	ldr	r0, [r7, #12]
 8005b7a:	f000 f81e 	bl	8005bba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2220      	movs	r2, #32
 8005b82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	e00f      	b.n	8005bb2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	69da      	ldr	r2, [r3, #28]
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	68ba      	ldr	r2, [r7, #8]
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	bf0c      	ite	eq
 8005ba2:	2301      	moveq	r3, #1
 8005ba4:	2300      	movne	r3, #0
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	461a      	mov	r2, r3
 8005baa:	79fb      	ldrb	r3, [r7, #7]
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d0a6      	beq.n	8005afe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3710      	adds	r7, #16
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}

08005bba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005bba:	b480      	push	{r7}
 8005bbc:	b095      	sub	sp, #84	; 0x54
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bca:	e853 3f00 	ldrex	r3, [r3]
 8005bce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005bd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	461a      	mov	r2, r3
 8005bde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005be0:	643b      	str	r3, [r7, #64]	; 0x40
 8005be2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005be6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005be8:	e841 2300 	strex	r3, r2, [r1]
 8005bec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d1e6      	bne.n	8005bc2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	3308      	adds	r3, #8
 8005bfa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfc:	6a3b      	ldr	r3, [r7, #32]
 8005bfe:	e853 3f00 	ldrex	r3, [r3]
 8005c02:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	f023 0301 	bic.w	r3, r3, #1
 8005c0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	3308      	adds	r3, #8
 8005c12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c14:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c1c:	e841 2300 	strex	r3, r2, [r1]
 8005c20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d1e5      	bne.n	8005bf4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d118      	bne.n	8005c62 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	e853 3f00 	ldrex	r3, [r3]
 8005c3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	f023 0310 	bic.w	r3, r3, #16
 8005c44:	647b      	str	r3, [r7, #68]	; 0x44
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c4e:	61bb      	str	r3, [r7, #24]
 8005c50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c52:	6979      	ldr	r1, [r7, #20]
 8005c54:	69ba      	ldr	r2, [r7, #24]
 8005c56:	e841 2300 	strex	r3, r2, [r1]
 8005c5a:	613b      	str	r3, [r7, #16]
   return(result);
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d1e6      	bne.n	8005c30 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2220      	movs	r2, #32
 8005c66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005c76:	bf00      	nop
 8005c78:	3754      	adds	r7, #84	; 0x54
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr

08005c82 <memset>:
 8005c82:	4402      	add	r2, r0
 8005c84:	4603      	mov	r3, r0
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d100      	bne.n	8005c8c <memset+0xa>
 8005c8a:	4770      	bx	lr
 8005c8c:	f803 1b01 	strb.w	r1, [r3], #1
 8005c90:	e7f9      	b.n	8005c86 <memset+0x4>
	...

08005c94 <__libc_init_array>:
 8005c94:	b570      	push	{r4, r5, r6, lr}
 8005c96:	4d0d      	ldr	r5, [pc, #52]	; (8005ccc <__libc_init_array+0x38>)
 8005c98:	4c0d      	ldr	r4, [pc, #52]	; (8005cd0 <__libc_init_array+0x3c>)
 8005c9a:	1b64      	subs	r4, r4, r5
 8005c9c:	10a4      	asrs	r4, r4, #2
 8005c9e:	2600      	movs	r6, #0
 8005ca0:	42a6      	cmp	r6, r4
 8005ca2:	d109      	bne.n	8005cb8 <__libc_init_array+0x24>
 8005ca4:	4d0b      	ldr	r5, [pc, #44]	; (8005cd4 <__libc_init_array+0x40>)
 8005ca6:	4c0c      	ldr	r4, [pc, #48]	; (8005cd8 <__libc_init_array+0x44>)
 8005ca8:	f000 f818 	bl	8005cdc <_init>
 8005cac:	1b64      	subs	r4, r4, r5
 8005cae:	10a4      	asrs	r4, r4, #2
 8005cb0:	2600      	movs	r6, #0
 8005cb2:	42a6      	cmp	r6, r4
 8005cb4:	d105      	bne.n	8005cc2 <__libc_init_array+0x2e>
 8005cb6:	bd70      	pop	{r4, r5, r6, pc}
 8005cb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cbc:	4798      	blx	r3
 8005cbe:	3601      	adds	r6, #1
 8005cc0:	e7ee      	b.n	8005ca0 <__libc_init_array+0xc>
 8005cc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cc6:	4798      	blx	r3
 8005cc8:	3601      	adds	r6, #1
 8005cca:	e7f2      	b.n	8005cb2 <__libc_init_array+0x1e>
 8005ccc:	08005d98 	.word	0x08005d98
 8005cd0:	08005d98 	.word	0x08005d98
 8005cd4:	08005d98 	.word	0x08005d98
 8005cd8:	08005d9c 	.word	0x08005d9c

08005cdc <_init>:
 8005cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cde:	bf00      	nop
 8005ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ce2:	bc08      	pop	{r3}
 8005ce4:	469e      	mov	lr, r3
 8005ce6:	4770      	bx	lr

08005ce8 <_fini>:
 8005ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cea:	bf00      	nop
 8005cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cee:	bc08      	pop	{r3}
 8005cf0:	469e      	mov	lr, r3
 8005cf2:	4770      	bx	lr
